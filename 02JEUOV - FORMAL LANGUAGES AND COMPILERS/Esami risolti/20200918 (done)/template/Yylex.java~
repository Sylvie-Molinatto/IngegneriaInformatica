// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;

//jflex scanner.jflex; java java_cup.MainDrawTree parser.cup;javac *.java;java Main example.txt

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\2\0"+
    "\1\5\6\0\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\4\16\2\17\1\11\1\20\4\0"+
    "\1\21\32\17\4\0\1\22\1\0\4\23\1\24\1\23"+
    "\1\25\1\23\1\26\1\23\1\27\2\23\1\30\1\31"+
    "\2\23\1\32\1\23\1\33\3\23\1\34\1\35\1\36"+
    "\1\37\1\0\1\40\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\2\1\6\0\1\4"+
    "\15\0\3\5\2\0\1\6\3\0\1\5\24\0\1\7"+
    "\1\0\1\5\116\0\1\7\321\0\1\7\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\41\0\102\0\143\0\204\0\245\0\41"+
    "\0\306\0\347\0\u0108\0\u0129\0\245\0\u014a\0\u016b\0\u018c"+
    "\0\41\0\u01ad\0\u01ce\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273"+
    "\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b"+
    "\0\u039c\0\u03bd\0\u03de\0\245\0\u03ff\0\u0420\0\u0441\0\u0462"+
    "\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a"+
    "\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672"+
    "\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717\0\u0738\0\u0630\0\u0759"+
    "\0\u077a\0\u079b\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861"+
    "\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969"+
    "\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71"+
    "\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79"+
    "\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81"+
    "\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89"+
    "\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91"+
    "\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99"+
    "\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1"+
    "\0\u10c2\0\u10e3\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9"+
    "\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1"+
    "\0\u12d2\0\u12f3\0\u1314\0\u1335\0\u1356\0\u1377\0\u1398\0\u13b9"+
    "\0\u13da\0\u13fb\0\u141c\0\u143d\0\u145e\0\u147f\0\u14a0\0\u14c1"+
    "\0\u14e2\0\u1503\0\u1524\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9"+
    "\0\u15ea\0\u160b\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1"+
    "\0\u16f2\0\u1713\0\u1734\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9"+
    "\0\u17fa\0\u181b\0\u183c\0\u185d\0\u187e\0\u189f\0\u18c0\0\u18e1"+
    "\0\u1902\0\u1923\0\u1944\0\u1965\0\u1986\0\u19a7\0\u19c8\0\u19e9"+
    "\0\u1a0a\0\u1a2b\0\u1a4c\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1"+
    "\0\u1b12\0\u1b33\0\u1b54\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9"+
    "\0\u1c1a\0\u1c3b\0\u1c5c\0\u1c7d\0\u1c9e\0\u1cbf\0\u1ce0\0\u1d01"+
    "\0\u1d22\0\u1d43\0\u1d64\0\u1d85\0\u1da6\0\u1dc7\0\u1de8\0\u1e09"+
    "\0\u1e2a\0\u1e4b\0\u1e6c\0\u1e8d\0\u1eae\0\u1ecf\0\u1ef0\0\u1f11"+
    "\0\u1f32\0\u1f53\0\u1f74\0\u1f95\0\u1fb6\0\u1fd7\0\u1ff8\0\u2019"+
    "\0\u203a\0\u205b\0\u207c\0\u209d\0\u20be\0\u20df\0\u2100\0\u2121"+
    "\0\u2142\0\u2163\0\u2184\0\u21a5\0\u21c6\0\u21e7\0\u2208\0\u2229"+
    "\0\u224a\0\u226b\0\u228c\0\u22ad\0\u22ce\0\u22ef\0\u2310\0\u2331"+
    "\0\u2352\0\u2373\0\u2394\0\u23b5\0\u23d6\0\u23f7\0\u2418\0\u2439"+
    "\0\u245a\0\u247b\0\u249c\0\u24bd\0\u24de\0\u24ff\0\u2520\0\u2541"+
    "\0\u2562\0\u2583\0\u25a4\0\u25c5\0\u25e6\0\u2607\0\u2628\0\u2649"+
    "\0\u266a\0\u268b\0\u26ac\0\u26cd\0\u26ee\0\u270f\0\u2730\0\u2751"+
    "\0\u2772\0\u2793\0\u27b4\0\u27d5\0\u27f6\0\u2817\0\u2838\0\u2859"+
    "\0\u287a\0\u289b\0\u28bc\0\u28dd\0\u28fe\0\u291f\0\u2940\0\u2961"+
    "\0\u2982\0\u29a3\0\u29c4\0\u29e5\0\u2a06\0\u2a27\0\u2a48\0\u2a69"+
    "\0\u2a8a\0\u2aab\0\u2acc\0\u2aed\0\u2b0e\0\u2b2f\0\u2b50\0\u2b71"+
    "\0\u2b92\0\u2bb3\0\u2bd4\0\u2bf5\0\u2c16\0\u2c37\0\u2c58\0\41"+
    "\0\u2c79";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\1\2\6\7\1\10\1\2\11\7\1\11\3\7\1\12"+
    "\1\2\43\0\1\3\43\0\1\13\56\0\14\14\12\0"+
    "\1\15\1\0\6\15\1\0\1\16\15\15\12\0\1\15"+
    "\1\0\6\15\1\0\1\16\7\15\1\17\5\15\11\0"+
    "\1\20\36\0\1\21\56\0\14\22\14\0\6\23\3\0"+
    "\14\23\12\0\1\15\1\0\6\15\1\0\1\16\5\15"+
    "\1\24\7\15\2\0\7\20\1\25\31\20\23\0\14\26"+
    "\12\0\1\27\1\0\6\23\3\0\14\23\12\0\1\15"+
    "\1\0\6\15\1\0\1\16\2\15\1\30\12\15\2\0"+
    "\7\20\1\25\30\20\1\3\23\0\14\31\30\0\1\32"+
    "\1\0\1\33\1\34\17\0\1\15\1\0\6\15\1\0"+
    "\1\16\6\15\1\35\6\15\11\0\1\36\2\0\1\37"+
    "\1\40\3\41\4\0\14\26\35\0\1\42\31\0\1\32"+
    "\46\0\1\43\16\0\1\15\1\0\3\15\1\44\2\15"+
    "\1\0\1\16\15\15\15\0\3\41\1\37\56\0\1\45"+
    "\1\46\1\47\14\0\2\41\1\50\2\37\15\0\1\45"+
    "\1\46\1\47\14\0\5\37\15\0\1\45\1\46\1\47"+
    "\13\0\1\51\54\0\1\42\47\0\1\52\41\0\1\52"+
    "\41\0\1\52\14\0\4\37\16\0\1\45\1\46\1\47"+
    "\12\0\1\53\1\0\6\53\2\0\15\53\36\0\1\54"+
    "\1\55\1\56\12\0\1\53\1\0\6\53\1\0\1\57"+
    "\15\53\36\0\1\60\41\0\1\60\41\0\1\60\14\0"+
    "\6\61\3\0\14\61\36\0\1\62\1\63\1\64\12\0"+
    "\1\65\1\0\6\61\3\0\14\61\36\0\1\66\41\0"+
    "\1\66\41\0\1\66\30\0\1\67\1\0\1\70\1\71"+
    "\43\0\1\72\1\73\1\74\35\0\1\75\31\0\1\67"+
    "\46\0\1\76\42\0\1\77\41\0\1\77\41\0\1\77"+
    "\13\0\1\100\54\0\1\75\23\0\1\101\1\0\6\101"+
    "\2\0\15\101\12\0\1\101\1\0\6\101\1\0\1\102"+
    "\15\101\14\0\6\103\3\0\14\103\12\0\1\104\1\0"+
    "\6\103\3\0\14\103\30\0\1\105\1\0\1\106\1\107"+
    "\42\0\1\110\31\0\1\105\46\0\1\111\17\0\1\112"+
    "\54\0\1\110\23\0\1\113\1\0\6\113\2\0\15\113"+
    "\12\0\1\113\1\0\6\113\1\0\1\114\15\113\14\0"+
    "\6\115\3\0\14\115\12\0\1\116\1\0\6\115\3\0"+
    "\14\115\30\0\1\117\1\0\1\120\1\121\42\0\1\122"+
    "\31\0\1\117\46\0\1\123\17\0\1\124\54\0\1\122"+
    "\23\0\1\125\1\0\6\125\2\0\15\125\12\0\1\125"+
    "\1\0\6\125\1\0\1\126\15\125\14\0\6\127\3\0"+
    "\14\127\12\0\1\130\1\0\6\127\3\0\14\127\30\0"+
    "\1\131\1\0\1\132\1\133\42\0\1\134\31\0\1\131"+
    "\46\0\1\135\17\0\1\136\54\0\1\134\23\0\1\137"+
    "\1\0\6\137\2\0\15\137\12\0\1\137\1\0\6\137"+
    "\1\0\1\140\15\137\14\0\6\141\3\0\14\141\12\0"+
    "\1\142\1\0\6\141\3\0\14\141\30\0\1\143\1\0"+
    "\1\144\1\145\42\0\1\146\31\0\1\143\46\0\1\147"+
    "\17\0\1\150\54\0\1\146\23\0\1\151\1\0\6\151"+
    "\2\0\15\151\12\0\1\151\1\0\6\151\1\0\1\152"+
    "\15\151\14\0\6\153\3\0\14\153\12\0\1\154\1\0"+
    "\6\153\3\0\14\153\30\0\1\155\1\0\1\156\1\157"+
    "\42\0\1\160\31\0\1\155\46\0\1\161\17\0\1\162"+
    "\54\0\1\160\23\0\1\163\1\0\6\163\2\0\15\163"+
    "\12\0\1\163\1\0\6\163\1\0\1\164\15\163\14\0"+
    "\6\165\3\0\14\165\12\0\1\166\1\0\6\165\3\0"+
    "\14\165\30\0\1\167\1\0\1\170\1\171\42\0\1\172"+
    "\31\0\1\167\46\0\1\173\17\0\1\174\54\0\1\172"+
    "\23\0\1\175\1\0\6\175\2\0\15\175\12\0\1\175"+
    "\1\0\6\175\1\0\1\176\15\175\14\0\6\177\3\0"+
    "\14\177\12\0\1\200\1\0\6\177\3\0\14\177\30\0"+
    "\1\201\1\0\1\202\1\203\42\0\1\204\31\0\1\201"+
    "\46\0\1\205\17\0\1\206\54\0\1\204\23\0\1\207"+
    "\1\0\6\207\2\0\15\207\12\0\1\207\1\0\6\207"+
    "\1\0\1\210\15\207\14\0\6\211\3\0\14\211\12\0"+
    "\1\212\1\0\6\211\3\0\14\211\30\0\1\213\1\0"+
    "\1\214\1\215\42\0\1\216\31\0\1\213\46\0\1\217"+
    "\17\0\1\220\54\0\1\216\23\0\1\221\1\0\6\221"+
    "\2\0\15\221\12\0\1\221\1\0\6\221\1\0\1\222"+
    "\15\221\14\0\6\223\3\0\14\223\12\0\1\224\1\0"+
    "\6\223\3\0\14\223\30\0\1\225\1\0\1\226\1\227"+
    "\42\0\1\230\31\0\1\225\46\0\1\231\17\0\1\232"+
    "\54\0\1\230\23\0\1\233\1\0\6\233\2\0\15\233"+
    "\12\0\1\233\1\0\6\233\1\0\1\234\15\233\14\0"+
    "\6\235\3\0\14\235\12\0\1\236\1\0\6\235\3\0"+
    "\14\235\30\0\1\237\1\0\1\240\1\241\42\0\1\242"+
    "\31\0\1\237\46\0\1\243\17\0\1\244\54\0\1\242"+
    "\23\0\1\245\1\0\6\245\2\0\15\245\12\0\1\245"+
    "\1\0\6\245\1\0\1\246\15\245\14\0\6\247\3\0"+
    "\14\247\12\0\1\250\1\0\6\247\3\0\14\247\30\0"+
    "\1\251\1\0\1\252\1\253\42\0\1\254\31\0\1\251"+
    "\46\0\1\255\17\0\1\256\54\0\1\254\23\0\1\257"+
    "\1\0\6\257\2\0\15\257\12\0\1\257\1\0\6\257"+
    "\1\0\1\260\15\257\14\0\6\261\3\0\14\261\12\0"+
    "\1\262\1\0\6\261\3\0\14\261\30\0\1\263\1\0"+
    "\1\264\1\265\42\0\1\266\31\0\1\263\46\0\1\267"+
    "\17\0\1\270\54\0\1\266\23\0\1\271\1\0\6\271"+
    "\2\0\15\271\12\0\1\271\1\0\6\271\1\0\1\272"+
    "\15\271\14\0\6\273\3\0\14\273\12\0\1\274\1\0"+
    "\6\273\3\0\14\273\30\0\1\275\1\0\1\276\1\277"+
    "\42\0\1\300\31\0\1\275\46\0\1\301\17\0\1\302"+
    "\54\0\1\300\23\0\1\303\1\0\6\303\2\0\15\303"+
    "\12\0\1\303\1\0\6\303\1\0\1\304\15\303\14\0"+
    "\6\305\3\0\14\305\12\0\1\306\1\0\6\305\3\0"+
    "\14\305\30\0\1\307\1\0\1\310\1\311\42\0\1\312"+
    "\31\0\1\307\46\0\1\313\17\0\1\314\54\0\1\312"+
    "\23\0\1\315\1\0\6\315\2\0\15\315\12\0\1\315"+
    "\1\0\6\315\1\0\1\316\15\315\14\0\6\317\3\0"+
    "\14\317\12\0\1\320\1\0\6\317\3\0\14\317\30\0"+
    "\1\321\1\0\1\322\1\323\42\0\1\324\31\0\1\321"+
    "\46\0\1\325\17\0\1\326\54\0\1\324\23\0\1\327"+
    "\1\0\6\327\2\0\15\327\12\0\1\327\1\0\6\327"+
    "\1\0\1\330\15\327\14\0\6\331\3\0\14\331\12\0"+
    "\1\332\1\0\6\331\3\0\14\331\30\0\1\333\1\0"+
    "\1\334\1\335\42\0\1\336\31\0\1\333\46\0\1\337"+
    "\17\0\1\340\54\0\1\336\23\0\1\341\1\0\6\341"+
    "\2\0\15\341\12\0\1\341\1\0\6\341\1\0\1\342"+
    "\15\341\14\0\6\343\3\0\14\343\12\0\1\344\1\0"+
    "\6\343\3\0\14\343\30\0\1\345\1\0\1\346\1\347"+
    "\42\0\1\350\31\0\1\345\46\0\1\351\17\0\1\352"+
    "\54\0\1\350\23\0\1\353\1\0\6\353\2\0\15\353"+
    "\12\0\1\353\1\0\6\353\1\0\1\354\15\353\14\0"+
    "\6\355\3\0\14\355\12\0\1\356\1\0\6\355\3\0"+
    "\14\355\30\0\1\357\1\0\1\360\1\361\42\0\1\362"+
    "\31\0\1\357\46\0\1\363\17\0\1\364\54\0\1\362"+
    "\23\0\1\365\1\0\6\365\2\0\15\365\12\0\1\365"+
    "\1\0\6\365\1\0\1\366\15\365\14\0\6\367\3\0"+
    "\14\367\12\0\1\370\1\0\6\367\3\0\14\367\30\0"+
    "\1\371\1\0\1\372\1\373\42\0\1\374\31\0\1\371"+
    "\46\0\1\375\17\0\1\376\54\0\1\374\23\0\1\377"+
    "\1\0\6\377\2\0\15\377\12\0\1\377\1\0\6\377"+
    "\1\0\1\u0100\15\377\14\0\6\u0101\3\0\14\u0101\12\0"+
    "\1\u0102\1\0\6\u0101\3\0\14\u0101\30\0\1\u0103\1\0"+
    "\1\u0104\1\u0105\42\0\1\u0106\31\0\1\u0103\46\0\1\u0107"+
    "\17\0\1\u0108\54\0\1\u0106\23\0\1\u0109\1\0\6\u0109"+
    "\2\0\15\u0109\12\0\1\u0109\1\0\6\u0109\1\0\1\u010a"+
    "\15\u0109\14\0\6\u010b\3\0\14\u010b\12\0\1\u010c\1\0"+
    "\6\u010b\3\0\14\u010b\30\0\1\u010d\1\0\1\u010e\1\u010f"+
    "\42\0\1\u0110\31\0\1\u010d\46\0\1\u0111\17\0\1\u0112"+
    "\54\0\1\u0110\23\0\1\u0113\1\0\6\u0113\2\0\15\u0113"+
    "\12\0\1\u0113\1\0\6\u0113\1\0\1\u0114\15\u0113\14\0"+
    "\6\u0115\3\0\14\u0115\12\0\1\u0116\1\0\6\u0115\3\0"+
    "\14\u0115\30\0\1\u0117\1\0\1\u0118\1\u0119\42\0\1\u011a"+
    "\31\0\1\u0117\46\0\1\u011b\17\0\1\u011c\54\0\1\u011a"+
    "\23\0\1\u011d\1\0\6\u011d\2\0\15\u011d\12\0\1\u011d"+
    "\1\0\6\u011d\1\0\1\u011e\15\u011d\14\0\6\u011f\3\0"+
    "\14\u011f\12\0\1\u0120\1\0\6\u011f\3\0\14\u011f\30\0"+
    "\1\u0121\1\0\1\u0122\1\u0123\42\0\1\u0124\31\0\1\u0121"+
    "\46\0\1\u0125\17\0\1\u0126\54\0\1\u0124\23\0\1\u0127"+
    "\1\0\6\u0127\2\0\15\u0127\12\0\1\u0127\1\0\6\u0127"+
    "\1\0\1\u0128\15\u0127\14\0\6\u0129\3\0\14\u0129\12\0"+
    "\1\u012a\1\0\6\u0129\3\0\14\u0129\30\0\1\u012b\1\0"+
    "\1\u012c\1\u012d\42\0\1\u012e\31\0\1\u012b\46\0\1\u012f"+
    "\17\0\1\u0130\54\0\1\u012e\23\0\1\u0131\1\0\6\u0131"+
    "\2\0\15\u0131\12\0\1\u0131\1\0\6\u0131\1\0\1\u0132"+
    "\15\u0131\14\0\6\u0133\3\0\14\u0133\12\0\1\u0134\1\0"+
    "\6\u0133\3\0\14\u0133\30\0\1\u0135\1\0\1\u0136\1\u0137"+
    "\42\0\1\u0138\31\0\1\u0135\46\0\1\u0139\17\0\1\u013a"+
    "\54\0\1\u0138\23\0\1\u013b\1\0\6\u013b\2\0\15\u013b"+
    "\12\0\1\u013b\1\0\6\u013b\1\0\1\u013c\15\u013b\14\0"+
    "\6\u013d\3\0\14\u013d\12\0\1\u013e\1\0\6\u013d\3\0"+
    "\14\u013d\30\0\1\u013f\1\0\1\u0140\1\u0141\42\0\1\u0142"+
    "\31\0\1\u013f\46\0\1\u0143\17\0\1\u0144\54\0\1\u0142"+
    "\23\0\1\u0145\1\0\6\u0145\2\0\15\u0145\12\0\1\u0145"+
    "\1\0\6\u0145\1\0\1\u0146\15\u0145\14\0\6\u0147\3\0"+
    "\14\u0147\12\0\1\u0148\1\0\6\u0147\3\0\14\u0147\30\0"+
    "\1\u0149\1\0\1\u014a\1\u014b\42\0\1\u014c\31\0\1\u0149"+
    "\46\0\1\u014d\17\0\1\u014e\54\0\1\u014c\23\0\1\u014f"+
    "\1\0\6\u014f\2\0\15\u014f\12\0\1\u014f\1\0\6\u014f"+
    "\1\0\1\u0150\15\u014f\14\0\6\u0151\3\0\14\u0151\12\0"+
    "\1\u0152\1\0\6\u0151\3\0\14\u0151\30\0\1\u0153\1\0"+
    "\1\u0154\1\u0155\42\0\1\u0156\31\0\1\u0153\46\0\1\u0157"+
    "\17\0\1\u0158\54\0\1\u0156\23\0\1\u0159\1\0\6\u0159"+
    "\2\0\15\u0159\12\0\1\u0159\1\0\6\u0159\1\0\1\u015a"+
    "\15\u0159\14\0\6\u015b\3\0\14\u015b\12\0\1\u015c\1\0"+
    "\6\u015b\3\0\14\u015b\30\0\1\u015d\1\0\1\u015e\1\u015f"+
    "\42\0\1\u0160\31\0\1\u015d\46\0\1\u0161\33\0\1\u0160"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11418];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\2\1\6\0\1\11\15\0"+
    "\3\1\2\0\1\1\3\0\1\1\24\0\1\1\1\0"+
    "\1\1\116\0\1\1\321\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
	    return new Symbol(type, yyline, yycolumn);
	}
	private Symbol sym(int type, Object value){
	    return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner error: " + yytext());
            }
            // fall through
          case 8: break;
          case 2:
            { ;
            }
            // fall through
          case 9: break;
          case 3:
            { return sym(sym.S);
            }
            // fall through
          case 10: break;
          case 4:
            { return sym(sym.SEP);
            }
            // fall through
          case 11: break;
          case 5:
            { return sym(sym.TK1);
            }
            // fall through
          case 12: break;
          case 6:
            { return sym(sym.TK3);
            }
            // fall through
          case 13: break;
          case 7:
            { return sym(sym.TK2);
            }
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
