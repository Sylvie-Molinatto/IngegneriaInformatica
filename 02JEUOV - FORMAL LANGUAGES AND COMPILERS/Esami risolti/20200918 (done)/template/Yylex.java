// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;

//jflex scanner.jflex; java java_cup.MainDrawTree parser.cup;javac *.java;java Main example.txt

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\6\4\0\1\7\1\10\1\11\1\0\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\22"+
    "\2\23\1\15\1\24\1\0\1\25\2\0\1\26\1\27"+
    "\2\30\1\31\1\32\6\30\1\33\1\30\1\34\1\35"+
    "\1\30\1\36\2\30\1\37\1\40\5\30\4\0\1\41"+
    "\1\0\1\42\2\43\1\44\1\45\1\46\1\47\1\43"+
    "\1\50\1\43\1\51\1\52\1\43\1\53\1\54\2\43"+
    "\1\55\1\56\1\57\1\60\1\43\1\61\1\62\1\63"+
    "\1\64\1\65\1\0\1\66\7\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\1\1\5"+
    "\1\1\1\6\1\7\13\10\1\1\1\0\1\11\4\0"+
    "\1\10\1\12\1\10\1\13\3\10\1\14\3\10\1\0"+
    "\1\15\2\0\1\16\2\10\1\17\1\10\1\20\3\10"+
    "\3\0\1\21\3\10\1\22\1\10\4\0\1\23\1\24"+
    "\1\10\1\25\1\0\3\26\2\0\1\27\3\0\1\26"+
    "\24\0\1\30\1\0\1\26\116\0\1\30\321\0\1\30"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\67\0\67"+
    "\0\u0113\0\67\0\u014a\0\67\0\67\0\u0181\0\u01b8\0\u01ef"+
    "\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\245\0\67\0\u0415\0\u044c\0\u014a\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u01b8\0\u055f\0\u0596\0\u05cd\0\u01b8\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\67\0\u06e0\0\u0717\0\u01b8\0\u074e"+
    "\0\u0785\0\u01b8\0\u07bc\0\u01b8\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u01b8\0\u093d\0\u0974\0\u09ab\0\u01b8\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u01b8\0\u01b8\0\u0af5\0\u01b8"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u01b8\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u101d\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f"+
    "\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737"+
    "\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef"+
    "\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7"+
    "\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f"+
    "\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17"+
    "\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf"+
    "\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2\0\u4119\0\u4150\0\u4187"+
    "\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a\0\u42d1\0\u4308\0\u433f"+
    "\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7"+
    "\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af"+
    "\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2\0\u47f9\0\u4830\0\u4867"+
    "\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f"+
    "\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7"+
    "\0\u4c0e\0\u4c45\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f"+
    "\0\u4dc6\0\u4dfd\0\u4e34\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47"+
    "\0\u4f7e\0\u4fb5\0\67\0\u4fec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\2\6\13\1\14\1\15"+
    "\1\2\1\16\1\17\1\20\1\21\4\17\1\22\2\17"+
    "\1\23\3\17\1\24\4\17\1\25\1\26\2\17\1\27"+
    "\1\17\1\30\3\17\1\31\1\2\71\0\1\3\64\0"+
    "\5\32\1\33\61\32\6\0\1\34\122\0\23\35\16\0"+
    "\1\36\1\0\6\36\2\0\1\37\36\36\16\0\1\36"+
    "\1\0\6\17\2\0\1\37\5\17\1\40\30\17\16\0"+
    "\1\36\1\0\6\17\2\0\1\37\36\17\16\0\1\36"+
    "\1\0\6\17\2\0\1\37\6\17\1\41\27\17\16\0"+
    "\1\36\1\0\6\17\2\0\1\37\7\17\1\42\26\17"+
    "\16\0\1\36\1\0\6\17\2\0\1\37\6\17\1\43"+
    "\27\17\16\0\1\36\1\0\6\17\2\0\1\37\24\17"+
    "\1\44\11\17\16\0\1\36\1\0\6\17\2\0\1\37"+
    "\13\17\1\45\22\17\16\0\1\36\1\0\6\17\2\0"+
    "\1\37\25\17\1\46\10\17\16\0\1\36\1\0\6\17"+
    "\2\0\1\37\26\17\1\47\7\17\16\0\1\36\1\0"+
    "\6\17\2\0\1\37\25\17\1\50\1\51\7\17\16\0"+
    "\1\36\1\0\6\17\2\0\1\37\26\17\1\52\7\17"+
    "\15\0\1\53\61\0\1\54\122\0\23\55\20\0\6\56"+
    "\3\0\12\56\1\0\23\56\16\0\1\36\1\0\6\17"+
    "\2\0\1\37\2\17\1\57\33\17\16\0\1\36\1\0"+
    "\6\17\2\0\1\37\5\17\1\60\30\17\16\0\1\36"+
    "\1\0\6\17\2\0\1\37\11\17\1\61\24\17\16\0"+
    "\1\36\1\0\6\17\2\0\1\37\15\17\1\62\20\17"+
    "\16\0\1\36\1\0\6\17\2\0\1\37\23\17\1\63"+
    "\12\17\16\0\1\36\1\0\6\17\2\0\1\37\30\17"+
    "\1\64\5\17\16\0\1\36\1\0\6\17\2\0\1\37"+
    "\22\17\1\65\13\17\16\0\1\36\1\0\6\17\2\0"+
    "\1\37\31\17\1\66\4\17\16\0\1\36\1\0\6\17"+
    "\2\0\1\37\21\17\1\67\14\17\2\0\13\53\1\70"+
    "\53\53\42\0\23\71\16\0\1\72\1\0\6\56\3\0"+
    "\12\56\1\0\23\56\16\0\1\36\1\0\6\17\2\0"+
    "\1\37\3\17\1\73\32\17\16\0\1\36\1\0\6\17"+
    "\2\0\1\37\1\74\35\17\16\0\1\36\1\0\6\17"+
    "\2\0\1\37\27\17\1\75\6\17\16\0\1\36\1\0"+
    "\6\17\2\0\1\37\16\17\1\76\17\17\16\0\1\36"+
    "\1\0\6\17\2\0\1\37\16\17\1\77\17\17\16\0"+
    "\1\36\1\0\6\17\2\0\1\37\30\17\1\100\5\17"+
    "\2\0\13\53\1\70\52\53\1\3\42\0\23\101\52\0"+
    "\1\102\2\0\1\103\1\104\26\0\1\36\1\0\6\17"+
    "\2\0\1\37\4\17\1\105\31\17\16\0\1\36\1\0"+
    "\6\17\2\0\1\37\16\17\1\106\17\17\16\0\1\36"+
    "\1\0\6\17\2\0\1\37\24\17\1\107\11\17\16\0"+
    "\1\36\1\0\6\17\2\0\1\37\16\17\1\110\17\17"+
    "\15\0\1\111\2\0\1\112\1\113\3\114\17\0\23\71"+
    "\61\0\1\115\54\0\1\102\76\0\1\116\25\0\1\36"+
    "\1\0\3\17\1\117\2\17\2\0\1\37\36\17\21\0"+
    "\3\114\1\112\126\0\1\120\1\121\1\122\20\0\2\114"+
    "\1\123\2\112\37\0\1\120\1\121\1\122\20\0\5\112"+
    "\37\0\1\120\1\121\1\122\17\0\1\124\120\0\1\115"+
    "\101\0\1\125\67\0\1\125\67\0\1\125\20\0\4\112"+
    "\40\0\1\120\1\121\1\122\16\0\1\126\1\0\6\126"+
    "\3\0\36\126\64\0\1\127\1\130\1\131\16\0\1\126"+
    "\1\0\6\126\2\0\1\132\36\126\64\0\1\133\67\0"+
    "\1\133\67\0\1\133\20\0\6\134\3\0\12\134\1\0"+
    "\23\134\64\0\1\135\1\136\1\137\16\0\1\140\1\0"+
    "\6\134\3\0\12\134\1\0\23\134\64\0\1\141\67\0"+
    "\1\141\67\0\1\141\52\0\1\142\2\0\1\143\1\144"+
    "\74\0\1\145\1\146\1\147\61\0\1\150\54\0\1\142"+
    "\76\0\1\151\73\0\1\152\67\0\1\152\67\0\1\152"+
    "\17\0\1\153\120\0\1\150\33\0\1\154\1\0\6\154"+
    "\3\0\36\154\16\0\1\154\1\0\6\154\2\0\1\155"+
    "\36\154\20\0\6\156\3\0\12\156\1\0\23\156\16\0"+
    "\1\157\1\0\6\156\3\0\12\156\1\0\23\156\52\0"+
    "\1\160\2\0\1\161\1\162\71\0\1\163\54\0\1\160"+
    "\76\0\1\164\26\0\1\165\120\0\1\163\33\0\1\166"+
    "\1\0\6\166\3\0\36\166\16\0\1\166\1\0\6\166"+
    "\2\0\1\167\36\166\20\0\6\170\3\0\12\170\1\0"+
    "\23\170\16\0\1\171\1\0\6\170\3\0\12\170\1\0"+
    "\23\170\52\0\1\172\2\0\1\173\1\174\71\0\1\175"+
    "\54\0\1\172\76\0\1\176\26\0\1\177\120\0\1\175"+
    "\33\0\1\200\1\0\6\200\3\0\36\200\16\0\1\200"+
    "\1\0\6\200\2\0\1\201\36\200\20\0\6\202\3\0"+
    "\12\202\1\0\23\202\16\0\1\203\1\0\6\202\3\0"+
    "\12\202\1\0\23\202\52\0\1\204\2\0\1\205\1\206"+
    "\71\0\1\207\54\0\1\204\76\0\1\210\26\0\1\211"+
    "\120\0\1\207\33\0\1\212\1\0\6\212\3\0\36\212"+
    "\16\0\1\212\1\0\6\212\2\0\1\213\36\212\20\0"+
    "\6\214\3\0\12\214\1\0\23\214\16\0\1\215\1\0"+
    "\6\214\3\0\12\214\1\0\23\214\52\0\1\216\2\0"+
    "\1\217\1\220\71\0\1\221\54\0\1\216\76\0\1\222"+
    "\26\0\1\223\120\0\1\221\33\0\1\224\1\0\6\224"+
    "\3\0\36\224\16\0\1\224\1\0\6\224\2\0\1\225"+
    "\36\224\20\0\6\226\3\0\12\226\1\0\23\226\16\0"+
    "\1\227\1\0\6\226\3\0\12\226\1\0\23\226\52\0"+
    "\1\230\2\0\1\231\1\232\71\0\1\233\54\0\1\230"+
    "\76\0\1\234\26\0\1\235\120\0\1\233\33\0\1\236"+
    "\1\0\6\236\3\0\36\236\16\0\1\236\1\0\6\236"+
    "\2\0\1\237\36\236\20\0\6\240\3\0\12\240\1\0"+
    "\23\240\16\0\1\241\1\0\6\240\3\0\12\240\1\0"+
    "\23\240\52\0\1\242\2\0\1\243\1\244\71\0\1\245"+
    "\54\0\1\242\76\0\1\246\26\0\1\247\120\0\1\245"+
    "\33\0\1\250\1\0\6\250\3\0\36\250\16\0\1\250"+
    "\1\0\6\250\2\0\1\251\36\250\20\0\6\252\3\0"+
    "\12\252\1\0\23\252\16\0\1\253\1\0\6\252\3\0"+
    "\12\252\1\0\23\252\52\0\1\254\2\0\1\255\1\256"+
    "\71\0\1\257\54\0\1\254\76\0\1\260\26\0\1\261"+
    "\120\0\1\257\33\0\1\262\1\0\6\262\3\0\36\262"+
    "\16\0\1\262\1\0\6\262\2\0\1\263\36\262\20\0"+
    "\6\264\3\0\12\264\1\0\23\264\16\0\1\265\1\0"+
    "\6\264\3\0\12\264\1\0\23\264\52\0\1\266\2\0"+
    "\1\267\1\270\71\0\1\271\54\0\1\266\76\0\1\272"+
    "\26\0\1\273\120\0\1\271\33\0\1\274\1\0\6\274"+
    "\3\0\36\274\16\0\1\274\1\0\6\274\2\0\1\275"+
    "\36\274\20\0\6\276\3\0\12\276\1\0\23\276\16\0"+
    "\1\277\1\0\6\276\3\0\12\276\1\0\23\276\52\0"+
    "\1\300\2\0\1\301\1\302\71\0\1\303\54\0\1\300"+
    "\76\0\1\304\26\0\1\305\120\0\1\303\33\0\1\306"+
    "\1\0\6\306\3\0\36\306\16\0\1\306\1\0\6\306"+
    "\2\0\1\307\36\306\20\0\6\310\3\0\12\310\1\0"+
    "\23\310\16\0\1\311\1\0\6\310\3\0\12\310\1\0"+
    "\23\310\52\0\1\312\2\0\1\313\1\314\71\0\1\315"+
    "\54\0\1\312\76\0\1\316\26\0\1\317\120\0\1\315"+
    "\33\0\1\320\1\0\6\320\3\0\36\320\16\0\1\320"+
    "\1\0\6\320\2\0\1\321\36\320\20\0\6\322\3\0"+
    "\12\322\1\0\23\322\16\0\1\323\1\0\6\322\3\0"+
    "\12\322\1\0\23\322\52\0\1\324\2\0\1\325\1\326"+
    "\71\0\1\327\54\0\1\324\76\0\1\330\26\0\1\331"+
    "\120\0\1\327\33\0\1\332\1\0\6\332\3\0\36\332"+
    "\16\0\1\332\1\0\6\332\2\0\1\333\36\332\20\0"+
    "\6\334\3\0\12\334\1\0\23\334\16\0\1\335\1\0"+
    "\6\334\3\0\12\334\1\0\23\334\52\0\1\336\2\0"+
    "\1\337\1\340\71\0\1\341\54\0\1\336\76\0\1\342"+
    "\26\0\1\343\120\0\1\341\33\0\1\344\1\0\6\344"+
    "\3\0\36\344\16\0\1\344\1\0\6\344\2\0\1\345"+
    "\36\344\20\0\6\346\3\0\12\346\1\0\23\346\16\0"+
    "\1\347\1\0\6\346\3\0\12\346\1\0\23\346\52\0"+
    "\1\350\2\0\1\351\1\352\71\0\1\353\54\0\1\350"+
    "\76\0\1\354\26\0\1\355\120\0\1\353\33\0\1\356"+
    "\1\0\6\356\3\0\36\356\16\0\1\356\1\0\6\356"+
    "\2\0\1\357\36\356\20\0\6\360\3\0\12\360\1\0"+
    "\23\360\16\0\1\361\1\0\6\360\3\0\12\360\1\0"+
    "\23\360\52\0\1\362\2\0\1\363\1\364\71\0\1\365"+
    "\54\0\1\362\76\0\1\366\26\0\1\367\120\0\1\365"+
    "\33\0\1\370\1\0\6\370\3\0\36\370\16\0\1\370"+
    "\1\0\6\370\2\0\1\371\36\370\20\0\6\372\3\0"+
    "\12\372\1\0\23\372\16\0\1\373\1\0\6\372\3\0"+
    "\12\372\1\0\23\372\52\0\1\374\2\0\1\375\1\376"+
    "\71\0\1\377\54\0\1\374\76\0\1\u0100\26\0\1\u0101"+
    "\120\0\1\377\33\0\1\u0102\1\0\6\u0102\3\0\36\u0102"+
    "\16\0\1\u0102\1\0\6\u0102\2\0\1\u0103\36\u0102\20\0"+
    "\6\u0104\3\0\12\u0104\1\0\23\u0104\16\0\1\u0105\1\0"+
    "\6\u0104\3\0\12\u0104\1\0\23\u0104\52\0\1\u0106\2\0"+
    "\1\u0107\1\u0108\71\0\1\u0109\54\0\1\u0106\76\0\1\u010a"+
    "\26\0\1\u010b\120\0\1\u0109\33\0\1\u010c\1\0\6\u010c"+
    "\3\0\36\u010c\16\0\1\u010c\1\0\6\u010c\2\0\1\u010d"+
    "\36\u010c\20\0\6\u010e\3\0\12\u010e\1\0\23\u010e\16\0"+
    "\1\u010f\1\0\6\u010e\3\0\12\u010e\1\0\23\u010e\52\0"+
    "\1\u0110\2\0\1\u0111\1\u0112\71\0\1\u0113\54\0\1\u0110"+
    "\76\0\1\u0114\26\0\1\u0115\120\0\1\u0113\33\0\1\u0116"+
    "\1\0\6\u0116\3\0\36\u0116\16\0\1\u0116\1\0\6\u0116"+
    "\2\0\1\u0117\36\u0116\20\0\6\u0118\3\0\12\u0118\1\0"+
    "\23\u0118\16\0\1\u0119\1\0\6\u0118\3\0\12\u0118\1\0"+
    "\23\u0118\52\0\1\u011a\2\0\1\u011b\1\u011c\71\0\1\u011d"+
    "\54\0\1\u011a\76\0\1\u011e\26\0\1\u011f\120\0\1\u011d"+
    "\33\0\1\u0120\1\0\6\u0120\3\0\36\u0120\16\0\1\u0120"+
    "\1\0\6\u0120\2\0\1\u0121\36\u0120\20\0\6\u0122\3\0"+
    "\12\u0122\1\0\23\u0122\16\0\1\u0123\1\0\6\u0122\3\0"+
    "\12\u0122\1\0\23\u0122\52\0\1\u0124\2\0\1\u0125\1\u0126"+
    "\71\0\1\u0127\54\0\1\u0124\76\0\1\u0128\26\0\1\u0129"+
    "\120\0\1\u0127\33\0\1\u012a\1\0\6\u012a\3\0\36\u012a"+
    "\16\0\1\u012a\1\0\6\u012a\2\0\1\u012b\36\u012a\20\0"+
    "\6\u012c\3\0\12\u012c\1\0\23\u012c\16\0\1\u012d\1\0"+
    "\6\u012c\3\0\12\u012c\1\0\23\u012c\52\0\1\u012e\2\0"+
    "\1\u012f\1\u0130\71\0\1\u0131\54\0\1\u012e\76\0\1\u0132"+
    "\26\0\1\u0133\120\0\1\u0131\33\0\1\u0134\1\0\6\u0134"+
    "\3\0\36\u0134\16\0\1\u0134\1\0\6\u0134\2\0\1\u0135"+
    "\36\u0134\20\0\6\u0136\3\0\12\u0136\1\0\23\u0136\16\0"+
    "\1\u0137\1\0\6\u0136\3\0\12\u0136\1\0\23\u0136\52\0"+
    "\1\u0138\2\0\1\u0139\1\u013a\71\0\1\u013b\54\0\1\u0138"+
    "\76\0\1\u013c\26\0\1\u013d\120\0\1\u013b\33\0\1\u013e"+
    "\1\0\6\u013e\3\0\36\u013e\16\0\1\u013e\1\0\6\u013e"+
    "\2\0\1\u013f\36\u013e\20\0\6\u0140\3\0\12\u0140\1\0"+
    "\23\u0140\16\0\1\u0141\1\0\6\u0140\3\0\12\u0140\1\0"+
    "\23\u0140\52\0\1\u0142\2\0\1\u0143\1\u0144\71\0\1\u0145"+
    "\54\0\1\u0142\76\0\1\u0146\26\0\1\u0147\120\0\1\u0145"+
    "\33\0\1\u0148\1\0\6\u0148\3\0\36\u0148\16\0\1\u0148"+
    "\1\0\6\u0148\2\0\1\u0149\36\u0148\20\0\6\u014a\3\0"+
    "\12\u014a\1\0\23\u014a\16\0\1\u014b\1\0\6\u014a\3\0"+
    "\12\u014a\1\0\23\u014a\52\0\1\u014c\2\0\1\u014d\1\u014e"+
    "\71\0\1\u014f\54\0\1\u014c\76\0\1\u0150\26\0\1\u0151"+
    "\120\0\1\u014f\33\0\1\u0152\1\0\6\u0152\3\0\36\u0152"+
    "\16\0\1\u0152\1\0\6\u0152\2\0\1\u0153\36\u0152\20\0"+
    "\6\u0154\3\0\12\u0154\1\0\23\u0154\16\0\1\u0155\1\0"+
    "\6\u0154\3\0\12\u0154\1\0\23\u0154\52\0\1\u0156\2\0"+
    "\1\u0157\1\u0158\71\0\1\u0159\54\0\1\u0156\76\0\1\u015a"+
    "\26\0\1\u015b\120\0\1\u0159\33\0\1\u015c\1\0\6\u015c"+
    "\3\0\36\u015c\16\0\1\u015c\1\0\6\u015c\2\0\1\u015d"+
    "\36\u015c\20\0\6\u015e\3\0\12\u015e\1\0\23\u015e\16\0"+
    "\1\u015f\1\0\6\u015e\3\0\12\u015e\1\0\23\u015e\52\0"+
    "\1\u0160\2\0\1\u0161\1\u0162\71\0\1\u0163\54\0\1\u0160"+
    "\76\0\1\u0164\26\0\1\u0165\120\0\1\u0163\33\0\1\u0166"+
    "\1\0\6\u0166\3\0\36\u0166\16\0\1\u0166\1\0\6\u0166"+
    "\2\0\1\u0167\36\u0166\20\0\6\u0168\3\0\12\u0168\1\0"+
    "\23\u0168\16\0\1\u0169\1\0\6\u0168\3\0\12\u0168\1\0"+
    "\23\u0168\52\0\1\u016a\2\0\1\u016b\1\u016c\71\0\1\u016d"+
    "\54\0\1\u016a\76\0\1\u016e\26\0\1\u016f\120\0\1\u016d"+
    "\33\0\1\u0170\1\0\6\u0170\3\0\36\u0170\16\0\1\u0170"+
    "\1\0\6\u0170\2\0\1\u0171\36\u0170\20\0\6\u0172\3\0"+
    "\12\u0172\1\0\23\u0172\16\0\1\u0173\1\0\6\u0172\3\0"+
    "\12\u0172\1\0\23\u0172\52\0\1\u0174\2\0\1\u0175\1\u0176"+
    "\71\0\1\u0177\54\0\1\u0174\76\0\1\u0178\26\0\1\u0179"+
    "\120\0\1\u0177\33\0\1\u017a\1\0\6\u017a\3\0\36\u017a"+
    "\16\0\1\u017a\1\0\6\u017a\2\0\1\u017b\36\u017a\20\0"+
    "\6\u017c\3\0\12\u017c\1\0\23\u017c\16\0\1\u017d\1\0"+
    "\6\u017c\3\0\12\u017c\1\0\23\u017c\52\0\1\u017e\2\0"+
    "\1\u017f\1\u0180\71\0\1\u0181\54\0\1\u017e\76\0\1\u0182"+
    "\26\0\1\u0183\120\0\1\u0181\33\0\1\u0184\1\0\6\u0184"+
    "\3\0\36\u0184\16\0\1\u0184\1\0\6\u0184\2\0\1\u0185"+
    "\36\u0184\20\0\6\u0186\3\0\12\u0186\1\0\23\u0186\16\0"+
    "\1\u0187\1\0\6\u0186\3\0\12\u0186\1\0\23\u0186\52\0"+
    "\1\u0188\2\0\1\u0189\1\u018a\71\0\1\u018b\54\0\1\u0188"+
    "\76\0\1\u018c\60\0\1\u018b\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20515];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\2\11\1\1\1\11\1\1\2\11"+
    "\14\1\1\0\1\11\4\0\13\1\1\0\1\11\2\0"+
    "\11\1\3\0\6\1\4\0\4\1\1\0\3\1\2\0"+
    "\1\1\3\0\1\1\24\0\1\1\1\0\1\1\116\0"+
    "\1\1\321\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
	    return new Symbol(type, yyline, yycolumn);
	}
	private Symbol sym(int type, Object value){
	    return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner error: " + yytext());
            }
            // fall through
          case 25: break;
          case 2:
            { ;
            }
            // fall through
          case 26: break;
          case 3:
            { return sym(sym.RO);
            }
            // fall through
          case 27: break;
          case 4:
            { return sym(sym.RC);
            }
            // fall through
          case 28: break;
          case 5:
            { return sym(sym.CM);
            }
            // fall through
          case 29: break;
          case 6:
            { return sym(sym.S);
            }
            // fall through
          case 30: break;
          case 7:
            { return sym(sym.EQ);
            }
            // fall through
          case 31: break;
          case 8:
            { return sym(sym.ID, new String(yytext()));
            }
            // fall through
          case 32: break;
          case 9:
            { return sym(sym.QSTRING,new String(yytext()));
            }
            // fall through
          case 33: break;
          case 10:
            { return sym(sym.DO);
            }
            // fall through
          case 34: break;
          case 11:
            { return sym(sym.TO);
            }
            // fall through
          case 35: break;
          case 12:
            { return sym(sym.OR);
            }
            // fall through
          case 36: break;
          case 13:
            { return sym(sym.SEP);
            }
            // fall through
          case 37: break;
          case 14:
            { return sym(sym.ANDFUNCTION);
            }
            // fall through
          case 38: break;
          case 15:
            { return sym(sym.AND);
            }
            // fall through
          case 39: break;
          case 16:
            { return sym(sym.NOT);
            }
            // fall through
          case 40: break;
          case 17:
            { return sym(sym.DONE);
            }
            // fall through
          case 41: break;
          case 18:
            { return sym(sym.TRUE);
            }
            // fall through
          case 42: break;
          case 19:
            { return sym(sym.EQUAL);
            }
            // fall through
          case 43: break;
          case 20:
            { return sym(sym.FALSE);
            }
            // fall through
          case 44: break;
          case 21:
            { return sym(sym.WRITE);
            }
            // fall through
          case 45: break;
          case 22:
            { return sym(sym.TK1);
            }
            // fall through
          case 46: break;
          case 23:
            { return sym(sym.TK3);
            }
            // fall through
          case 47: break;
          case 24:
            { return sym(sym.TK2);
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
