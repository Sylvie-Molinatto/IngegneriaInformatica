
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\010\000\002\003\014\000\002\004\005" +
    "\000\002\004\002\000\002\005\005\000\002\005\002\000" +
    "\002\006\012\000\002\006\005\000\002\007\006\000\002" +
    "\007\006\000\002\007\004\000\002\007\004\000\002\007" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\010\005\000\002\011\005\000\002\022\011\000" +
    "\002\016\005\000\002\016\005\000\002\016\002\000\002" +
    "\012\005\000\002\012\005\000\002\012\006\000\002\012" +
    "\006\000\002\013\005\000\002\014\005\000\002\017\002" +
    "\000\002\020\002\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\012\004\ufffb\005\ufffb\006\ufffb\010\ufffb\001" +
    "\002\000\004\002\123\001\002\000\004\010\024\001\002" +
    "\000\012\004\007\005\ufff9\006\ufff9\010\ufff9\001\002\000" +
    "\004\007\023\001\002\000\010\005\012\006\011\010\uffff" +
    "\001\002\000\004\007\014\001\002\000\004\007\013\001" +
    "\002\000\010\005\ufffa\006\ufffa\010\ufffa\001\002\000\012" +
    "\004\ufffb\005\ufffb\006\ufffb\010\ufffb\001\002\000\012\004" +
    "\007\005\ufff9\006\ufff9\010\ufff9\001\002\000\010\005\012" +
    "\006\017\010\ufffe\001\002\000\004\007\020\001\002\000" +
    "\010\004\ufffb\005\ufffb\010\ufffb\001\002\000\010\004\007" +
    "\005\ufff9\010\ufff9\001\002\000\006\005\012\010\ufffd\001" +
    "\002\000\012\004\ufffc\005\ufffc\006\ufffc\010\ufffc\001\002" +
    "\000\004\011\026\001\002\000\012\002\000\013\037\014" +
    "\033\020\031\001\002\000\010\007\ufff2\013\037\014\033" +
    "\001\002\000\004\007\030\001\002\000\010\013\037\014" +
    "\033\020\031\001\002\000\004\021\060\001\002\000\014" +
    "\002\uffef\007\uffef\013\uffef\014\uffef\020\uffef\001\002\000" +
    "\004\015\056\001\002\000\004\007\051\001\002\000\014" +
    "\002\ufff1\007\ufff1\013\ufff1\014\ufff1\020\ufff1\001\002\000" +
    "\014\002\ufff0\007\ufff0\013\ufff0\014\ufff0\020\ufff0\001\002" +
    "\000\004\015\040\001\002\000\010\013\044\014\041\026" +
    "\043\001\002\000\030\002\uffdc\007\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\024" +
    "\uffdc\001\002\000\022\002\uffee\007\uffee\012\uffee\013\uffee" +
    "\014\uffee\016\045\017\046\020\uffee\001\002\000\030\002" +
    "\uffde\007\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\022\uffde\024\uffde\001\002\000\030\002" +
    "\uffdd\007\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\024\uffdd\001\002\000\010\013" +
    "\044\014\041\026\043\001\002\000\010\013\044\014\041" +
    "\026\043\001\002\000\030\002\uffdf\007\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf" +
    "\024\uffdf\001\002\000\030\002\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\046\020\uffe0\022\uffe0" +
    "\024\uffe0\001\002\000\010\013\037\014\033\020\031\001" +
    "\002\000\004\007\053\001\002\000\010\013\037\014\033" +
    "\020\031\001\002\000\004\007\055\001\002\000\012\002" +
    "\ufff8\013\ufff8\014\ufff8\020\ufff8\001\002\000\010\013\044" +
    "\014\041\026\043\001\002\000\022\002\uffed\007\uffed\012" +
    "\uffed\013\uffed\014\uffed\016\045\017\046\020\uffed\001\002" +
    "\000\012\013\044\014\041\022\uffe9\026\043\001\002\000" +
    "\004\022\067\001\002\000\012\015\064\016\045\017\046" +
    "\024\063\001\002\000\010\013\044\014\041\026\043\001" +
    "\002\000\010\013\044\014\041\026\043\001\002\000\010" +
    "\016\045\017\046\022\uffea\001\002\000\010\016\045\017" +
    "\046\022\uffeb\001\002\000\004\023\070\001\002\000\006" +
    "\013\uffe2\014\uffe2\001\002\000\010\013\uffe1\014\uffe1\025" +
    "\106\001\002\000\006\013\076\014\074\001\002\000\004" +
    "\007\104\001\002\000\004\015\102\001\002\000\004\007" +
    "\101\001\002\000\004\015\077\001\002\000\010\013\044" +
    "\014\041\026\043\001\002\000\010\007\uffe4\016\045\017" +
    "\046\001\002\000\010\013\uffe8\014\uffe8\025\uffe8\001\002" +
    "\000\010\013\044\014\041\026\043\001\002\000\010\007" +
    "\uffe3\016\045\017\046\001\002\000\010\013\uffe7\014\uffe7" +
    "\025\uffe7\001\002\000\006\013\076\014\074\001\002\000" +
    "\014\002\uffec\007\uffec\013\uffec\014\uffec\020\uffec\001\002" +
    "\000\004\007\112\001\002\000\004\007\111\001\002\000" +
    "\010\013\uffe6\014\uffe6\025\uffe6\001\002\000\010\013\uffe5" +
    "\014\uffe5\025\uffe5\001\002\000\006\007\ufff3\012\117\001" +
    "\002\000\006\007\ufff4\012\115\001\002\000\004\013\037" +
    "\001\002\000\004\007\ufff5\001\002\000\004\014\033\001" +
    "\002\000\004\007\ufff6\001\002\000\010\013\037\014\033" +
    "\020\031\001\002\000\012\002\ufff7\013\ufff7\014\ufff7\020" +
    "\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\014\001\001" +
    "\000\004\005\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\020\001\001\000\004\005\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\024\007" +
    "\026\001\001\000\012\010\034\011\035\021\120\022\031" +
    "\001\001\000\006\010\112\011\113\001\001\000\002\001" +
    "\001\000\012\010\034\011\035\021\033\022\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\047\001\001\000\004\015\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\034\011\035\021\051" +
    "\022\031\001\001\000\002\001\001\000\012\010\034\011" +
    "\035\021\053\022\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\056\001\001\000\002\001\001\000" +
    "\006\015\061\016\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\065\001\001\000\004\015\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\070\017\071\001\001\000\004\020\104\001" +
    "\001\000\006\013\074\014\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\107\014\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\115\001\001\000\002\001\001\000\004\011\117\001" +
    "\001\000\002\001\001\000\012\010\034\011\035\021\121" +
    "\022\031\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    HEIGHT = 0;
    SPEED = 0;

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public Integer HEIGHT;
    public Integer SPEED;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP sim_sec 
            { parser.Tree.reduce(3,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok1_maybe tok2_maybe 
            { parser.Tree.reduce(2,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= tok1_maybe tok2_maybe TK3 S tok1_maybe tok2_maybe 
            { parser.Tree.reduce(6,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= tok1_maybe tok2_maybe TK3 S tok1_maybe tok2_maybe TK3 S tok1_maybe tok2_maybe 
            { parser.Tree.reduce(10,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1_maybe ::= tok1_maybe TK1 S 
            { parser.Tree.reduce(3,"tok1_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1_maybe ::= 
            { parser.Tree.reduce(0,"tok1_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok2_maybe ::= tok2_maybe TK2 S 
            { parser.Tree.reduce(3,"tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_maybe",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok2_maybe ::= 
            { parser.Tree.reduce(0,"tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_maybe",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sim_sec ::= init_instr S cmd S cmd S cmd S 
            { parser.Tree.reduce(8,"sim_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_sec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sim_sec ::= sim_sec cmd cmd 
            { parser.Tree.reduce(3,"sim_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_sec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // init_instr ::= INIT_WD heigth_ass_cmd CM speed_ass_cmd 
            { parser.Tree.reduce(4,"init_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // init_instr ::= INIT_WD speed_ass_cmd CM heigth_ass_cmd 
            { parser.Tree.reduce(4,"init_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // init_instr ::= INIT_WD speed_ass_cmd 
            { parser.Tree.reduce(2,"init_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // init_instr ::= INIT_WD heigth_ass_cmd 
            { parser.Tree.reduce(2,"init_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // init_instr ::= INIT_WD 
            { parser.Tree.reduce(1,"init_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cmd ::= heigth_ass_cmd 
            { parser.Tree.reduce(1,"cmd",0);
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cmd ::= speed_ass_cmd 
            { parser.Tree.reduce(1,"cmd",0);
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cmd ::= cond 
            { parser.Tree.reduce(1,"cmd",0);
              Integer RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer comp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = comp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // heigth_ass_cmd ::= HEIGHT_WD EQ expr 
            { parser.Tree.reduce(3,"heigth_ass_cmd",0);
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.HEIGHT=res;
                    System.out.println("HEIGHT "+parser.HEIGHT);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heigth_ass_cmd",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // speed_ass_cmd ::= SPEED_WD EQ expr 
            { parser.Tree.reduce(3,"speed_ass_cmd",0);
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.SPEED=res;
                    System.out.println("SPEED "+parser.SPEED);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_ass_cmd",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cond ::= COND_WD SO comparison SC UPDATE_WD ass_l DONE 
            { parser.Tree.reduce(7,"cond",0);
              Integer RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer comp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comparison ::= expr MAJ expr 
            { parser.Tree.reduce(3,"comparison",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   if(x>y){
                    RESULT=1;
                   }
                   else RESULT=0;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comparison ::= expr EQ expr 
            { parser.Tree.reduce(3,"comparison",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   if(x==y){
                    RESULT=1;
                   }
                   else RESULT=0;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comparison ::= 
            { parser.Tree.reduce(0,"comparison",0);
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ass_l ::= NT0 height_ass_cmd_C S 
            { parser.Tree.reduce(3,"ass_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ass_l ::= NT0 speed_ass_cmd_C S 
            { parser.Tree.reduce(3,"ass_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ass_l ::= ass_l NT1 height_ass_cmd_C S 
            { parser.Tree.reduce(4,"ass_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ass_l ::= ass_l NT1 speed_ass_cmd_C S 
            { parser.Tree.reduce(4,"ass_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // height_ass_cmd_C ::= HEIGHT_WD EQ expr 
            { parser.Tree.reduce(3,"height_ass_cmd_C",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((Integer)parser.stack(-3) == 1) { parser.HEIGHT = e; System.out.println("HEIGHT: " + parser.HEIGHT); } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("height_ass_cmd_C",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // speed_ass_cmd_C ::= SPEED_WD EQ expr 
            { parser.Tree.reduce(3,"speed_ass_cmd_C",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((Integer)parser.stack(-3) == 1) { parser.SPEED = e; System.out.println("SPEED: " + parser.SPEED); } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_ass_cmd_C",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Integer RESULT =null;
		 RESULT = (Integer)parser.stack(-2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Integer RESULT =null;
		 RESULT = (Integer)parser.stack(-3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr SUM expr 
            { parser.Tree.reduce(3,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x+y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr MUL expr 
            { parser.Tree.reduce(3,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x*y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= UINT 
            { parser.Tree.reduce(1,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= HEIGHT_WD 
            { parser.Tree.reduce(1,"expr",0);
              Integer RESULT =null;
		 RESULT = parser.HEIGHT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= SPEED_WD 
            { parser.Tree.reduce(1,"expr",0);
              Integer RESULT =null;
		 RESULT = parser.SPEED; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
