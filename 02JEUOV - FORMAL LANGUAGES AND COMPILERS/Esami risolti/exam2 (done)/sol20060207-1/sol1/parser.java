
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\011\000\002\005\003\000\002\005\004" +
    "\000\002\006\007\000\002\007\004\000\002\007\006\000" +
    "\002\010\010\000\002\010\010\000\002\011\002\000\002" +
    "\011\004\000\002\012\006\000\002\013\003\000\002\002" +
    "\003\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\003\004\004\007\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\057\001\002\000\004\002\000" +
    "\001\002\000\004\013\010\001\002\000\004\020\012\001" +
    "\002\000\006\006\ufffd\020\ufffd\001\002\000\004\005\046" +
    "\001\002\000\006\006\015\020\012\001\002\000\006\006" +
    "\ufffc\020\ufffc\001\002\000\004\013\016\001\002\000\006" +
    "\007\021\010\020\001\002\000\006\002\ufff6\017\ufff6\001" +
    "\002\000\004\013\027\001\002\000\004\013\022\001\002" +
    "\000\004\014\023\001\002\000\004\010\024\001\002\000" +
    "\004\013\025\001\002\000\004\015\026\001\002\000\006" +
    "\002\ufff8\017\ufff8\001\002\000\004\015\030\001\002\000" +
    "\004\007\031\001\002\000\004\013\032\001\002\000\004" +
    "\014\033\001\002\000\006\002\ufff7\017\ufff7\001\002\000" +
    "\006\002\ufffe\017\037\001\002\000\006\002\ufff5\017\ufff5" +
    "\001\002\000\004\013\040\001\002\000\004\013\ufff3\001" +
    "\002\000\004\016\041\001\002\000\006\011\ufff2\012\ufff2" +
    "\001\002\000\006\011\044\012\043\001\002\000\004\016" +
    "\045\001\002\000\006\002\ufff4\017\ufff4\001\002\000\006" +
    "\011\ufff1\012\ufff1\001\002\000\004\013\047\001\002\000" +
    "\004\016\050\001\002\000\004\020\056\001\002\000\006" +
    "\011\053\012\052\001\002\000\004\016\054\001\002\000" +
    "\006\006\ufffb\020\ufffb\001\002\000\004\020\055\001\002" +
    "\000\006\011\ufff9\012\ufff9\001\002\000\006\011\ufffa\012" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\003\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\012\006\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\016\001\001\000\004\011" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\034\013\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbol_table = new Hashtable<String,Integer>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

	
    Integer totale=0;
    public Hashtable<String,Integer> symbol_table;


    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left)+1;
                    int column = (((Symbol)info).right)+1;
                    m.append(" (line "+line+", column "+column+")");
                }
            }
            System.err.println(m);
        }
    }


    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= prog_ok 
            { parser.Tree.reduce(1,"prog",1);
              Object RESULT =null;
		 System.out.print("Syntax Correct\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= error 
            { parser.Tree.reduce(1,"prog",1);
              Object RESULT =null;
		 parser.report_error("",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog_ok ::= START C mp3_list SERVER C data_time user_list 
            { parser.Tree.reduce(7,"prog_ok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_ok",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mp3_list ::= mp3 
            { parser.Tree.reduce(1,"mp3_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mp3_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mp3_list ::= mp3_list mp3 
            { parser.Tree.reduce(2,"mp3_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mp3_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mp3 ::= NUMBER KBS C song_list S 
            { parser.Tree.reduce(5,"mp3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mp3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // song_list ::= SONG NUMBER 
            { parser.Tree.reduce(2,"song_list",0);
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
 Integer rate = (Integer) parser.stack(-4);
   parser.symbol_table.put(title, length*rate); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("song_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // song_list ::= song_list CM SONG NUMBER 
            { parser.Tree.reduce(4,"song_list",0);
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    Integer rate = (Integer) parser.stack(-6);
   parser.symbol_table.put(title, length*rate); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("song_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_time ::= TIME C HOUR DATA C DATE 
            { parser.Tree.reduce(6,"data_time",0);
              Object RESULT =null;
		 System.out.println("OUTPUT:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_time",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_time ::= DATA C DATE TIME C HOUR 
            { parser.Tree.reduce(6,"data_time",0);
              Object RESULT =null;
		 System.out.println("OUTPUT:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_time",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // user_list ::= 
            { parser.Tree.reduce(0,"user_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // user_list ::= user_list user 
            { parser.Tree.reduce(2,"user_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // user ::= ip C songs_list S 
            { parser.Tree.reduce(4,"user",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
   System.out.println("TOTAL: " + x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ip ::= IP 
            { parser.Tree.reduce(1,"ip",0);
              Object RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ip = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(ip); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ip",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // songs_list ::= SONG 
            { parser.Tree.reduce(1,"songs_list",0);
              Integer RESULT =null;
		int song_titleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int song_titleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String song_title = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
   Integer length= (Integer)parser.symbol_table.get(song_title);
   System.out.println(song_title + " " + length);
   RESULT = length;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("songs_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // songs_list ::= songs_list CM SONG 
            { parser.Tree.reduce(3,"songs_list",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int song_titleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int song_titleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String song_title = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
   Integer length= (Integer)parser.symbol_table.get(song_title);
   System.out.println(song_title + " " + length);
   RESULT = length + x;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("songs_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
