
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\006\014" +
    "\000\002\005\006\000\002\004\003\000\002\007\002\000" +
    "\002\007\005\000\002\007\005\000\002\010\003\000\002" +
    "\010\004\000\002\011\005\000\002\016\006\000\002\016" +
    "\010\000\002\012\006\000\002\012\005\000\002\013\003" +
    "\000\002\013\003\000\002\014\005\000\002\017\005\000" +
    "\002\017\007\000\002\015\010\000\002\015\007\000\002" +
    "\020\005\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\004\ufff9\006\005\007\004\010\ufff9\001" +
    "\002\000\004\005\117\001\002\000\004\005\115\001\002" +
    "\000\006\004\ufffa\010\ufffa\001\002\000\004\004\ufffd\001" +
    "\002\000\004\002\114\001\002\000\006\004\ufffe\010\103" +
    "\001\002\000\006\004\uffff\010\100\001\002\000\004\004" +
    "\014\001\002\000\004\013\017\001\002\000\006\004\033" +
    "\013\017\001\002\000\006\004\ufff6\013\ufff6\001\002\000" +
    "\004\014\020\001\002\000\004\013\030\001\002\000\006" +
    "\005\023\011\022\001\002\000\004\014\024\001\002\000" +
    "\006\004\ufff4\013\ufff4\001\002\000\004\013\025\001\002" +
    "\000\004\023\026\001\002\000\004\015\027\001\002\000" +
    "\006\005\ufff2\011\ufff2\001\002\000\004\023\031\001\002" +
    "\000\004\015\032\001\002\000\006\005\ufff3\011\ufff3\001" +
    "\002\000\006\016\037\020\035\001\002\000\006\004\ufff5" +
    "\013\ufff5\001\002\000\004\022\061\001\002\000\010\002" +
    "\uffef\016\uffef\020\uffef\001\002\000\004\013\051\001\002" +
    "\000\010\002\000\016\037\020\035\001\002\000\010\002" +
    "\uffee\016\uffee\020\uffee\001\002\000\006\016\037\020\035" +
    "\001\002\000\006\016\037\020\035\001\002\000\006\016" +
    "\037\020\035\001\002\000\010\002\ufff1\016\ufff1\020\ufff1" +
    "\001\002\000\006\016\037\020\035\001\002\000\010\002" +
    "\ufff0\016\ufff0\020\ufff0\001\002\000\006\005\055\011\054" +
    "\001\002\000\004\022\052\001\002\000\004\017\053\001" +
    "\002\000\006\005\uffec\011\uffec\001\002\000\004\013\056" +
    "\001\002\000\010\002\uffed\016\uffed\020\uffed\001\002\000" +
    "\004\022\057\001\002\000\004\017\060\001\002\000\006" +
    "\005\uffeb\011\uffeb\001\002\000\006\012\063\021\062\001" +
    "\002\000\004\012\075\001\002\000\004\013\065\001\002" +
    "\000\006\005\071\011\070\001\002\000\004\013\066\001" +
    "\002\000\004\023\067\001\002\000\006\005\uffe8\011\uffe8" +
    "\001\002\000\004\013\072\001\002\000\010\002\uffe9\016" +
    "\uffe9\020\uffe9\001\002\000\004\013\073\001\002\000\004" +
    "\023\074\001\002\000\006\005\uffe7\011\uffe7\001\002\000" +
    "\004\013\065\001\002\000\006\005\077\011\070\001\002" +
    "\000\010\002\uffea\016\uffea\020\uffea\001\002\000\004\005" +
    "\101\001\002\000\012\004\ufff9\006\005\007\004\010\ufff9" +
    "\001\002\000\006\004\ufffb\010\ufffb\001\002\000\004\005" +
    "\104\001\002\000\010\006\005\007\004\010\ufff9\001\002" +
    "\000\004\010\106\001\002\000\004\005\107\001\002\000" +
    "\010\006\005\007\004\010\ufff9\001\002\000\004\010\111" +
    "\001\002\000\004\005\112\001\002\000\010\004\ufff9\006" +
    "\005\007\004\001\002\000\004\004\ufffc\001\002\000\004" +
    "\002\001\001\002\000\012\004\ufff9\006\005\007\004\010" +
    "\ufff9\001\002\000\006\004\ufff8\010\ufff8\001\002\000\012" +
    "\004\ufff9\006\005\007\004\010\ufff9\001\002\000\006\004" +
    "\ufff7\010\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\016\002\007\003\012\004\011\005\010\006" +
    "\006\007\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\014\011\015\001\001\000\004\011\033\001\001\000" +
    "\002\001\001\000\004\016\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\037\013\041\014\035\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\047\001\001\000\010\013\045\014\035\015\040" +
    "\001\001\000\002\001\001\000\010\013\042\014\035\015" +
    "\040\001\001\000\010\013\043\014\035\015\040\001\001" +
    "\000\010\013\044\014\035\015\040\001\001\000\002\001" +
    "\001\000\010\013\046\014\035\015\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\115\001\001\000" +
    "\002\001\001\000\004\007\117\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, HashMap<String, Double>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP dist_sec SEP route_sec 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header2 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= header3 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header3 ::= header2 TK3 S nt1 TK3 S nt1 TK3 S nt1 
            { parser.Tree.reduce(10,"header3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header2 ::= header1 TK3 S nt1 
            { parser.Tree.reduce(4,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header1 ::= nt1 
            { parser.Tree.reduce(1,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nt1 ::= TK1 S nt1 
            { parser.Tree.reduce(3,"nt1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nt1 ::= TK2 S nt1 
            { parser.Tree.reduce(3,"nt1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dist_sec ::= dist 
            { parser.Tree.reduce(1,"dist_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dist_sec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dist_sec ::= dist_sec dist 
            { parser.Tree.reduce(2,"dist_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dist_sec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dist ::= QSTRING pos_l S 
            { parser.Tree.reduce(3,"dist",0);
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              parser.table.put(s,tab);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pos_l ::= TO_WD QSTRING REAL KM_WD 
            { parser.Tree.reduce(4,"pos_l",0);
              HashMap RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              HashMap<String,Double> tab = new HashMap<String,Double>();
              tab.put(s,r);
              RESULT = tab;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos_l",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pos_l ::= pos_l CM TO_WD QSTRING REAL KM_WD 
            { parser.Tree.reduce(6,"pos_l",0);
              HashMap RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              tab.put(s,r);
              RESULT = tab;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pos_l",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // route_sec ::= command command command command 
            { parser.Tree.reduce(4,"route_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("route_sec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // route_sec ::= route_sec command command 
            { parser.Tree.reduce(3,"route_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("route_sec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= elevation_cmd 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= route_cmd 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elevation_cmd ::= ELEVATION places_l S 
            { parser.Tree.reduce(3,"elevation_cmd",0);
              Object RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] dist = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      System.out.println("ELEVATION "+dist[0]+" m");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elevation_cmd",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // places_l ::= QSTRING UINT METERS 
            { parser.Tree.reduce(3,"places_l",0);
              Integer[] RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer u = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* 0 = current sum - 1 = last one preceding */
                Integer[] dist = new Integer[2];
                dist[0] = u;
                dist[1] = u;
                RESULT = dist;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("places_l",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // places_l ::= places_l CM QSTRING UINT METERS 
            { parser.Tree.reduce(5,"places_l",0);
              Integer[] RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer[] dist = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer next = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                dist[0] = dist[0] + (next-dist[1]);
                dist[1] = next;
                RESULT = dist;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("places_l",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // route_cmd ::= ROUTE UINT KCAL COL pairs_l S 
            { parser.Tree.reduce(6,"route_cmd",0);
              Object RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double tot = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("Tot: "+tot+" kcal");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("route_cmd",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // route_cmd ::= ROUTE UINT COL pairs_l S 
            { parser.Tree.reduce(5,"route_cmd",0);
              Object RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double tot = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("Tot: "+tot+" kcal");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("route_cmd",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pairs_l ::= QSTRING QSTRING REAL 
            { parser.Tree.reduce(3,"pairs_l",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double mod = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                HashMap<String,Double> tab = (HashMap)parser.table.get(a);
                Double distance = (Double) tab.get(b);
                // System.out.println("parser.stack(0) - "+parser.stack(0));
                if(!parser.stack(-4).equals(null) && !parser.stack(-4).equals("kcal/km")){ // SECOND RULE
                    Integer current_cal = (Integer)parser.stack(-4);
                    Double res = distance*((double)current_cal*mod);
                    System.out.println(a+" "+b+" "+res+" kcal"); 
                    RESULT = res;
                }
                else{ // FIRST RULE
                    Integer current_cal = (Integer)parser.stack(-5);
                    Double res = distance*((double)current_cal*mod);
                    System.out.println(a+" "+b+" "+res+" kcal"); 
                    RESULT = res;
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pairs_l",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pairs_l ::= pairs_l CM QSTRING QSTRING REAL 
            { parser.Tree.reduce(5,"pairs_l",0);
              Double RESULT =null;
		int res2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int res2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double res2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double mod = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                HashMap<String,Double> tab = (HashMap)parser.table.get(a);
                Double distance = (Double) tab.get(b);
                 if(!parser.stack(-6).equals(null) && !parser.stack(-6).equals("kcal/km")){ // SECOND RULE
                    Integer current_cal = (Integer)parser.stack(-6);
                    Double res = distance*((double)current_cal*mod);
                    System.out.println(a+" "+b+" "+res+" kcal"); 
                    RESULT = res + res2;
                }
                else{ // FIRST RULE
                    Integer current_cal = (Integer)parser.stack(-7);
                    Double res = distance*((double)current_cal*mod);
                    System.out.println(a+" "+b+" "+res+" kcal"); 
                    RESULT = res + res2;
                }

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pairs_l",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
