// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\2\6\3\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\0\1\32"+
    "\3\0\1\33\3\0\1\34\3\0\1\35\2\0\1\36"+
    "\1\0\1\37\1\40\2\0\1\41\1\0\1\42\1\43"+
    "\1\44\1\0\1\45\1\46\1\47\4\0\1\50\1\0"+
    "\1\51\1\0\1\52\7\0\1\53\1\54\1\55\12\0"+
    "\3\56\12\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\1\1\2\4\1\5"+
    "\1\6\10\1\1\7\1\0\1\10\4\0\1\11\3\0"+
    "\1\12\4\0\1\13\11\0\1\14\11\0\1\15\23\0"+
    "\1\16\10\0\1\17\36\0\1\20\4\0\1\21\7\0"+
    "\1\22\24\0\1\20\76\0\1\22\40\0\1\21\35\0"+
    "\1\21\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\353\0\57"+
    "\0\u011a\0\u0149\0\u0178\0\57\0\57\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\57\0\215\0\57"+
    "\0\u031f\0\u011a\0\u0149\0\u034e\0\u011a\0\u037d\0\u03ac\0\u03db"+
    "\0\57\0\u040a\0\u0439\0\u0468\0\u0497\0\57\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\57"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6"+
    "\0\u07e5\0\57\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\57\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\57\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\57"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a"+
    "\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2"+
    "\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a"+
    "\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2"+
    "\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u22e2\0\u242b"+
    "\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3"+
    "\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b"+
    "\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893"+
    "\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b"+
    "\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83"+
    "\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb"+
    "\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73"+
    "\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\57\0\u2f8d\0\u2fbc"+
    "\0\u2feb\0\u301a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\2\1\6\2\2"+
    "\1\7\1\10\1\7\1\11\1\2\1\12\10\13\1\14"+
    "\1\15\1\16\1\2\1\17\4\2\1\20\1\21\2\2"+
    "\1\22\1\23\1\24\3\2\1\25\1\2\1\26\1\2"+
    "\61\0\1\3\54\0\5\27\1\30\51\27\12\0\1\31"+
    "\61\0\1\32\1\0\1\33\10\34\46\0\11\35\44\0"+
    "\1\35\56\0\1\35\1\0\11\13\61\0\1\36\62\0"+
    "\1\37\60\0\1\40\56\0\1\41\66\0\1\42\56\0"+
    "\1\43\56\0\1\44\60\0\1\45\2\0\1\46\15\0"+
    "\1\47\57\0\1\35\1\0\11\34\61\0\1\50\60\0"+
    "\1\51\65\0\1\52\33\0\1\53\114\0\1\54\21\0"+
    "\1\55\106\0\1\56\5\0\14\47\1\57\42\47\32\0"+
    "\1\60\70\0\1\61\54\0\1\62\33\0\1\63\1\64"+
    "\114\0\1\65\17\0\1\66\113\0\1\67\2\0\12\47"+
    "\1\70\1\47\1\57\42\47\33\0\1\71\57\0\1\72"+
    "\41\0\1\64\1\73\55\0\2\74\114\0\1\75\21\0"+
    "\1\76\53\0\1\77\40\0\10\47\1\3\3\47\1\57"+
    "\42\47\42\0\1\100\25\0\2\101\4\0\1\74\1\102"+
    "\47\0\2\101\4\0\2\103\114\0\1\104\21\0\1\105"+
    "\1\106\107\0\1\107\40\0\1\110\41\0\1\111\47\0"+
    "\2\101\4\0\1\103\1\112\47\0\2\101\4\0\2\112"+
    "\114\0\1\113\16\0\1\114\56\0\1\115\115\0\1\116"+
    "\41\0\1\117\35\0\1\120\1\121\47\0\2\101\4\0"+
    "\2\122\114\0\1\123\17\0\1\124\1\125\55\0\1\126"+
    "\76\0\1\127\36\0\1\121\1\130\55\0\2\131\47\0"+
    "\2\101\52\0\1\132\47\0\1\113\27\0\1\133\46\0"+
    "\1\134\1\135\1\134\55\0\1\134\1\136\1\137\45\0"+
    "\2\140\4\0\1\131\1\141\47\0\2\140\4\0\2\142"+
    "\114\0\1\143\16\0\1\144\56\0\1\145\56\0\1\146"+
    "\56\0\1\147\56\0\1\150\60\0\1\151\47\0\2\140"+
    "\4\0\1\142\1\152\47\0\2\140\4\0\2\152\114\0"+
    "\1\153\20\0\2\154\1\155\53\0\1\156\2\154\1\157"+
    "\53\0\1\156\2\154\1\155\53\0\1\156\1\154\1\160"+
    "\54\0\1\156\1\161\55\0\1\162\1\163\47\0\2\140"+
    "\4\0\2\164\114\0\1\165\17\0\11\166\46\0\1\166"+
    "\57\0\10\166\46\0\2\166\55\0\10\166\47\0\5\166"+
    "\52\0\1\163\1\167\55\0\2\170\47\0\2\140\122\0"+
    "\1\171\30\0\1\172\37\0\2\173\4\0\1\170\1\174"+
    "\47\0\2\173\4\0\2\175\114\0\1\176\17\0\1\177"+
    "\1\200\56\0\1\201\47\0\2\173\4\0\1\175\1\202"+
    "\47\0\2\173\4\0\2\202\114\0\1\203\27\0\1\204"+
    "\46\0\6\205\1\206\50\0\1\207\1\210\47\0\2\173"+
    "\4\0\2\211\44\0\1\212\47\0\1\176\30\0\1\213"+
    "\56\0\1\214\56\0\1\215\45\0\1\210\1\216\55\0"+
    "\2\217\47\0\2\173\122\0\1\220\20\0\1\221\3\222"+
    "\52\0\5\222\52\0\1\222\1\223\47\0\2\224\4\0"+
    "\1\217\1\225\47\0\2\224\4\0\2\226\114\0\1\227"+
    "\20\0\10\230\46\0\11\230\46\0\4\230\54\0\1\231"+
    "\47\0\2\224\4\0\1\226\1\232\47\0\2\224\4\0"+
    "\2\232\114\0\1\233\17\0\1\234\1\235\47\0\2\224"+
    "\4\0\2\236\114\0\1\237\17\0\1\235\1\240\55\0"+
    "\2\241\47\0\2\224\122\0\1\242\11\0\2\243\4\0"+
    "\1\241\1\244\47\0\2\243\4\0\2\245\114\0\1\246"+
    "\20\0\1\247\47\0\2\243\4\0\1\245\1\250\47\0"+
    "\2\243\4\0\2\250\44\0\1\251\47\0\1\242\17\0"+
    "\1\252\1\253\47\0\2\243\4\0\2\254\114\0\1\255"+
    "\17\0\1\253\1\256\55\0\2\257\47\0\2\243\122\0"+
    "\1\260\11\0\2\261\4\0\1\257\1\262\47\0\2\261"+
    "\4\0\2\263\114\0\1\264\20\0\1\265\47\0\2\261"+
    "\4\0\1\263\1\266\47\0\2\261\4\0\2\266\114\0"+
    "\1\267\17\0\1\270\1\271\47\0\2\261\4\0\2\272"+
    "\114\0\1\273\17\0\1\271\1\274\55\0\2\275\47\0"+
    "\2\261\122\0\1\276\11\0\2\277\4\0\1\275\1\300"+
    "\47\0\2\277\4\0\2\301\44\0\1\302\47\0\1\273"+
    "\20\0\1\303\47\0\2\277\4\0\1\301\1\304\47\0"+
    "\2\277\4\0\2\304\114\0\1\305\17\0\1\306\1\307"+
    "\47\0\2\277\4\0\2\310\114\0\1\311\17\0\1\307"+
    "\1\312\55\0\2\313\47\0\2\277\122\0\1\314\11\0"+
    "\2\315\4\0\1\313\1\316\47\0\2\315\4\0\2\317"+
    "\114\0\1\320\20\0\1\321\47\0\2\315\4\0\1\317"+
    "\1\322\47\0\2\315\4\0\2\322\114\0\1\323\17\0"+
    "\1\324\1\325\47\0\2\315\4\0\2\326\114\0\1\327"+
    "\17\0\1\325\1\330\55\0\2\331\47\0\2\315\55\0"+
    "\2\332\4\0\1\331\1\333\47\0\2\332\4\0\2\334"+
    "\56\0\1\335\47\0\2\332\4\0\1\334\1\336\47\0"+
    "\2\332\4\0\2\336\55\0\1\337\1\340\47\0\2\332"+
    "\4\0\2\341\55\0\1\340\1\342\55\0\2\343\47\0"+
    "\2\332\55\0\2\344\4\0\1\343\1\345\47\0\2\344"+
    "\4\0\2\346\56\0\1\347\47\0\2\344\4\0\1\346"+
    "\1\350\47\0\2\344\4\0\2\350\55\0\1\351\1\352"+
    "\47\0\2\344\4\0\2\353\55\0\1\352\1\354\55\0"+
    "\2\355\47\0\2\344\55\0\2\356\4\0\1\355\1\357"+
    "\47\0\2\356\4\0\2\360\56\0\1\361\47\0\2\356"+
    "\4\0\1\360\1\362\47\0\2\356\4\0\2\362\55\0"+
    "\1\363\1\364\47\0\2\356\4\0\2\365\55\0\1\364"+
    "\1\366\55\0\2\367\47\0\2\356\55\0\2\370\4\0"+
    "\1\367\1\371\47\0\2\370\4\0\2\372\56\0\1\373"+
    "\47\0\2\370\4\0\1\372\1\374\47\0\2\370\4\0"+
    "\2\374\55\0\1\375\1\376\47\0\2\370\4\0\2\377"+
    "\55\0\1\376\1\u0100\55\0\2\u0101\47\0\2\370\55\0"+
    "\2\u0102\4\0\1\u0101\1\u0103\47\0\2\u0102\4\0\2\u0104"+
    "\56\0\1\u0105\47\0\2\u0102\4\0\1\u0104\1\u0106\47\0"+
    "\2\u0102\4\0\2\u0106\55\0\1\u0107\1\u0108\47\0\2\u0102"+
    "\4\0\2\u0109\55\0\1\u0108\1\u010a\55\0\2\u010b\47\0"+
    "\2\u0102\55\0\2\u010c\4\0\1\u010b\1\u010d\47\0\2\u010c"+
    "\4\0\2\u010e\56\0\1\u010f\47\0\2\u010c\4\0\1\u010e"+
    "\1\u0110\47\0\2\u010c\4\0\2\u0110\55\0\1\u0111\1\u0112"+
    "\47\0\2\u010c\4\0\2\u0113\55\0\1\u0112\1\u0114\55\0"+
    "\2\u0115\47\0\2\u010c\55\0\2\u0116\4\0\1\u0115\1\u0117"+
    "\47\0\2\u0116\4\0\2\u0118\47\0\2\u0116\4\0\1\u0118"+
    "\1\u0119\47\0\2\u0116\4\0\2\u0119\47\0\2\u0116\4\0"+
    "\2\u011a\47\0\2\u0116\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12361];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\3\1\2\11\10\1\1\11"+
    "\1\0\1\11\4\0\1\1\3\0\1\11\4\0\1\11"+
    "\11\0\1\11\11\0\1\11\23\0\1\11\10\0\1\11"+
    "\36\0\1\1\4\0\1\1\7\0\1\1\24\0\1\11"+
    "\76\0\1\1\40\0\1\1\35\0\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
	    return new Symbol(type, yyline, yycolumn);
	}
	private Symbol sym(int type, Object value){
	    return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner error: " + yytext());
            }
            // fall through
          case 19: break;
          case 2:
            { ;
            }
            // fall through
          case 20: break;
          case 3:
            { return sym(sym.CM);
            }
            // fall through
          case 21: break;
          case 4:
            { return sym(sym.UINT,new Integer(yytext()));
            }
            // fall through
          case 22: break;
          case 5:
            { return sym(sym.COL);
            }
            // fall through
          case 23: break;
          case 6:
            { return sym(sym.S);
            }
            // fall through
          case 24: break;
          case 7:
            { return sym(sym.METERS,new String(yytext()));
            }
            // fall through
          case 25: break;
          case 8:
            { return sym(sym.QSTRING,new String(yytext()));
            }
            // fall through
          case 26: break;
          case 9:
            { return sym(sym.REAL, new Double(yytext()));
            }
            // fall through
          case 27: break;
          case 10:
            { return sym(sym.TO_WD,new String(yytext()));
            }
            // fall through
          case 28: break;
          case 11:
            { return sym(sym.KM_WD,new String(yytext()));
            }
            // fall through
          case 29: break;
          case 12:
            { return sym(sym.SEP);
            }
            // fall through
          case 30: break;
          case 13:
            { return sym(sym.ROUTE,new String(yytext()));
            }
            // fall through
          case 31: break;
          case 14:
            { return sym(sym.KCAL,new String(yytext()));
            }
            // fall through
          case 32: break;
          case 15:
            { return sym(sym.ELEVATION,new String(yytext()));
            }
            // fall through
          case 33: break;
          case 16:
            { return sym(sym.TK3);
            }
            // fall through
          case 34: break;
          case 17:
            { return sym(sym.TK1);
            }
            // fall through
          case 35: break;
          case 18:
            { return sym(sym.TK2);
            }
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
