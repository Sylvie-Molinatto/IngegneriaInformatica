
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\005\007\000\002\011\005" +
    "\000\002\011\003\000\002\010\005\000\002\004\004\000" +
    "\002\004\002\000\002\006\010\000\002\014\006\000\002" +
    "\015\002\000\002\014\003\000\002\012\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\007\004\000\002\007\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\010\005\001\002\000\004\002\054\001" +
    "\002\000\006\020\014\021\013\001\002\000\006\004\ufffe" +
    "\010\ufffe\001\002\000\006\004\010\010\005\001\002\000" +
    "\010\002\ufff8\020\ufff8\021\ufff8\001\002\000\006\004\uffff" +
    "\010\uffff\001\002\000\010\002\000\020\014\021\013\001" +
    "\002\000\014\004\uffea\005\uffea\007\uffea\010\uffea\012\uffea" +
    "\001\002\000\014\004\uffe9\005\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\001\002\000\010\002\ufff9\020\ufff9\021\ufff9\001\002" +
    "\000\004\007\017\001\002\000\012\013\023\014\024\015" +
    "\021\016\025\001\002\000\006\005\ufff4\012\ufff4\001\002" +
    "\000\006\020\ufff0\021\ufff0\001\002\000\006\020\014\021" +
    "\013\001\002\000\006\020\ufff2\021\ufff2\001\002\000\006" +
    "\020\ufff1\021\ufff1\001\002\000\006\020\uffef\021\uffef\001" +
    "\002\000\006\005\ufff5\012\027\001\002\000\006\020\033" +
    "\022\035\001\002\000\004\005\031\001\002\000\012\013" +
    "\023\014\024\015\021\016\025\001\002\000\006\005\ufff6" +
    "\012\ufff6\001\002\000\010\006\uffec\020\uffec\022\uffec\001" +
    "\002\000\010\006\037\020\033\022\035\001\002\000\010" +
    "\006\uffeb\020\uffeb\022\uffeb\001\002\000\010\006\uffed\020" +
    "\uffed\022\uffed\001\002\000\010\002\ufff7\020\ufff7\021\ufff7" +
    "\001\002\000\010\006\uffee\020\uffee\022\uffee\001\002\000" +
    "\006\005\ufff3\012\ufff3\001\002\000\006\005\047\011\050" +
    "\001\002\000\006\005\ufffb\011\ufffb\001\002\000\004\007" +
    "\045\001\002\000\004\022\046\001\002\000\006\005\ufffa" +
    "\011\ufffa\001\002\000\006\020\014\021\013\001\002\000" +
    "\004\017\051\001\002\000\006\020\014\021\013\001\002" +
    "\000\006\004\ufffd\010\ufffd\001\002\000\006\005\ufffc\011" +
    "\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\010\002\003\003\006\005\005\001\001\000" +
    "\002\001\001\000\010\010\042\011\041\017\043\001\001" +
    "\000\002\001\001\000\004\005\010\001\001\000\004\004" +
    "\011\001\001\000\002\001\001\000\006\006\014\017\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\017\013\021\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\027\001\001\000\006\007\033\016" +
    "\035\001\001\000\002\001\001\000\006\012\031\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\052\017\043\001\001\000" +
    "\002\001\001\000\004\017\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Integer>>();
    System.out.println("Achieved scores.\n");

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, HashMap<String, Integer>> table;

    /*
    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    */

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    class Attrib {
        private String name;
        private Integer weight;
        
        Attrib(String name, Integer weight){
            this.name = name;
            this.weight = weight;
        }
	
        String getName(){
            return this.name;
        }
        Integer getWeight(){
            return this.weight;
        }

    };

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= type_definitions DOT prod_descriptions 
            { parser.Tree.reduce(3,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type_definitions ::= type_definitions type_def 
            { parser.Tree.reduce(2,"type_definitions",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definitions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_definitions ::= type_def 
            { parser.Tree.reduce(1,"type_definitions",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definitions",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_def ::= RO attributes_l RC ARROW ident 
            { parser.Tree.reduce(5,"type_def",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Integer> x = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int type_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int type_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       parser.table.put(type_name,x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // attributes_l ::= attributes_l CM attribute 
            { parser.Tree.reduce(3,"attributes_l",0);
              HashMap<String,Integer> RESULT =null;
		int att_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int att_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Integer> att_l = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Attrib att = (Attrib)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    att_l.put(att.getName(), att.getWeight());
                    RESULT = att_l;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // attributes_l ::= attribute 
            { parser.Tree.reduce(1,"attributes_l",0);
              HashMap<String,Integer> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Attrib att = (Attrib)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    HashMap<String,Integer> tab = new HashMap<String,Integer>();
                    tab.put(att.getName(), (Integer) att.getWeight());
                    RESULT = tab;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // attribute ::= ident COL UINT 
            { parser.Tree.reduce(3,"attribute",0);
              Attrib RESULT =null;
		int att_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int att_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String att_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int att_valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int att_valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer att_value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT = new Attrib(att_name, att_value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prod_descriptions ::= prod_descriptions prod_descr 
            { parser.Tree.reduce(2,"prod_descriptions",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_descriptions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prod_descriptions ::= 
            { parser.Tree.reduce(0,"prod_descriptions",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_descriptions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prod_descr ::= ident COL scores EQ sentence S 
            { parser.Tree.reduce(6,"prod_descr",0);
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer score = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
     System.out.println(", "+score);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_descr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scores ::= scores NT0 CM valutation 
            { parser.Tree.reduce(4,"scores",0);
              Integer RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer val1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Integer(val1.intValue() + val2.intValue());
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scores",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              String RESULT =null;
		 RESULT = (String)parser.stack(-2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // scores ::= valutation 
            { parser.Tree.reduce(1,"scores",0);
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scores",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valutation ::= operator ident 
            { parser.Tree.reduce(2,"valutation",0);
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int att_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int att_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String att_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String type = (String)parser.stack(-3);
      HashMap<String,Integer> tab = parser.table.get(type);
      Integer weight = (Integer)tab.get(att_name);
      RESULT = new Integer(op.intValue() * weight.intValue());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valutation",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operator ::= PLUS 
            { parser.Tree.reduce(1,"operator",0);
              Integer RESULT =null;
		 RESULT = new Integer(2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operator ::= MINUS 
            { parser.Tree.reduce(1,"operator",0);
              Integer RESULT =null;
		 RESULT = new Integer(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operator ::= STAR 
            { parser.Tree.reduce(1,"operator",0);
              Integer RESULT =null;
		 RESULT = new Integer(3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operator ::= DIV 
            { parser.Tree.reduce(1,"operator",0);
              Integer RESULT =null;
		 RESULT = new Integer(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentence ::= sentence sentence_elem 
            { parser.Tree.reduce(2,"sentence",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.print(" "+name);  
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentence ::= sentence_elem 
            { parser.Tree.reduce(1,"sentence",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.print(name);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentence_elem ::= WORD 
            { parser.Tree.reduce(1,"sentence_elem",0);
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = name;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence_elem",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentence_elem ::= UINT 
            { parser.Tree.reduce(1,"sentence_elem",0);
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = num.toString();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence_elem",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ident ::= ID 
            { parser.Tree.reduce(1,"ident",0);
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ident ::= WORD 
            { parser.Tree.reduce(1,"ident",0);
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
