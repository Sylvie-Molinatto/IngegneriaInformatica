
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\005\006\000\002\006\014\000\002\007\005\000" +
    "\002\007\005\000\002\007\002\000\002\010\003\000\002" +
    "\011\005\000\002\011\005\000\002\012\006\000\002\014" +
    "\006\000\002\014\010\000\002\013\003\000\002\017\003" +
    "\000\002\017\004\000\002\020\007\000\002\015\005\000" +
    "\002\015\002\000\002\016\004\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\012\004\ufff7\005\ufff7\006\ufff7\007\ufff7\001" +
    "\002\000\004\007\uffff\001\002\000\012\004\064\005\063" +
    "\006\062\007\ufffc\001\002\000\004\002\061\001\002\000" +
    "\004\007\012\001\002\000\004\007\ufffd\001\002\000\004" +
    "\007\ufffe\001\002\000\004\016\015\001\002\000\004\007" +
    "\037\001\002\000\004\016\015\001\002\000\004\011\021" +
    "\001\002\000\006\007\ufff6\016\015\001\002\000\004\016" +
    "\015\001\002\000\006\007\ufff4\016\ufff4\001\002\000\004" +
    "\016\023\001\002\000\006\010\030\012\027\001\002\000" +
    "\004\016\024\001\002\000\004\020\025\001\002\000\004" +
    "\013\026\001\002\000\006\010\ufff2\012\ufff2\001\002\000" +
    "\004\016\031\001\002\000\006\007\ufff3\016\ufff3\001\002" +
    "\000\004\016\032\001\002\000\004\020\033\001\002\000" +
    "\004\013\034\001\002\000\006\010\ufff1\012\ufff1\001\002" +
    "\000\004\016\015\001\002\000\006\007\ufff5\016\ufff5\001" +
    "\002\000\004\016\043\001\002\000\006\002\uffef\016\uffef" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufff0\016" +
    "\043\001\002\000\006\011\044\014\uffeb\001\002\000\004" +
    "\017\056\001\002\000\004\014\046\001\002\000\004\017" +
    "\050\001\002\000\006\010\053\012\052\001\002\000\004" +
    "\016\051\001\002\000\006\010\uffea\012\uffea\001\002\000" +
    "\004\017\054\001\002\000\006\002\uffed\016\uffed\001\002" +
    "\000\004\016\055\001\002\000\006\010\uffe9\012\uffe9\001" +
    "\002\000\004\015\057\001\002\000\004\014\uffec\001\002" +
    "\000\006\002\uffee\016\uffee\001\002\000\004\002\001\001" +
    "\002\000\004\010\076\001\002\000\004\010\066\001\002" +
    "\000\004\010\065\001\002\000\012\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\001\002\000\012\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\001\002\000\012\004\064\005\070\006\062\007" +
    "\ufffb\001\002\000\004\010\071\001\002\000\010\004\ufff7" +
    "\005\ufff7\006\ufff7\001\002\000\010\004\064\005\073\006" +
    "\062\001\002\000\004\010\074\001\002\000\010\004\ufff7" +
    "\006\ufff7\007\ufff7\001\002\000\010\004\064\006\062\007" +
    "\ufffa\001\002\000\012\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\016\002\005\003\006\004\003\005\010\006" +
    "\007\007\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\012\011\015\012\013\001\001" +
    "\000\002\001\001\000\004\012\034\001\001\000\002\001" +
    "\001\000\004\012\016\001\001\000\004\012\017\001\001" +
    "\000\002\001\001\000\004\014\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\035\001\001\000\002\001\001\000" +
    "\010\013\040\017\041\020\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\057\001\001\000\004\015" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\074\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Product>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    class Product{
        public String name;
        public Double price;

        public Product(String name, Double price){
            this.name = name;
            this.price = price;
        }
    }

    public HashMap<String, HashMap<String, Product>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP catalog_sec SEP purchase_sec 
            { parser.Tree.reduce(5,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= header_1 
            { parser.Tree.reduce(1,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= header_2 
            { parser.Tree.reduce(1,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= header_3 
            { parser.Tree.reduce(1,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header_1 ::= tok1_tok3_maybe 
            { parser.Tree.reduce(1,"header_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header_2 ::= tok1_tok3_maybe TK2 S tok1_tok3_maybe 
            { parser.Tree.reduce(4,"header_2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header_3 ::= tok1_tok3_maybe TK2 S tok1_tok3_maybe TK2 S tok1_tok3_maybe TK2 S tok1_tok3_maybe 
            { parser.Tree.reduce(10,"header_3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok1_tok3_maybe ::= tok1_tok3_maybe TK1 S 
            { parser.Tree.reduce(3,"tok1_tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok3_maybe",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok1_tok3_maybe ::= tok1_tok3_maybe TK3 S 
            { parser.Tree.reduce(3,"tok1_tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok3_maybe",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok1_tok3_maybe ::= 
            { parser.Tree.reduce(0,"tok1_tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok3_maybe",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // catalog_sec ::= category_l 
            { parser.Tree.reduce(1,"catalog_sec",0);
              Object RESULT =null;
		
    for(String s : parser.table.keySet()){
        HashMap<String, Product> tab = parser.table.get(s);
        Double price_max = 0.00;
        String name_max = "";
        for(String s1 : tab.keySet()){
            Product p = tab.get(s1);
            if(p.price > price_max){
                price_max = p.price;
                name_max = p.name;
            }
        }
        System.out.println(name_max+" "+price_max);
    }
    System.out.println("---");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("catalog_sec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // category_l ::= category category category 
            { parser.Tree.reduce(3,"category_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("category_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // category_l ::= category_l category category 
            { parser.Tree.reduce(3,"category_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("category_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // category ::= QSTRING DASH product_l S 
            { parser.Tree.reduce(4,"category",0);
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prod_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prod_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Product> prod_l = (HashMap<String,Product>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.table.put(cat, prod_l);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("category",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // product_l ::= QSTRING QSTRING REAL EURO_WD 
            { parser.Tree.reduce(4,"product_l",0);
              HashMap<String,Product> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     Product p = new Product(name, price);
                     RESULT = new HashMap<String,Product>();
                     RESULT.put(code,p);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_l",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // product_l ::= product_l CM QSTRING QSTRING REAL EURO_WD 
            { parser.Tree.reduce(6,"product_l",0);
              HashMap<String,Product> RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap<String,Product> tab = (HashMap<String,Product>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     Product p = new Product(name, price);
                     tab.put(code,p);
                     RESULT = tab;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_l",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // purchase_sec ::= purchase_l 
            { parser.Tree.reduce(1,"purchase_sec",0);
              Object RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double tot = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("TOTAL: "+tot); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("purchase_sec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // purchase_l ::= purchase 
            { parser.Tree.reduce(1,"purchase_l",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("purchase_l",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // purchase_l ::= purchase_l purchase 
            { parser.Tree.reduce(2,"purchase_l",0);
              Double RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1+val2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("purchase_l",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // purchase ::= QSTRING discount DOUBLECOL pur_product_l S 
            { parser.Tree.reduce(5,"purchase",0);
              Double RESULT =null;
		int cat_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cat_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cat_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int discountleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int discountright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double discount = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = val;
                    //System.out.println(tot);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("purchase",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // discount ::= DASH UINT PERCENT 
            { parser.Tree.reduce(3,"discount",0);
              Double RESULT =null;
		int percleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int percright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer perc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 RESULT = (Double)perc.doubleValue()/100;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("discount",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // discount ::= 
            { parser.Tree.reduce(0,"discount",0);
              Double RESULT =null;
		 RESULT = 0.00 ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("discount",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pur_product_l ::= UINT QSTRING 
            { parser.Tree.reduce(2,"pur_product_l",0);
              Double RESULT =null;
		int qtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer qty = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String category_name = (String)parser.stack(-4);
                    HashMap<String,Product> tab = parser.table.get(category_name);
                    Product p = tab.get(code);

                    Double discount = (Double) parser.stack(-3);
                    
                    Double price = (Double)qty.doubleValue()*(p.price - p.price*discount);
                    System.out.println(p.name+" "+price);
                    RESULT = new Double(price);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pur_product_l",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pur_product_l ::= pur_product_l CM UINT QSTRING 
            { parser.Tree.reduce(4,"pur_product_l",0);
              Double RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double prev = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer qty = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String category_name = (String)parser.stack(-6);
                    HashMap<String,Product> tab = parser.table.get(category_name);
                    Product p = tab.get(code);

                    Double discount = (Double) parser.stack(-5);
                    
                    Double price = (Double)qty.doubleValue()*(p.price - p.price*discount);
                    System.out.println(p.name+" "+price);
                    RESULT = new Double(price+prev);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pur_product_l",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
