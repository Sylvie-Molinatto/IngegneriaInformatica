// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;

//jflex scanner.jflex; java java_cup.MainDrawTree parser.cup;javac *.java;java Main example.txt

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\5\0\1\12\1\13\1\14"+
    "\1\15\1\0\1\16\1\17\1\20\1\21\2\22\1\23"+
    "\2\24\1\25\1\26\1\27\1\30\1\0\1\31\2\0"+
    "\1\32\1\33\1\34\1\35\1\0\1\36\3\0\1\37"+
    "\2\0\1\40\1\41\20\0\1\42\1\0\1\43\1\44"+
    "\1\45\1\0\1\46\2\0\1\47\4\0\1\50\1\51"+
    "\1\52\2\0\1\53\2\0\1\54\1\55\2\0\1\56"+
    "\13\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\1"+
    "\2\6\1\1\1\7\5\1\1\0\1\10\3\0\1\11"+
    "\5\0\1\12\1\13\17\0\1\14\17\0\4\15\3\0"+
    "\1\15\1\0\1\15\102\0\1\16\7\0\1\17\200\0"+
    "\5\15\1\0\1\15\361\0\6\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\57\0\57"+
    "\0\57\0\353\0\u011a\0\u0149\0\u0178\0\57\0\u01a7\0\u01d6"+
    "\0\u0205\0\u0234\0\u0263\0\215\0\57\0\u0292\0\u02c1\0\353"+
    "\0\57\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\57\0\57"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\57"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695"+
    "\0\u16c4\0\u16f3\0\u1722\0\u0fca\0\u1751\0\u1780\0\u17af\0\u17de"+
    "\0\u180d\0\u183c\0\u186b\0\57\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17"+
    "\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f"+
    "\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7"+
    "\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f"+
    "\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7"+
    "\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f"+
    "\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8\0\u27d7"+
    "\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f"+
    "\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7"+
    "\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f"+
    "\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7"+
    "\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f"+
    "\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049\0\u3078\0\u30a7"+
    "\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0\0\u321f"+
    "\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a\0\u3339\0\u3368\0\u3397"+
    "\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0\0\u350f"+
    "\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa\0\u3629\0\u3658\0\u3687"+
    "\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772\0\u37a1\0\u37d0\0\u37ff"+
    "\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977"+
    "\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62\0\u3a91\0\u3ac0\0\u3aef"+
    "\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09\0\u3c38\0\u3c67"+
    "\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\u3db0\0\u3ddf"+
    "\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28\0\u3f57"+
    "\0\u3f86\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf"+
    "\0\u40fe\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9\0\u4218\0\u4247"+
    "\0\u4276\0\u42a5\0\u42d4\0\u4303\0\u4332\0\u4361\0\u4390\0\u43bf"+
    "\0\u43ee\0\u441d\0\u444c\0\u447b\0\u44aa\0\u44d9\0\u4508\0\u4537"+
    "\0\u4566\0\u4595\0\u45c4\0\u45f3\0\u4622\0\u4651\0\u4680\0\u46af"+
    "\0\u46de\0\u470d\0\u473c\0\u476b\0\u479a\0\u47c9\0\u47f8\0\u4827"+
    "\0\u4856\0\u4885\0\u48b4\0\u48e3\0\u4912\0\u4941\0\u4970\0\u499f"+
    "\0\u49ce\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8\0\u4b17"+
    "\0\u4b46\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02\0\u4c31\0\u4c60\0\u4c8f"+
    "\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8\0\u4e07"+
    "\0\u4e36\0\u4e65\0\u4e94\0\u4ec3\0\u4ef2\0\u4f21\0\u4f50\0\u4f7f"+
    "\0\u4fae\0\u4fdd\0\u500c\0\u503b\0\u506a\0\u5099\0\u50c8\0\u50f7"+
    "\0\u5126\0\u5155\0\u5184\0\u51b3\0\u51e2\0\u5211\0\u5240\0\u526f"+
    "\0\u529e\0\u52cd\0\u52fc\0\u532b\0\u535a\0\u5389\0\u53b8\0\u53e7"+
    "\0\u5416\0\u5445\0\u5474\0\u54a3\0\u54d2\0\u5501\0\u5530\0\u555f"+
    "\0\u558e\0\u55bd\0\u55ec\0\u561b\0\u564a\0\u5679\0\u56a8\0\u56d7"+
    "\0\u5706\0\u5735\0\u5764\0\u5793\0\u57c2\0\u57f1\0\u5820\0\u584f"+
    "\0\u587e\0\u58ad\0\u58dc\0\u590b\0\u593a\0\u5969\0\u5998\0\u59c7"+
    "\0\u59f6\0\u5a25\0\u5a54\0\u5a83\0\u5ab2\0\u5ae1\0\u5b10\0\u5b3f"+
    "\0\u5b6e\0\u5b9d\0\u5bcc\0\u5bfb\0\u5c2a\0\u5c59\0\u5c88\0\u5cb7"+
    "\0\u5ce6\0\u5d15\0\u5d44\0\u5d73\0\57\0\u5da2\0\u5dd1\0\u5e00"+
    "\0\u5e2f\0\u5e5e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\2\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\7\14\1\15"+
    "\1\16\1\17\1\2\1\20\1\21\1\22\11\2\1\23"+
    "\10\2\61\0\1\3\54\0\6\24\1\25\50\24\10\0"+
    "\1\26\64\0\10\27\46\0\1\30\56\0\1\30\10\14"+
    "\57\0\1\31\60\0\1\32\70\0\1\33\56\0\1\34"+
    "\56\0\1\35\70\0\1\36\12\0\1\37\64\0\10\40"+
    "\45\0\1\41\56\0\1\42\1\0\1\43\1\44\1\45"+
    "\5\46\51\0\1\47\50\0\1\50\1\0\1\50\115\0"+
    "\1\51\3\0\14\41\1\52\42\41\16\0\1\43\1\46"+
    "\1\53\5\43\40\0\1\54\56\0\1\54\6\0\10\46"+
    "\40\0\1\54\6\0\3\46\1\55\4\43\40\0\1\54"+
    "\6\0\10\43\47\0\1\56\52\0\1\57\1\0\1\57"+
    "\114\0\1\60\4\0\14\41\1\52\14\41\1\61\25\41"+
    "\7\0\1\54\6\0\4\43\51\0\1\62\1\0\1\63"+
    "\1\64\1\65\5\66\40\0\1\54\6\0\6\43\53\0"+
    "\1\67\50\0\1\70\1\0\1\70\42\0\14\41\1\52"+
    "\14\41\1\3\25\41\16\0\1\63\1\66\1\71\5\63"+
    "\40\0\1\72\56\0\1\72\6\0\10\66\40\0\1\72"+
    "\6\0\3\66\1\73\4\63\40\0\1\72\6\0\10\63"+
    "\47\0\1\74\1\75\51\0\1\76\1\0\1\76\51\0"+
    "\1\72\6\0\4\63\51\0\1\77\1\0\1\100\1\101"+
    "\1\102\5\103\40\0\1\72\6\0\6\63\40\0\1\104"+
    "\56\0\1\105\63\0\1\106\1\0\1\106\60\0\1\100"+
    "\1\103\1\107\5\100\40\0\1\110\56\0\1\110\6\0"+
    "\10\103\40\0\1\110\6\0\3\103\1\111\4\100\40\0"+
    "\1\110\6\0\10\100\66\0\1\112\3\0\1\113\53\0"+
    "\1\114\1\115\1\116\30\0\1\117\1\0\1\117\51\0"+
    "\1\110\6\0\4\100\51\0\1\120\1\0\1\121\1\122"+
    "\1\123\5\124\40\0\1\110\6\0\6\100\101\0\1\125"+
    "\62\0\1\126\52\0\1\127\53\0\1\130\56\0\1\131"+
    "\25\0\1\132\1\0\1\132\60\0\1\121\1\124\1\133"+
    "\5\121\40\0\1\134\56\0\1\134\6\0\10\124\40\0"+
    "\1\134\6\0\3\124\1\135\4\121\40\0\1\134\6\0"+
    "\10\121\76\0\1\136\66\0\1\137\45\0\1\140\63\0"+
    "\1\141\60\0\1\142\15\0\1\143\1\0\1\143\51\0"+
    "\1\134\6\0\4\121\51\0\1\144\1\0\1\145\1\146"+
    "\1\147\5\150\40\0\1\134\6\0\6\121\101\0\1\151"+
    "\56\0\1\152\63\0\1\153\57\0\1\154\47\0\1\155"+
    "\23\0\1\156\1\0\1\156\60\0\1\145\1\150\1\157"+
    "\5\145\40\0\1\160\56\0\1\160\6\0\10\150\40\0"+
    "\1\160\6\0\3\150\1\161\4\145\40\0\1\160\6\0"+
    "\10\145\101\0\1\162\56\0\1\163\62\0\1\164\45\0"+
    "\1\165\62\0\1\166\21\0\1\167\1\0\1\167\51\0"+
    "\1\160\6\0\4\145\51\0\1\170\1\0\1\171\1\172"+
    "\1\173\5\174\40\0\1\160\6\0\6\145\77\0\1\175"+
    "\56\0\1\176\55\0\1\177\66\0\1\200\10\0\1\201"+
    "\63\0\1\202\1\0\1\202\60\0\1\171\1\174\1\203"+
    "\5\171\40\0\1\204\56\0\1\204\6\0\10\174\40\0"+
    "\1\204\6\0\3\174\1\205\4\171\40\0\1\204\6\0"+
    "\10\171\77\0\1\206\56\0\1\207\63\0\1\210\61\0"+
    "\1\211\16\0\2\212\1\213\50\0\1\214\1\0\1\214"+
    "\51\0\1\204\6\0\4\171\51\0\1\215\1\0\1\216"+
    "\1\217\1\220\5\221\40\0\1\204\6\0\6\171\106\0"+
    "\1\211\56\0\1\222\61\0\1\166\5\0\1\223\67\0"+
    "\10\224\47\0\7\224\50\0\1\216\1\221\1\225\5\216"+
    "\40\0\1\226\56\0\1\226\6\0\10\221\40\0\1\226"+
    "\6\0\3\221\1\227\4\216\40\0\1\226\6\0\10\216"+
    "\36\0\1\230\67\0\3\212\1\231\44\0\1\226\6\0"+
    "\4\216\51\0\1\232\1\0\1\233\1\234\1\235\5\236"+
    "\40\0\1\226\6\0\6\216\51\0\1\237\2\212\1\240"+
    "\53\0\2\224\55\0\1\233\1\236\1\241\5\233\40\0"+
    "\1\242\56\0\1\242\6\0\10\236\40\0\1\242\6\0"+
    "\3\236\1\243\4\233\40\0\1\242\6\0\10\233\54\0"+
    "\3\224\47\0\1\224\47\0\1\242\6\0\4\233\51\0"+
    "\1\244\1\0\1\245\1\246\1\247\5\250\40\0\1\242"+
    "\6\0\6\233\51\0\1\245\1\250\1\251\5\245\40\0"+
    "\1\252\56\0\1\252\6\0\10\250\40\0\1\252\6\0"+
    "\3\250\1\253\4\245\40\0\1\252\6\0\10\245\40\0"+
    "\1\252\6\0\4\245\51\0\1\254\1\0\1\255\1\256"+
    "\1\257\5\260\40\0\1\252\6\0\6\245\51\0\1\255"+
    "\1\260\1\261\5\255\40\0\1\262\56\0\1\262\6\0"+
    "\10\260\40\0\1\262\6\0\3\260\1\263\4\255\40\0"+
    "\1\262\6\0\10\255\40\0\1\262\6\0\4\255\51\0"+
    "\1\264\1\0\1\265\1\266\1\267\5\270\40\0\1\262"+
    "\6\0\6\255\51\0\1\265\1\270\1\271\5\265\40\0"+
    "\1\272\56\0\1\272\6\0\10\270\40\0\1\272\6\0"+
    "\3\270\1\273\4\265\40\0\1\272\6\0\10\265\40\0"+
    "\1\272\6\0\4\265\51\0\1\274\1\0\1\275\1\276"+
    "\1\277\5\300\40\0\1\272\6\0\6\265\51\0\1\275"+
    "\1\300\1\301\5\275\40\0\1\302\56\0\1\302\6\0"+
    "\10\300\40\0\1\302\6\0\3\300\1\303\4\275\40\0"+
    "\1\302\6\0\10\275\40\0\1\302\6\0\4\275\51\0"+
    "\1\304\1\0\1\305\1\306\1\307\5\310\40\0\1\302"+
    "\6\0\6\275\51\0\1\305\1\310\1\311\5\305\40\0"+
    "\1\312\56\0\1\312\6\0\10\310\40\0\1\312\6\0"+
    "\3\310\1\313\4\305\40\0\1\312\6\0\10\305\40\0"+
    "\1\312\6\0\4\305\51\0\1\314\1\0\1\315\1\316"+
    "\1\317\5\320\40\0\1\312\6\0\6\305\51\0\1\315"+
    "\1\320\1\321\5\315\40\0\1\322\56\0\1\322\6\0"+
    "\10\320\40\0\1\322\6\0\3\320\1\323\4\315\40\0"+
    "\1\322\6\0\10\315\40\0\1\322\6\0\4\315\51\0"+
    "\1\324\1\0\1\325\1\326\1\327\5\330\40\0\1\322"+
    "\6\0\6\315\51\0\1\325\1\330\1\331\5\325\40\0"+
    "\1\332\56\0\1\332\6\0\10\330\40\0\1\332\6\0"+
    "\3\330\1\333\4\325\40\0\1\332\6\0\10\325\40\0"+
    "\1\332\6\0\4\325\51\0\1\334\1\0\1\335\1\336"+
    "\1\337\5\340\40\0\1\332\6\0\6\325\51\0\1\335"+
    "\1\340\1\341\5\335\40\0\1\342\56\0\1\342\6\0"+
    "\10\340\40\0\1\342\6\0\3\340\1\343\4\335\40\0"+
    "\1\342\6\0\10\335\40\0\1\342\6\0\4\335\51\0"+
    "\1\344\1\0\1\345\1\346\1\347\5\350\40\0\1\342"+
    "\6\0\6\335\51\0\1\345\1\350\1\351\5\345\40\0"+
    "\1\352\56\0\1\352\6\0\10\350\40\0\1\352\6\0"+
    "\3\350\1\353\4\345\40\0\1\352\6\0\10\345\40\0"+
    "\1\352\6\0\4\345\51\0\1\354\1\0\1\355\1\356"+
    "\1\357\5\360\40\0\1\352\6\0\6\345\51\0\1\355"+
    "\1\360\1\361\5\355\40\0\1\362\56\0\1\362\6\0"+
    "\10\360\40\0\1\362\6\0\3\360\1\363\4\355\40\0"+
    "\1\362\6\0\10\355\40\0\1\362\6\0\4\355\51\0"+
    "\1\364\1\0\1\365\1\366\1\367\5\370\40\0\1\362"+
    "\6\0\6\355\51\0\1\365\1\370\1\371\5\365\40\0"+
    "\1\372\56\0\1\372\6\0\10\370\40\0\1\372\6\0"+
    "\3\370\1\373\4\365\40\0\1\372\6\0\10\365\40\0"+
    "\1\372\6\0\4\365\51\0\1\374\1\0\1\375\1\376"+
    "\1\377\5\u0100\40\0\1\372\6\0\6\365\51\0\1\375"+
    "\1\u0100\1\u0101\5\375\40\0\1\u0102\56\0\1\u0102\6\0"+
    "\10\u0100\40\0\1\u0102\6\0\3\u0100\1\u0103\4\375\40\0"+
    "\1\u0102\6\0\10\375\40\0\1\u0102\6\0\4\375\51\0"+
    "\1\u0104\1\0\1\u0105\1\u0106\1\u0107\5\u0108\40\0\1\u0102"+
    "\6\0\6\375\51\0\1\u0105\1\u0108\1\u0109\5\u0105\40\0"+
    "\1\u010a\56\0\1\u010a\6\0\10\u0108\40\0\1\u010a\6\0"+
    "\3\u0108\1\u010b\4\u0105\40\0\1\u010a\6\0\10\u0105\40\0"+
    "\1\u010a\6\0\4\u0105\51\0\1\u010c\1\0\1\u010d\1\u010e"+
    "\1\u010f\5\u0110\40\0\1\u010a\6\0\6\u0105\51\0\1\u010d"+
    "\1\u0110\1\u0111\5\u010d\40\0\1\u0112\56\0\1\u0112\6\0"+
    "\10\u0110\40\0\1\u0112\6\0\3\u0110\1\u0113\4\u010d\40\0"+
    "\1\u0112\6\0\10\u010d\40\0\1\u0112\6\0\4\u010d\51\0"+
    "\1\u0114\1\0\1\u0115\1\u0116\1\u0117\5\u0118\40\0\1\u0112"+
    "\6\0\6\u010d\51\0\1\u0115\1\u0118\1\u0119\5\u0115\40\0"+
    "\1\u011a\56\0\1\u011a\6\0\10\u0118\40\0\1\u011a\6\0"+
    "\3\u0118\1\u011b\4\u0115\40\0\1\u011a\6\0\10\u0115\40\0"+
    "\1\u011a\6\0\4\u0115\51\0\1\u011c\1\0\1\u011d\1\u011e"+
    "\1\u011f\5\u0120\40\0\1\u011a\6\0\6\u0115\51\0\1\u011d"+
    "\1\u0120\1\u0121\5\u011d\40\0\1\u0122\56\0\1\u0122\6\0"+
    "\10\u0120\40\0\1\u0122\6\0\3\u0120\1\u0123\4\u011d\40\0"+
    "\1\u0122\6\0\10\u011d\40\0\1\u0122\6\0\4\u011d\51\0"+
    "\1\u0124\1\0\1\u0125\1\u0126\1\u0127\5\u0128\40\0\1\u0122"+
    "\6\0\6\u011d\51\0\1\u0125\1\u0128\1\u0129\5\u0125\40\0"+
    "\1\u012a\56\0\1\u012a\6\0\10\u0128\40\0\1\u012a\6\0"+
    "\3\u0128\1\u012b\4\u0125\40\0\1\u012a\6\0\10\u0125\40\0"+
    "\1\u012a\6\0\4\u0125\51\0\1\u012c\1\0\1\u012d\1\u012e"+
    "\1\u012f\5\u0130\40\0\1\u012a\6\0\6\u0125\51\0\1\u012d"+
    "\1\u0130\1\u0131\5\u012d\40\0\1\u0132\56\0\1\u0132\6\0"+
    "\10\u0130\40\0\1\u0132\6\0\3\u0130\1\u0133\4\u012d\40\0"+
    "\1\u0132\6\0\10\u012d\40\0\1\u0132\6\0\4\u012d\51\0"+
    "\1\u0134\1\0\1\u0135\1\u0136\1\u0137\5\u0138\40\0\1\u0132"+
    "\6\0\6\u012d\51\0\1\u0135\1\u0138\1\u0139\5\u0135\40\0"+
    "\1\u013a\56\0\1\u013a\6\0\10\u0138\40\0\1\u013a\6\0"+
    "\3\u0138\1\u013b\4\u0135\40\0\1\u013a\6\0\10\u0135\40\0"+
    "\1\u013a\6\0\4\u0135\51\0\1\u013c\1\0\1\u013d\1\u013e"+
    "\1\u013f\5\u0140\40\0\1\u013a\6\0\6\u0135\51\0\1\u013d"+
    "\1\u0140\1\u0141\5\u013d\40\0\1\u0142\56\0\1\u0142\6\0"+
    "\10\u0140\40\0\1\u0142\6\0\3\u0140\1\u0143\4\u013d\40\0"+
    "\1\u0142\6\0\10\u013d\40\0\1\u0142\6\0\4\u013d\51\0"+
    "\1\u0144\1\0\1\u0145\1\u0146\1\u0147\5\u0148\40\0\1\u0142"+
    "\6\0\6\u013d\51\0\1\u0145\1\u0148\1\u0149\5\u0145\40\0"+
    "\1\u014a\56\0\1\u014a\6\0\10\u0148\40\0\1\u014a\6\0"+
    "\3\u0148\1\u014b\4\u0145\40\0\1\u014a\6\0\10\u0145\40\0"+
    "\1\u014a\6\0\4\u0145\51\0\1\u014c\1\0\1\u014d\1\u014e"+
    "\1\u014f\5\u0150\40\0\1\u014a\6\0\6\u0145\51\0\1\u014d"+
    "\1\u0150\1\u0151\5\u014d\40\0\1\u0152\56\0\1\u0152\6\0"+
    "\10\u0150\40\0\1\u0152\6\0\3\u0150\1\u0153\4\u014d\40\0"+
    "\1\u0152\6\0\10\u014d\40\0\1\u0152\6\0\4\u014d\51\0"+
    "\1\u0154\1\0\1\u0155\1\u0156\1\u0157\5\u0158\40\0\1\u0152"+
    "\6\0\6\u014d\51\0\1\u0155\1\u0158\1\u0159\5\u0155\40\0"+
    "\1\u015a\56\0\1\u015a\6\0\10\u0158\40\0\1\u015a\6\0"+
    "\3\u0158\1\u015b\4\u0155\40\0\1\u015a\6\0\10\u0155\40\0"+
    "\1\u015a\6\0\4\u0155\51\0\1\u015c\1\0\1\u015d\1\u015e"+
    "\1\u015f\5\u0160\40\0\1\u015a\6\0\6\u0155\51\0\1\u015d"+
    "\1\u0160\1\u0161\5\u015d\40\0\1\u0162\56\0\1\u0162\6\0"+
    "\10\u0160\40\0\1\u0162\6\0\3\u0160\1\u0163\4\u015d\40\0"+
    "\1\u0162\6\0\10\u015d\40\0\1\u0162\6\0\4\u015d\51\0"+
    "\1\u0164\1\0\1\u0165\1\u0166\1\u0167\5\u0168\40\0\1\u0162"+
    "\6\0\6\u015d\51\0\1\u0165\1\u0168\1\u0169\5\u0165\40\0"+
    "\1\u016a\56\0\1\u016a\6\0\10\u0168\40\0\1\u016a\6\0"+
    "\3\u0168\1\u016b\4\u0165\40\0\1\u016a\6\0\10\u0165\40\0"+
    "\1\u016a\6\0\4\u0165\51\0\1\u016c\1\0\1\u016d\1\u016e"+
    "\1\u016f\5\u0170\40\0\1\u016a\6\0\6\u0165\51\0\1\u016d"+
    "\1\u0170\1\u0171\5\u016d\40\0\1\u0172\56\0\1\u0172\6\0"+
    "\10\u0170\40\0\1\u0172\6\0\3\u0170\1\u0173\4\u016d\40\0"+
    "\1\u0172\6\0\10\u016d\40\0\1\u0172\6\0\4\u016d\51\0"+
    "\1\u0174\1\0\1\u0175\1\u0176\1\u0177\5\u0178\40\0\1\u0172"+
    "\6\0\6\u016d\51\0\1\u0175\1\u0178\1\u0179\5\u0175\40\0"+
    "\1\u017a\56\0\1\u017a\6\0\10\u0178\40\0\1\u017a\6\0"+
    "\3\u0178\1\u017b\4\u0175\40\0\1\u017a\6\0\10\u0175\40\0"+
    "\1\u017a\6\0\4\u0175\51\0\1\u017c\1\0\1\u017d\1\u017e"+
    "\1\u017f\5\u0180\40\0\1\u017a\6\0\6\u0175\51\0\1\u017d"+
    "\1\u0180\1\u0181\5\u017d\40\0\1\u0182\56\0\1\u0182\6\0"+
    "\10\u0180\40\0\1\u0182\6\0\3\u0180\1\u0183\4\u017d\40\0"+
    "\1\u0182\6\0\10\u017d\40\0\1\u0182\6\0\4\u017d\51\0"+
    "\1\u0184\1\0\1\u0185\1\u0186\1\u0187\5\u0188\40\0\1\u0182"+
    "\6\0\6\u017d\51\0\1\u0185\1\u0188\1\u0189\5\u0185\40\0"+
    "\1\u018a\56\0\1\u018a\6\0\10\u0188\40\0\1\u018a\6\0"+
    "\3\u0188\1\u018b\4\u0185\40\0\1\u018a\6\0\10\u0185\40\0"+
    "\1\u018a\6\0\4\u0185\51\0\1\u018c\1\0\1\u018d\1\u018e"+
    "\1\u018f\5\u0190\40\0\1\u018a\6\0\6\u0185\51\0\1\u018d"+
    "\1\u0190\1\u0191\5\u018d\40\0\1\u0192\56\0\1\u0192\6\0"+
    "\10\u0190\40\0\1\u0192\6\0\3\u0190\1\u0193\4\u018d\40\0"+
    "\1\u0192\6\0\10\u018d\40\0\1\u0192\6\0\4\u018d\51\0"+
    "\1\u0194\1\0\1\u0195\1\u0196\1\u0197\5\u0198\40\0\1\u0192"+
    "\6\0\6\u018d\51\0\1\u0195\1\u0198\1\u0199\5\u0195\40\0"+
    "\1\u019a\56\0\1\u019a\6\0\10\u0198\40\0\1\u019a\6\0"+
    "\3\u0198\1\u019b\4\u0195\40\0\1\u019a\6\0\10\u0195\40\0"+
    "\1\u019a\6\0\4\u0195\51\0\1\u019c\1\0\1\u019d\1\u019e"+
    "\1\u019f\5\u01a0\40\0\1\u019a\6\0\6\u0195\51\0\1\u019d"+
    "\1\u01a0\1\u01a1\5\u019d\40\0\1\u01a2\56\0\1\u01a2\6\0"+
    "\10\u01a0\40\0\1\u01a2\6\0\3\u01a0\1\u01a3\4\u019d\40\0"+
    "\1\u01a2\6\0\10\u019d\40\0\1\u01a2\6\0\4\u019d\51\0"+
    "\1\u01a4\1\0\1\u01a5\1\u01a6\1\u01a7\5\u01a8\40\0\1\u01a2"+
    "\6\0\6\u019d\51\0\1\u01a5\1\u01a8\1\u01a9\5\u01a5\40\0"+
    "\1\u01aa\56\0\1\u01aa\6\0\10\u01a8\40\0\1\u01aa\6\0"+
    "\3\u01a8\1\u01ab\4\u01a5\40\0\1\u01aa\6\0\10\u01a5\40\0"+
    "\1\u01aa\6\0\4\u01a5\51\0\1\u01ac\1\0\1\u01ad\1\u01ae"+
    "\1\u01af\5\u01b0\40\0\1\u01aa\6\0\6\u01a5\51\0\1\u01ad"+
    "\1\u01b0\1\u01b1\5\u01ad\40\0\1\u01b2\56\0\1\u01b2\6\0"+
    "\10\u01b0\40\0\1\u01b2\6\0\3\u01b0\1\u01b3\4\u01ad\40\0"+
    "\1\u01b2\6\0\10\u01ad\40\0\1\u01b2\6\0\4\u01ad\51\0"+
    "\1\u01b4\1\0\1\u01b5\1\u01b6\1\u01b7\5\u01b8\40\0\1\u01b2"+
    "\6\0\6\u01ad\51\0\1\u01b5\1\u01b8\1\u01b9\5\u01b5\40\0"+
    "\1\u01ba\56\0\1\u01ba\6\0\10\u01b8\40\0\1\u01ba\6\0"+
    "\3\u01b8\1\u01bb\4\u01b5\40\0\1\u01ba\6\0\10\u01b5\40\0"+
    "\1\u01ba\6\0\4\u01b5\51\0\1\u01bc\1\0\1\u01bd\1\u01be"+
    "\1\u01bf\5\u01c0\40\0\1\u01ba\6\0\6\u01b5\51\0\1\u01bd"+
    "\1\u01c0\1\u01c1\5\u01bd\40\0\1\u01c2\56\0\1\u01c2\6\0"+
    "\10\u01c0\40\0\1\u01c2\6\0\3\u01c0\1\u01c3\4\u01bd\40\0"+
    "\1\u01c2\6\0\10\u01bd\40\0\1\u01c2\6\0\4\u01bd\51\0"+
    "\1\u01c4\1\0\1\u01c5\1\u01c6\1\u01c7\5\u01c8\40\0\1\u01c2"+
    "\6\0\6\u01bd\51\0\1\u01c5\1\u01c8\1\u01c9\5\u01c5\40\0"+
    "\1\u01ca\56\0\1\u01ca\6\0\10\u01c8\40\0\1\u01ca\6\0"+
    "\3\u01c8\1\u01cb\4\u01c5\40\0\1\u01ca\6\0\10\u01c5\40\0"+
    "\1\u01ca\6\0\4\u01c5\51\0\1\u01cc\1\0\1\u01cd\1\u01ce"+
    "\1\u01cf\5\u01d0\40\0\1\u01ca\6\0\6\u01c5\51\0\1\u01cd"+
    "\1\u01d0\1\u01d1\5\u01cd\40\0\1\u01d2\56\0\1\u01d2\6\0"+
    "\10\u01d0\40\0\1\u01d2\6\0\3\u01d0\1\u01d3\4\u01cd\40\0"+
    "\1\u01d2\6\0\10\u01cd\40\0\1\u01d2\6\0\4\u01cd\51\0"+
    "\1\u01d4\1\0\1\u01d5\1\u01d6\1\u01d7\5\u01d8\40\0\1\u01d2"+
    "\6\0\6\u01cd\51\0\1\u01d5\1\u01d8\1\u01d9\5\u01d5\40\0"+
    "\1\u01da\56\0\1\u01da\6\0\10\u01d8\40\0\1\u01da\6\0"+
    "\3\u01d8\1\u01db\4\u01d5\40\0\1\u01da\6\0\10\u01d5\40\0"+
    "\1\u01da\6\0\4\u01d5\51\0\1\u01dc\1\0\1\u01dd\1\u01de"+
    "\1\u01df\5\u01e0\40\0\1\u01da\6\0\6\u01d5\51\0\1\u01dd"+
    "\1\u01e0\1\u01e1\5\u01dd\40\0\1\u01e2\56\0\1\u01e2\6\0"+
    "\10\u01e0\40\0\1\u01e2\6\0\3\u01e0\1\u01e3\4\u01dd\40\0"+
    "\1\u01e2\6\0\10\u01dd\40\0\1\u01e2\6\0\4\u01dd\51\0"+
    "\1\u01e4\1\0\1\u01e5\1\u01e6\1\u01e7\5\u01e8\40\0\1\u01e2"+
    "\6\0\6\u01dd\51\0\1\u01e5\1\u01e8\1\u01e9\5\u01e5\40\0"+
    "\1\u01ea\56\0\1\u01ea\6\0\10\u01e8\40\0\1\u01ea\6\0"+
    "\3\u01e8\1\u01eb\4\u01e5\40\0\1\u01ea\6\0\10\u01e5\40\0"+
    "\1\u01ea\6\0\4\u01e5\51\0\1\u01ec\1\0\1\u01ed\1\u01ee"+
    "\1\u01ef\5\u01f0\40\0\1\u01ea\6\0\6\u01e5\51\0\1\u01ed"+
    "\1\u01f0\1\u01f1\5\u01ed\40\0\1\u01f2\56\0\1\u01f2\6\0"+
    "\10\u01f0\40\0\1\u01f2\6\0\3\u01f0\1\u01f3\4\u01ed\40\0"+
    "\1\u01f2\6\0\10\u01ed\40\0\1\u01f2\6\0\4\u01ed\51\0"+
    "\1\u01f4\1\0\1\u01f5\1\u01f6\1\u01f7\5\u01f8\40\0\1\u01f2"+
    "\6\0\6\u01ed\51\0\1\u01f5\1\u01f8\1\u01f9\5\u01f5\40\0"+
    "\1\u01fa\56\0\1\u01fa\6\0\10\u01f8\40\0\1\u01fa\6\0"+
    "\3\u01f8\1\u01fb\4\u01f5\40\0\1\u01fa\6\0\10\u01f5\40\0"+
    "\1\u01fa\6\0\4\u01f5\51\0\1\u01fc\1\0\1\u01fd\1\u01fe"+
    "\1\u01ff\5\u0200\40\0\1\u01fa\6\0\6\u01f5\51\0\1\u01fd"+
    "\1\u0200\1\u0201\5\u01fd\40\0\1\u0202\56\0\1\u0202\6\0"+
    "\10\u0200\40\0\1\u0202\6\0\3\u0200\1\u0203\4\u01fd\40\0"+
    "\1\u0202\6\0\10\u01fd\40\0\1\u0202\6\0\4\u01fd\51\0"+
    "\1\u0204\1\0\1\u0205\1\u0206\1\u0207\5\u0208\40\0\1\u0202"+
    "\6\0\6\u01fd\51\0\1\u0205\1\u0208\1\u0209\5\u0205\40\0"+
    "\1\u020a\56\0\1\u020a\6\0\10\u0208\40\0\1\u020a\6\0"+
    "\3\u0208\1\u020b\4\u0205\40\0\1\u020a\6\0\10\u0205\40\0"+
    "\1\u020a\6\0\4\u0205\51\0\1\u020c\1\0\1\u020d\1\u020e"+
    "\1\u020f\5\u0210\40\0\1\u020a\6\0\6\u0205\51\0\1\u020d"+
    "\1\u0210\1\u0211\5\u020d\47\0\10\u0210\47\0\3\u0210\1\u0212"+
    "\4\u020d\47\0\10\u020d\47\0\4\u020d\53\0\6\u020d\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24205];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\3\11\4\1\1\11\5\1\1\0"+
    "\1\11\3\0\1\11\5\0\2\11\17\0\1\11\17\0"+
    "\4\1\3\0\1\1\1\0\1\1\102\0\1\1\7\0"+
    "\1\11\200\0\5\1\1\0\1\1\361\0\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
	    return new Symbol(type, yyline, yycolumn);
	}
	private Symbol sym(int type, Object value){
	    return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner error: " + yytext());
            }
            // fall through
          case 16: break;
          case 2:
            { ;
            }
            // fall through
          case 17: break;
          case 3:
            { return sym(sym.PERCENT);
            }
            // fall through
          case 18: break;
          case 4:
            { return sym(sym.CM);
            }
            // fall through
          case 19: break;
          case 5:
            { return sym(sym.DASH);
            }
            // fall through
          case 20: break;
          case 6:
            { return sym(sym.UINT,new Integer(yytext()));
            }
            // fall through
          case 21: break;
          case 7:
            { return sym(sym.S);
            }
            // fall through
          case 22: break;
          case 8:
            { return sym(sym.QSTRING,new String(yytext()));
            }
            // fall through
          case 23: break;
          case 9:
            { return sym(sym.DOUBLECOL);
            }
            // fall through
          case 24: break;
          case 10:
            { return sym(sym.SEP);
            }
            // fall through
          case 25: break;
          case 11:
            { return sym(sym.REAL, new Double(yytext()));
            }
            // fall through
          case 26: break;
          case 12:
            { return sym(sym.EURO_WD);
            }
            // fall through
          case 27: break;
          case 13:
            { return sym(sym.TK1);
            }
            // fall through
          case 28: break;
          case 14:
            { return sym(sym.TK3);
            }
            // fall through
          case 29: break;
          case 15:
            { return sym(sym.TK2);
            }
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
