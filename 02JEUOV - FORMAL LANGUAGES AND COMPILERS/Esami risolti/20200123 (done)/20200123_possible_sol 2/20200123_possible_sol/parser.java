
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\005\000\002\003" +
    "\014\000\002\003\014\000\002\003\014\000\002\005\002" +
    "\000\002\005\005\000\002\031\002\000\002\006\005\000" +
    "\002\006\003\000\002\007\007\000\002\007\007\000\002" +
    "\007\006\000\002\007\006\000\002\007\005\000\002\007" +
    "\006\000\002\007\006\000\002\010\005\000\002\010\005" +
    "\000\002\011\005\000\002\011\005\000\002\032\002\000" +
    "\002\012\005\000\002\033\002\000\002\012\006\000\002" +
    "\013\003\000\002\013\003\000\002\017\011\000\002\021" +
    "\005\000\002\021\007\000\002\034\002\000\002\020\013" +
    "\000\002\023\003\000\002\023\004\000\002\024\003\000" +
    "\002\024\003\000\002\035\002\000\002\025\010\000\002" +
    "\036\002\000\002\026\013\000\002\027\003\000\002\027" +
    "\004\000\002\030\007\000\002\030\007\000\002\030\007" +
    "\000\002\030\007\000\002\014\010\000\002\014\010\000" +
    "\002\015\005\000\002\015\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\023\ufffc\024\ufffc\025\ufffc\001\002\000" +
    "\004\002\224\001\002\000\004\022\041\001\002\000\010" +
    "\023\011\024\010\025\007\001\002\000\004\016\031\001" +
    "\002\000\004\016\013\001\002\000\004\016\012\001\002" +
    "\000\012\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001\002\000" +
    "\010\023\ufffc\024\ufffc\025\ufffc\001\002\000\010\023\011" +
    "\024\016\025\015\001\002\000\004\016\024\001\002\000" +
    "\004\016\017\001\002\000\006\023\ufffc\025\ufffc\001\002" +
    "\000\006\023\011\025\021\001\002\000\004\016\022\001" +
    "\002\000\006\022\ufffc\023\ufffc\001\002\000\006\022\uffff" +
    "\023\011\001\002\000\006\023\ufffc\024\ufffc\001\002\000" +
    "\006\023\011\024\026\001\002\000\004\016\027\001\002" +
    "\000\006\022\ufffc\023\ufffc\001\002\000\006\022\ufffe\023" +
    "\011\001\002\000\006\023\ufffc\024\ufffc\001\002\000\006" +
    "\023\011\024\033\001\002\000\004\016\034\001\002\000" +
    "\006\023\ufffc\024\ufffc\001\002\000\006\023\011\024\036" +
    "\001\002\000\004\016\037\001\002\000\006\022\ufffc\023" +
    "\ufffc\001\002\000\006\022\ufffd\023\011\001\002\000\004" +
    "\026\042\001\002\000\010\010\174\027\177\030\175\001" +
    "\002\000\010\002\ufff8\040\ufffa\042\ufffa\001\002\000\004" +
    "\002\000\001\002\000\006\040\047\042\053\001\002\000" +
    "\010\002\ufff9\040\047\042\053\001\002\000\004\004\154" +
    "\001\002\000\010\002\uffe8\040\uffe8\042\uffe8\001\002\000" +
    "\010\002\uffe7\040\uffe7\042\uffe7\001\002\000\006\040\uffec" +
    "\042\uffec\001\002\000\004\004\054\001\002\000\004\011" +
    "\055\001\002\000\004\004\056\001\002\000\004\007\057" +
    "\001\002\000\006\012\uffe3\020\uffe3\001\002\000\006\012" +
    "\062\020\066\001\002\000\010\006\150\012\062\020\066" +
    "\001\002\000\006\005\073\035\071\001\002\000\010\006" +
    "\uffde\012\uffde\020\uffde\001\002\000\010\006\uffdf\012\uffdf" +
    "\020\uffdf\001\002\000\010\006\uffe1\012\uffe1\020\uffe1\001" +
    "\002\000\006\005\073\035\071\001\002\000\034\006\uffcd" +
    "\007\uffcd\010\uffcd\013\uffcd\014\uffcd\017\uffcd\021\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\044\uffcd\045\uffcd\001\002" +
    "\000\034\006\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\017" +
    "\uffcc\021\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\044\uffcc" +
    "\045\uffcc\001\002\000\004\015\126\001\002\000\010\010" +
    "\074\013\076\021\075\001\002\000\034\006\uffcb\007\uffcb" +
    "\010\uffcb\013\uffcb\014\uffcb\017\uffcb\021\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\044\uffcb\045\uffcb\001\002\000\006" +
    "\005\073\035\071\001\002\000\006\005\073\035\071\001" +
    "\002\000\006\005\073\035\071\001\002\000\034\006\uffcf" +
    "\007\uffcf\010\uffcf\013\uffcf\014\uffcf\017\uffcf\021\075\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\044\uffcf\045\uffcf\001\002" +
    "\000\034\006\uffce\007\uffce\010\uffce\013\uffce\014\uffce\017" +
    "\uffce\021\uffce\031\uffce\032\uffce\033\uffce\034\uffce\044\uffce" +
    "\045\uffce\001\002\000\010\013\076\017\102\021\075\001" +
    "\002\000\004\007\103\001\002\000\004\043\uffdb\001\002" +
    "\000\004\043\105\001\002\000\006\027\113\030\112\001" +
    "\002\000\006\006\111\043\105\001\002\000\006\006\uffd9" +
    "\043\uffd9\001\002\000\006\006\uffd8\043\uffd8\001\002\000" +
    "\010\006\uffda\012\uffda\020\uffda\001\002\000\006\005\073" +
    "\035\071\001\002\000\006\005\073\035\071\001\002\000" +
    "\012\013\076\021\075\044\116\045\115\001\002\000\004" +
    "\016\120\001\002\000\004\016\117\001\002\000\006\006" +
    "\uffd7\043\uffd7\001\002\000\006\006\uffd6\043\uffd6\001\002" +
    "\000\012\013\076\021\075\044\123\045\122\001\002\000" +
    "\004\016\125\001\002\000\004\016\124\001\002\000\006" +
    "\006\uffd5\043\uffd5\001\002\000\006\006\uffd4\043\uffd4\001" +
    "\002\000\006\036\130\037\127\001\002\000\004\010\137" +
    "\001\002\000\004\010\131\001\002\000\006\005\073\035" +
    "\071\001\002\000\006\010\134\014\135\001\002\000\012" +
    "\010\uffd0\013\076\014\uffd0\021\075\001\002\000\006\005" +
    "\073\035\071\001\002\000\034\006\uffd2\007\uffd2\010\uffd2" +
    "\013\uffd2\014\uffd2\017\uffd2\021\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\044\uffd2\045\uffd2\001\002\000\012\010\uffd1" +
    "\013\076\014\uffd1\021\075\001\002\000\006\005\073\035" +
    "\071\001\002\000\006\010\134\014\141\001\002\000\034" +
    "\006\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\017\uffd3\021" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\044\uffd3\045\uffd3" +
    "\001\002\000\010\007\143\013\076\021\075\001\002\000" +
    "\004\043\uffdd\001\002\000\004\043\105\001\002\000\006" +
    "\006\146\043\105\001\002\000\010\006\uffdc\012\uffdc\020" +
    "\uffdc\001\002\000\010\006\uffe0\012\uffe0\020\uffe0\001\002" +
    "\000\004\016\151\001\002\000\010\002\uffe2\040\uffe2\042" +
    "\uffe2\001\002\000\006\040\047\042\053\001\002\000\010" +
    "\002\uffeb\040\uffeb\042\uffeb\001\002\000\004\041\155\001" +
    "\002\000\004\007\156\001\002\000\004\004\157\001\002" +
    "\000\004\012\167\001\002\000\006\006\162\010\161\001" +
    "\002\000\004\004\164\001\002\000\004\016\163\001\002" +
    "\000\010\002\uffe6\040\uffe6\042\uffe6\001\002\000\004\012" +
    "\165\001\002\000\006\005\073\035\071\001\002\000\012" +
    "\006\uffe4\010\uffe4\013\076\021\075\001\002\000\006\005" +
    "\073\035\071\001\002\000\012\006\uffe5\010\uffe5\013\076" +
    "\021\075\001\002\000\006\040\uffea\042\uffea\001\002\000" +
    "\006\040\047\042\053\001\002\000\010\002\uffe9\040\uffe9" +
    "\042\uffe9\001\002\000\010\016\217\027\177\030\175\001" +
    "\002\000\006\005\073\035\071\001\002\000\004\010\210" +
    "\001\002\000\006\005\073\035\071\001\002\000\004\010" +
    "\201\001\002\000\006\016\202\030\175\001\002\000\010" +
    "\002\ufff1\040\ufff1\042\ufff1\001\002\000\004\016\204\001" +
    "\002\000\010\002\ufff7\040\ufff7\042\ufff7\001\002\000\012" +
    "\013\076\021\075\031\207\032\206\001\002\000\006\010" +
    "\uffef\016\uffef\001\002\000\006\010\ufff0\016\ufff0\001\002" +
    "\000\006\016\211\027\177\001\002\000\010\002\ufff4\040" +
    "\ufff4\042\ufff4\001\002\000\004\016\213\001\002\000\010" +
    "\002\ufff6\040\ufff6\042\ufff6\001\002\000\012\013\076\021" +
    "\075\033\215\034\216\001\002\000\006\010\uffee\016\uffee" +
    "\001\002\000\006\010\uffed\016\uffed\001\002\000\010\002" +
    "\ufff3\040\ufff3\042\ufff3\001\002\000\004\016\223\001\002" +
    "\000\004\016\222\001\002\000\010\002\ufff5\040\ufff5\042" +
    "\ufff5\001\002\000\010\002\ufff2\040\ufff2\042\ufff2\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\002\003\003\004\005\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\022\001\001" +
    "\000\002\001\001\000\004\005\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\027\001\001\000\002" +
    "\001\001\000\004\005\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\037\001\001\000\002\001" +
    "\001\000\006\006\043\007\042\001\001\000\006\010\177" +
    "\011\175\001\001\000\004\031\044\001\001\000\002\001" +
    "\001\000\012\012\045\013\051\017\047\020\050\001\001" +
    "\000\010\013\170\017\047\020\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\057\001\001\000\012" +
    "\023\060\024\064\025\063\026\062\001\001\000\010\024" +
    "\146\025\063\026\062\001\001\000\010\004\141\014\067" +
    "\016\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\071\014\067\016\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\100\014\067" +
    "\016\066\001\001\000\010\004\077\014\067\016\066\001" +
    "\001\000\010\004\076\014\067\016\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\103\001\001\000\006\027\105\030\106" +
    "\001\001\000\002\001\001\000\004\030\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\120\014\067\016\066\001\001\000\010\004\113\014" +
    "\067\016\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\132\014\067\015\131" +
    "\016\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\135\014\067\016\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\132\014\067\015\137\016" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\143\001\001\000\006\027\144\030" +
    "\106\001\001\000\004\030\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\152\017\047\020\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\165\014\067\016\066\001\001\000\002\001\001" +
    "\000\010\004\167\014\067\016\066\001\001\000\002\001" +
    "\001\000\004\033\171\001\001\000\010\013\172\017\047" +
    "\020\050\001\001\000\002\001\001\000\006\010\220\011" +
    "\217\001\001\000\010\004\213\014\067\016\066\001\001" +
    "\000\002\001\001\000\010\004\204\014\067\016\066\001" +
    "\001\000\002\001\001\000\004\011\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


	public class Data{
		public Integer w;
		public Integer v;
	
	public Data(Integer w, Integer v){
		this.w=w;
		this.v=v;
	}
	
	public void printD(){
		print("WEIGHT="+this.w+" VOLUME="+this.v);
	}
	}
	public class Cond{
		public Integer val;
		public Boolean flag;
		public Data d;

	public Cond(Integer val, Boolean flag, Data d){
		this.val=val;
		this.flag=flag;
		this.d=d;
	}

	}

	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}

	public Object stack(int position) {
		return (((Symbol)stack.elementAt(tos + position)).value);
	}

	public void print(Object o){
		System.out.println(o);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public HashMap<String, HashMap<String, Integer>> map = new HashMap<String, HashMap<String, Integer>>();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP execution 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok1 TOK2 S tok1 TOK2 S tok1 TOK3 S tok1 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok1 TOK2 S tok1 TOK3 S tok1 TOK2 S tok1 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok1 TOK3 S tok1 TOK2 S tok1 TOK2 S tok1 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1 ::= 
            { parser.Tree.reduce(0,"tok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1 ::= tok1 TOK1 S 
            { parser.Tree.reduce(3,"tok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Data RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=d; print("WEIGHT"+RESULT.w+" VOLUME="+RESULT.v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // execution ::= init_ NT$0 commands 
            { parser.Tree.reduce(3,"execution",0);
              Data RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Data) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // execution ::= init_ 
            { parser.Tree.reduce(1,"execution",0);
              Data RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; print("WEIGHT="+RESULT.w+" VOLUME="+RESULT.v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // init_ ::= INIT weight CM volume S 
            { parser.Tree.reduce(5,"init_",0);
              Data RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Data(w,v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // init_ ::= INIT volume CM weight S 
            { parser.Tree.reduce(5,"init_",0);
              Data RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Data(w,v);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // init_ ::= INIT CM weight S 
            { parser.Tree.reduce(4,"init_",0);
              Data RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Data(w,100);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // init_ ::= INIT volume CM S 
            { parser.Tree.reduce(4,"init_",0);
              Data RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Data(100,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // init_ ::= INIT CM S 
            { parser.Tree.reduce(3,"init_",0);
              Data RESULT =null;
		 RESULT=new Data(100, 100); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // init_ ::= INIT CM volume S 
            { parser.Tree.reduce(4,"init_",0);
              Data RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new Data(100,v);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // init_ ::= INIT weight CM S 
            { parser.Tree.reduce(4,"init_",0);
              Data RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Data(w,100);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // weight ::= WEIGHT expr G 
            { parser.Tree.reduce(3,"weight",0);
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("weight",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // weight ::= WEIGHT expr KG 
            { parser.Tree.reduce(3,"weight",0);
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=(res*1000); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("weight",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // volume ::= VOLUME expr L 
            { parser.Tree.reduce(3,"volume",0);
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("volume",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // volume ::= VOLUME expr HL 
            { parser.Tree.reduce(3,"volume",0);
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=(res*100); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("volume",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Data RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d1 = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT=d1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // commands ::= command NT$1 command 
            { parser.Tree.reduce(3,"commands",0);
              Data RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Data) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Data d1 = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d2 = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            { parser.Tree.reduce(0,"NT$2",0);
              Data RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d1 = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT=d1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // commands ::= commands command NT$2 command 
            { parser.Tree.reduce(4,"commands",0);
              Data RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Data) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Data d1 = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d2 = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= object 
            { parser.Tree.reduce(1,"command",0);
              Data RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // command ::= if 
            { parser.Tree.reduce(1,"command",0);
              Data RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c.d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // object ::= OBJECT ID ATTRIBUTES BO attrl BC S 
            { parser.Tree.reduce(7,"object",0);
              Data RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int attr_mapleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attr_mapright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Integer> attr_map = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 map.put(id, attr_map); RESULT=(Data)parser.stack(-7);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("object",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // attrl ::= ID EQ expr 
            { parser.Tree.reduce(3,"attrl",0);
              HashMap<String,Integer> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer attr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  HashMap<String, Integer> attr_map = new  HashMap<String, Integer>(); attr_map.put(id, attr); RESULT=attr_map; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attrl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attrl ::= attrl CM ID EQ expr 
            { parser.Tree.reduce(5,"attrl",0);
              HashMap<String,Integer> RESULT =null;
		int attr_mapleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int attr_mapright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Integer> attr_map = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer attr = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 attr_map.put(id, attr); RESULT=attr_map; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attrl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            { parser.Tree.reduce(0,"NT$3",0);
              Cond RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT=new Cond(map.get(var).get(attr), false, (Data)parser.stack(-5)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF ID DOT ID BO NT$3 condl BC S 
            { parser.Tree.reduce(9,"if",0);
              Cond RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Cond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int new_condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int new_condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cond new_cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new_cond; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condl ::= cond 
            { parser.Tree.reduce(1,"condl",0);
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condl ::= condl cond 
            { parser.Tree.reduce(2,"condl",0);
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= equal 
            { parser.Tree.reduce(1,"cond",0);
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.flag=false; RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= range 
            { parser.Tree.reduce(1,"cond",0);
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.flag=false; RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$4 ::= 
            { parser.Tree.reduce(0,"NT$4",0);
              Cond RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Cond c =(Cond)parser.stack(-3); if(c.val.equals(e2)) c.flag=true; RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // equal ::= EQ expr BO NT$4 actionl BC 
            { parser.Tree.reduce(6,"equal",0);
              Cond RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Cond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int new_condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int new_condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cond new_cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new_cond; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$5 ::= 
            { parser.Tree.reduce(0,"NT$5",0);
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 Cond c =(Cond)parser.stack(-6); if(c.val>=e1 && c.val<=e2) c.flag=true;  		  RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // range ::= SO expr CM expr SC BO NT$5 actionl BC 
            { parser.Tree.reduce(9,"range",0);
              Cond RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Cond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int new_condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int new_condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cond new_cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new_cond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // actionl ::= action_ 
            { parser.Tree.reduce(1,"actionl",0);
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // actionl ::= actionl action_ 
            { parser.Tree.reduce(2,"actionl",0);
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // action_ ::= MOD WEIGHT expr ADD S 
            { parser.Tree.reduce(5,"action_",0);
              Cond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Cond c = (Cond)parser.stack(-5); if(c.flag){ c.d.w+=v; 
		c.d.printD(); }	RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // action_ ::= MOD WEIGHT expr SUB S 
            { parser.Tree.reduce(5,"action_",0);
              Cond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Cond c = (Cond)parser.stack(-5); if(c.flag){ c.d.w-=v; 
		c.d.printD(); } RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // action_ ::= MOD VOLUME expr ADD S 
            { parser.Tree.reduce(5,"action_",0);
              Cond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Cond c = (Cond)parser.stack(-5); if(c.flag){ c.d.v+=v; 
		c.d.printD(); } RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // action_ ::= MOD VOLUME expr SUB S 
            { parser.Tree.reduce(5,"action_",0);
              Cond RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Cond c = (Cond)parser.stack(-5); if(c.flag){ c.d.v-=v; 
		c.d.printD(); } RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fz ::= FZ RO MIN CM exprl RC 
            { parser.Tree.reduce(6,"fz",0);
              Integer RESULT =null;
		int minmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] minmax = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=minmax[0]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fz",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fz ::= FZ RO MAX CM exprl RC 
            { parser.Tree.reduce(6,"fz",0);
              Integer RESULT =null;
		int minmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] minmax = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=minmax[1]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fz",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprl ::= exprl CM expr 
            { parser.Tree.reduce(3,"exprl",0);
              Integer[] RESULT =null;
		int minmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int minmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] minmax = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(minmax[0]>v) minmax[0]=v; else if(minmax[1]<v) minmax[1]=v; RESULT=minmax;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprl ::= expr 
            { parser.Tree.reduce(1,"exprl",0);
              Integer[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Integer[2]; RESULT[0]=v; RESULT[1]=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr STAR expr 
            { parser.Tree.reduce(3,"expr",0);
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1 * e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= num 
            { parser.Tree.reduce(1,"expr",0);
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= fz 
            { parser.Tree.reduce(1,"expr",0);
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // num ::= INT 
            { parser.Tree.reduce(1,"num",0);
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
