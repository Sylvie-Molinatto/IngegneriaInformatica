// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;

//jflex scanner.jflex; java java_cup.MainDrawTree parser.cup;javac *.java;java Main example.txt

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\2\0"+
    "\1\5\1\6\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\0\1\34\1\0\1\35\1\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\2\50\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\50\1\64\1\65\1\0"+
    "\1\66\1\0\1\67\1\0\1\70\1\71\2\72\1\73"+
    "\1\72\1\74\1\75\2\67\1\76\1\77\1\67\1\100"+
    "\1\67\1\101\1\67\1\102\10\67\1\103\1\0\1\104"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\1\12\14\1\15"+
    "\1\16\1\17\2\14\1\20\1\21\1\22\6\0\1\11"+
    "\1\0\1\23\1\0\1\23\2\0\3\14\1\24\1\25"+
    "\10\14\1\0\1\26\1\27\6\0\1\11\1\23\1\0"+
    "\4\23\2\0\1\14\1\30\2\14\1\31\1\32\1\33"+
    "\1\14\1\34\2\14\1\0\1\35\5\0\1\11\2\0"+
    "\2\14\1\36\3\14\7\0\1\11\1\23\5\14\7\0"+
    "\1\11\2\14\1\37\1\40\1\41\7\0\1\11\2\14"+
    "\2\0\1\11\1\14\2\0\1\14\3\0\1\42\13\0"+
    "\1\43\15\0\1\43\1\44\51\0\1\43\5\0\1\43"+
    "\211\0\1\43\2\0\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\105\0\212\0\317\0\u0114\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\u0159\0\u019e\0\105\0\105"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\105\0\u02f7\0\u051f\0\u0564"+
    "\0\u02f7\0\105\0\105\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5"+
    "\0\u092a\0\u096f\0\u09b4\0\u02f7\0\u02f7\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u02f7\0\u02f7"+
    "\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49"+
    "\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071"+
    "\0\u1071\0\u10b6\0\u10fb\0\u02f7\0\u02f7\0\u02f7\0\u1140\0\u02f7"+
    "\0\u1185\0\u11ca\0\u120f\0\105\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u02f7\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u02f7\0\u02f7\0\u02f7\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u216c\0\u02f7\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u2829\0\u286e\0\105\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405"+
    "\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d"+
    "\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5"+
    "\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd"+
    "\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5"+
    "\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d"+
    "\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545"+
    "\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d"+
    "\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995"+
    "\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd"+
    "\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5"+
    "\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d"+
    "\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u5235"+
    "\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418\0\u545d"+
    "\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685"+
    "\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad"+
    "\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5"+
    "\0\u5b1a\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\2\1\15"+
    "\11\16\1\2\1\17\1\20\1\21\1\22\4\23\1\24"+
    "\2\25\1\26\3\25\1\27\1\25\1\30\1\25\1\31"+
    "\2\25\1\32\1\33\2\25\1\34\1\35\1\25\4\23"+
    "\1\36\1\37\1\40\1\41\3\25\1\42\1\43\107\0"+
    "\1\3\107\0\1\44\135\0\1\45\4\0\1\46\3\0"+
    "\1\47\2\0\1\50\52\0\12\51\4\0\6\51\24\0"+
    "\4\51\31\0\12\52\4\0\6\51\24\0\4\51\26\0"+
    "\1\53\3\0\1\54\1\55\1\56\1\57\1\56\1\57"+
    "\1\56\1\57\1\56\4\0\27\60\40\0\12\61\4\0"+
    "\3\61\1\62\2\61\13\25\1\63\5\25\2\0\1\25"+
    "\4\61\7\25\22\0\12\61\4\0\6\61\21\25\2\0"+
    "\1\25\4\61\7\25\22\0\12\61\4\0\6\61\20\25"+
    "\1\64\2\0\1\25\4\61\7\25\22\0\12\25\4\0"+
    "\27\25\2\0\14\25\22\0\12\25\4\0\5\25\1\65"+
    "\7\25\1\66\11\25\2\0\14\25\22\0\12\25\4\0"+
    "\1\67\7\25\1\70\5\25\1\71\10\25\2\0\14\25"+
    "\22\0\12\25\4\0\1\25\1\72\25\25\2\0\14\25"+
    "\22\0\12\25\4\0\22\25\1\73\4\25\2\0\14\25"+
    "\22\0\12\25\4\0\16\25\1\74\10\25\2\0\14\25"+
    "\22\0\12\25\4\0\4\25\1\75\22\25\2\0\14\25"+
    "\67\0\1\76\37\0\12\25\4\0\27\25\2\0\10\25"+
    "\1\77\3\25\22\0\12\25\4\0\27\25\2\0\5\25"+
    "\1\100\6\25\7\0\1\101\200\0\1\102\76\0\1\103"+
    "\101\0\1\104\104\0\1\105\34\0\12\106\4\0\6\106"+
    "\24\0\4\106\31\0\12\107\4\0\6\106\24\0\4\106"+
    "\32\0\1\110\1\111\1\112\1\0\1\113\1\0\1\113"+
    "\1\0\1\113\66\0\1\114\1\0\1\115\2\0\1\57"+
    "\1\56\1\57\1\56\1\57\1\56\1\57\1\56\1\57"+
    "\1\56\73\0\1\57\1\56\1\57\1\56\1\116\1\110"+
    "\1\111\1\110\1\111\1\110\66\0\1\114\1\0\1\115"+
    "\2\0\1\111\1\110\1\111\1\110\1\111\1\110\1\111"+
    "\1\110\1\111\1\110\73\0\1\111\1\110\1\111\1\110"+
    "\1\111\1\110\1\111\1\110\1\111\1\110\111\0\27\117"+
    "\40\0\12\120\4\0\6\120\21\25\2\0\1\25\4\120"+
    "\7\25\22\0\12\120\4\0\3\120\1\121\2\120\21\25"+
    "\2\0\1\25\4\120\7\25\22\0\12\25\4\0\21\25"+
    "\1\122\5\25\2\0\14\25\22\0\12\25\4\0\10\25"+
    "\1\123\16\25\2\0\14\25\22\0\12\25\4\0\25\25"+
    "\1\124\1\25\2\0\14\25\22\0\12\25\4\0\15\25"+
    "\1\125\11\25\2\0\14\25\22\0\12\25\4\0\3\25"+
    "\1\126\23\25\2\0\14\25\22\0\12\25\4\0\11\25"+
    "\1\127\15\25\2\0\14\25\22\0\12\25\4\0\1\25"+
    "\1\130\25\25\2\0\14\25\22\0\12\25\4\0\13\25"+
    "\1\131\13\25\2\0\14\25\22\0\12\25\4\0\10\25"+
    "\1\132\16\25\2\0\14\25\17\0\1\133\74\0\1\134"+
    "\201\0\1\135\73\0\1\136\113\0\1\137\106\0\1\140"+
    "\22\0\12\141\4\0\6\141\24\0\4\141\31\0\12\142"+
    "\4\0\6\141\24\0\4\141\24\0\1\114\1\0\1\115"+
    "\3\0\1\113\1\0\1\113\1\0\1\113\1\0\1\113"+
    "\1\0\1\113\74\0\1\113\1\0\1\113\1\0\1\113"+
    "\1\0\1\113\1\0\1\113\66\0\1\114\1\0\1\115"+
    "\3\0\1\113\1\0\1\113\1\0\1\113\1\0\1\113"+
    "\70\0\1\114\1\0\1\115\104\0\1\115\102\0\1\114"+
    "\111\0\1\111\1\110\1\143\1\113\1\0\1\113\1\0"+
    "\1\113\1\0\1\113\111\0\27\144\40\0\12\145\4\0"+
    "\6\145\21\25\2\0\1\25\4\145\7\25\22\0\12\25"+
    "\4\0\17\25\1\146\7\25\2\0\14\25\22\0\12\25"+
    "\4\0\21\25\1\147\5\25\2\0\14\25\22\0\12\25"+
    "\4\0\4\25\1\150\22\25\2\0\14\25\22\0\12\25"+
    "\4\0\22\25\1\151\4\25\2\0\14\25\22\0\12\25"+
    "\4\0\6\25\1\152\20\25\2\0\14\25\2\0\15\133"+
    "\1\153\67\133\16\0\1\154\104\0\1\155\104\0\1\156"+
    "\104\0\1\157\74\0\2\160\2\0\1\160\5\0\12\161"+
    "\4\0\6\161\24\0\4\161\17\0\2\160\2\0\1\160"+
    "\5\0\12\162\4\0\6\161\24\0\4\161\32\0\1\113"+
    "\1\0\1\113\1\0\1\113\115\0\27\163\26\0\2\160"+
    "\2\0\1\160\5\0\12\164\4\0\6\164\21\25\2\0"+
    "\1\25\4\164\7\25\22\0\12\25\4\0\10\25\1\165"+
    "\16\25\2\0\14\25\22\0\12\25\4\0\2\25\1\166"+
    "\24\25\2\0\14\25\22\0\12\25\4\0\14\25\1\167"+
    "\12\25\2\0\14\25\22\0\12\25\4\0\7\25\1\170"+
    "\17\25\2\0\14\25\2\0\15\133\1\153\50\133\1\171"+
    "\16\133\17\0\1\172\104\0\1\173\104\0\1\174\104\0"+
    "\1\175\105\0\12\176\4\0\6\176\24\0\4\176\31\0"+
    "\12\177\4\0\6\177\24\0\4\177\31\0\12\200\4\0"+
    "\6\177\24\0\4\177\24\0\1\114\1\0\1\115\20\0"+
    "\27\144\40\0\12\201\4\0\6\201\21\25\2\0\1\25"+
    "\4\201\7\25\22\0\12\25\4\0\1\25\1\202\25\25"+
    "\2\0\14\25\22\0\12\25\4\0\21\25\1\203\5\25"+
    "\2\0\14\25\22\0\12\25\4\0\4\25\1\204\22\25"+
    "\2\0\14\25\22\0\12\25\4\0\21\25\1\205\5\25"+
    "\2\0\14\25\2\0\15\133\1\153\50\133\1\3\16\133"+
    "\20\0\1\206\1\207\1\210\102\0\1\206\2\207\102\0"+
    "\1\211\2\207\1\212\101\0\1\206\2\207\1\212\101\0"+
    "\12\213\4\0\6\213\24\0\4\213\31\0\12\214\4\0"+
    "\6\214\24\0\4\214\31\0\12\215\4\0\6\214\24\0"+
    "\4\214\31\0\12\216\4\0\6\216\21\25\2\0\1\25"+
    "\4\216\7\25\22\0\12\25\4\0\22\25\1\217\4\25"+
    "\2\0\14\25\23\0\11\220\73\0\12\220\73\0\4\220"+
    "\112\0\1\220\73\0\2\220\103\0\12\221\4\0\6\221"+
    "\24\0\4\221\17\0\2\160\2\0\1\160\100\0\2\160"+
    "\2\0\1\160\5\0\12\222\61\0\2\160\2\0\1\160"+
    "\5\0\12\25\4\0\27\25\2\0\14\25\22\0\12\25"+
    "\4\0\21\25\1\223\5\25\2\0\14\25\21\0\1\224"+
    "\105\0\12\225\4\0\6\225\24\0\4\225\31\0\12\222"+
    "\73\0\12\25\4\0\4\25\1\226\22\25\2\0\14\25"+
    "\24\0\1\227\70\0\2\230\2\0\1\230\5\0\12\231"+
    "\4\0\6\231\24\0\4\231\31\0\12\25\4\0\20\25"+
    "\1\232\6\25\2\0\14\25\22\0\1\233\104\0\12\234"+
    "\4\0\6\234\24\0\4\234\31\0\12\235\4\0\6\235"+
    "\24\0\4\235\33\0\1\236\102\0\12\237\4\0\6\237"+
    "\24\0\4\237\31\0\12\240\4\0\6\240\24\0\4\240"+
    "\31\0\1\241\104\0\12\242\4\0\6\242\24\0\4\242"+
    "\17\0\2\230\2\0\1\230\112\0\1\243\1\244\10\0"+
    "\1\245\72\0\12\246\4\0\6\246\24\0\4\246\41\0"+
    "\1\247\1\250\73\0\10\250\1\251\74\0\1\243\1\244"+
    "\71\0\2\252\2\0\1\252\5\0\12\253\4\0\6\253"+
    "\24\0\4\253\43\0\1\254\104\0\1\255\104\0\1\256"+
    "\72\0\12\257\4\0\6\257\24\0\4\257\31\0\12\260"+
    "\4\0\6\260\24\0\4\260\32\0\5\261\77\0\6\261"+
    "\77\0\3\261\1\262\101\0\12\263\4\0\6\263\24\0"+
    "\4\263\31\0\12\264\4\0\6\264\24\0\4\264\31\0"+
    "\12\265\73\0\3\265\102\0\12\266\4\0\6\266\24\0"+
    "\4\266\17\0\2\252\2\0\1\252\112\0\12\267\4\0"+
    "\6\267\24\0\4\267\17\0\2\270\2\0\1\270\5\0"+
    "\12\271\4\0\6\271\24\0\4\271\31\0\12\272\4\0"+
    "\6\272\24\0\4\272\31\0\12\273\4\0\6\273\24\0"+
    "\4\273\31\0\12\274\4\0\6\274\24\0\4\274\31\0"+
    "\12\275\4\0\6\275\24\0\4\275\31\0\12\276\4\0"+
    "\6\276\24\0\4\276\17\0\2\270\2\0\1\270\112\0"+
    "\12\277\4\0\6\277\24\0\4\277\17\0\2\300\2\0"+
    "\1\300\5\0\12\301\4\0\6\301\24\0\4\301\31\0"+
    "\12\302\4\0\6\302\24\0\4\302\31\0\12\303\4\0"+
    "\6\303\24\0\4\303\31\0\12\304\4\0\6\304\24\0"+
    "\4\304\31\0\12\305\4\0\6\305\24\0\4\305\31\0"+
    "\12\306\4\0\6\306\24\0\4\306\17\0\2\300\2\0"+
    "\1\300\112\0\12\307\4\0\6\307\24\0\4\307\17\0"+
    "\2\310\2\0\1\310\5\0\12\311\4\0\6\311\24\0"+
    "\4\311\31\0\12\312\4\0\6\312\24\0\4\312\31\0"+
    "\12\313\4\0\6\313\24\0\4\313\31\0\12\314\4\0"+
    "\6\314\24\0\4\314\31\0\12\315\4\0\6\315\24\0"+
    "\4\315\31\0\12\316\4\0\6\316\24\0\4\316\17\0"+
    "\2\310\2\0\1\310\112\0\12\317\4\0\6\317\24\0"+
    "\4\317\17\0\2\320\2\0\1\320\5\0\12\321\4\0"+
    "\6\321\24\0\4\321\31\0\12\322\4\0\6\322\24\0"+
    "\4\322\31\0\12\323\4\0\6\323\24\0\4\323\31\0"+
    "\12\324\4\0\6\324\24\0\4\324\31\0\12\325\4\0"+
    "\6\325\24\0\4\325\31\0\12\326\4\0\6\326\24\0"+
    "\4\326\17\0\2\320\2\0\1\320\112\0\12\327\4\0"+
    "\6\327\24\0\4\327\17\0\2\330\2\0\1\330\5\0"+
    "\12\331\4\0\6\331\24\0\4\331\31\0\12\332\4\0"+
    "\6\332\24\0\4\332\31\0\12\333\4\0\6\333\24\0"+
    "\4\333\31\0\12\334\4\0\6\334\24\0\4\334\31\0"+
    "\12\335\4\0\6\335\24\0\4\335\31\0\12\336\4\0"+
    "\6\336\24\0\4\336\17\0\2\330\2\0\1\330\112\0"+
    "\12\337\4\0\6\337\24\0\4\337\17\0\2\340\2\0"+
    "\1\340\5\0\12\341\4\0\6\341\24\0\4\341\31\0"+
    "\12\342\4\0\6\342\24\0\4\342\31\0\12\343\4\0"+
    "\6\343\24\0\4\343\31\0\12\344\4\0\6\344\24\0"+
    "\4\344\31\0\12\345\4\0\6\345\24\0\4\345\31\0"+
    "\12\346\4\0\6\346\24\0\4\346\17\0\2\340\2\0"+
    "\1\340\112\0\12\347\4\0\6\347\24\0\4\347\17\0"+
    "\2\350\2\0\1\350\5\0\12\351\4\0\6\351\24\0"+
    "\4\351\31\0\12\352\4\0\6\352\24\0\4\352\31\0"+
    "\12\353\4\0\6\353\24\0\4\353\31\0\12\354\4\0"+
    "\6\354\24\0\4\354\31\0\12\355\4\0\6\355\24\0"+
    "\4\355\31\0\12\356\4\0\6\356\24\0\4\356\17\0"+
    "\2\350\2\0\1\350\112\0\12\357\4\0\6\357\24\0"+
    "\4\357\17\0\2\360\2\0\1\360\5\0\12\361\4\0"+
    "\6\361\24\0\4\361\31\0\12\362\4\0\6\362\24\0"+
    "\4\362\31\0\12\363\4\0\6\363\24\0\4\363\31\0"+
    "\12\364\4\0\6\364\24\0\4\364\31\0\12\365\4\0"+
    "\6\365\24\0\4\365\31\0\12\366\4\0\6\366\24\0"+
    "\4\366\17\0\2\360\2\0\1\360\112\0\12\367\4\0"+
    "\6\367\24\0\4\367\17\0\2\370\2\0\1\370\5\0"+
    "\12\371\4\0\6\371\24\0\4\371\31\0\12\372\4\0"+
    "\6\372\24\0\4\372\31\0\12\373\4\0\6\373\24\0"+
    "\4\373\31\0\12\374\4\0\6\374\24\0\4\374\31\0"+
    "\12\375\4\0\6\375\24\0\4\375\31\0\12\376\4\0"+
    "\6\376\24\0\4\376\17\0\2\370\2\0\1\370\112\0"+
    "\12\377\4\0\6\377\24\0\4\377\17\0\2\u0100\2\0"+
    "\1\u0100\5\0\12\u0101\4\0\6\u0101\24\0\4\u0101\31\0"+
    "\12\u0102\4\0\6\u0102\24\0\4\u0102\31\0\12\u0103\4\0"+
    "\6\u0103\24\0\4\u0103\31\0\12\u0104\4\0\6\u0104\24\0"+
    "\4\u0104\31\0\12\u0105\4\0\6\u0105\24\0\4\u0105\31\0"+
    "\12\u0106\4\0\6\u0106\24\0\4\u0106\17\0\2\u0100\2\0"+
    "\1\u0100\112\0\12\u0107\4\0\6\u0107\24\0\4\u0107\17\0"+
    "\2\u0108\2\0\1\u0108\5\0\12\u0109\4\0\6\u0109\24\0"+
    "\4\u0109\31\0\12\u010a\4\0\6\u010a\24\0\4\u010a\31\0"+
    "\12\u010b\4\0\6\u010b\24\0\4\u010b\31\0\12\u010c\4\0"+
    "\6\u010c\24\0\4\u010c\31\0\12\u010d\4\0\6\u010d\24\0"+
    "\4\u010d\31\0\12\u010e\4\0\6\u010e\24\0\4\u010e\17\0"+
    "\2\u0108\2\0\1\u0108\112\0\12\u010f\4\0\6\u010f\24\0"+
    "\4\u010f\17\0\2\u0110\2\0\1\u0110\5\0\12\u0111\4\0"+
    "\6\u0111\24\0\4\u0111\31\0\12\u0112\4\0\6\u0112\24\0"+
    "\4\u0112\31\0\12\u0113\4\0\6\u0113\24\0\4\u0113\31\0"+
    "\12\u0114\4\0\6\u0114\24\0\4\u0114\31\0\12\u0115\4\0"+
    "\6\u0115\24\0\4\u0115\31\0\12\u0116\4\0\6\u0116\24\0"+
    "\4\u0116\17\0\2\u0110\2\0\1\u0110\112\0\12\u0117\4\0"+
    "\6\u0117\24\0\4\u0117\17\0\2\u0118\2\0\1\u0118\5\0"+
    "\12\u0119\4\0\6\u0119\24\0\4\u0119\31\0\12\u011a\4\0"+
    "\6\u011a\24\0\4\u011a\31\0\12\u011b\4\0\6\u011b\24\0"+
    "\4\u011b\31\0\12\u011c\4\0\6\u011c\24\0\4\u011c\31\0"+
    "\12\u011d\4\0\6\u011d\24\0\4\u011d\31\0\12\u011e\4\0"+
    "\6\u011e\24\0\4\u011e\17\0\2\u0118\2\0\1\u0118\112\0"+
    "\12\u011f\4\0\6\u011f\24\0\4\u011f\17\0\2\u0120\2\0"+
    "\1\u0120\5\0\12\u0121\4\0\6\u0121\24\0\4\u0121\31\0"+
    "\12\u0122\4\0\6\u0122\24\0\4\u0122\31\0\12\u0123\4\0"+
    "\6\u0123\24\0\4\u0123\31\0\12\u0124\4\0\6\u0124\24\0"+
    "\4\u0124\31\0\12\u0125\4\0\6\u0125\24\0\4\u0125\31\0"+
    "\12\u0126\4\0\6\u0126\24\0\4\u0126\17\0\2\u0120\2\0"+
    "\1\u0120\112\0\12\u0127\4\0\6\u0127\24\0\4\u0127\17\0"+
    "\2\u0128\2\0\1\u0128\5\0\12\u0129\4\0\6\u0129\24\0"+
    "\4\u0129\31\0\12\u012a\4\0\6\u012a\24\0\4\u012a\31\0"+
    "\12\u012b\4\0\6\u012b\24\0\4\u012b\31\0\12\u012c\4\0"+
    "\6\u012c\24\0\4\u012c\31\0\12\u012d\4\0\6\u012d\24\0"+
    "\4\u012d\31\0\12\u012e\4\0\6\u012e\24\0\4\u012e\17\0"+
    "\2\u0128\2\0\1\u0128\112\0\12\u012f\4\0\6\u012f\24\0"+
    "\4\u012f\17\0\2\u0130\2\0\1\u0130\5\0\12\u0131\4\0"+
    "\6\u0131\24\0\4\u0131\31\0\12\u0132\4\0\6\u0132\24\0"+
    "\4\u0132\31\0\12\u0133\4\0\6\u0133\24\0\4\u0133\31\0"+
    "\12\u0134\4\0\6\u0134\24\0\4\u0134\31\0\12\u0135\4\0"+
    "\6\u0135\24\0\4\u0135\31\0\12\u0136\4\0\6\u0136\24\0"+
    "\4\u0136\17\0\2\u0130\2\0\1\u0130\112\0\12\u0137\4\0"+
    "\6\u0137\24\0\4\u0137\17\0\2\u0138\2\0\1\u0138\5\0"+
    "\12\u0139\4\0\6\u0139\24\0\4\u0139\31\0\12\u013a\4\0"+
    "\6\u013a\24\0\4\u013a\31\0\12\u013b\4\0\6\u013b\24\0"+
    "\4\u013b\31\0\12\u013c\4\0\6\u013c\24\0\4\u013c\31\0"+
    "\12\u013d\4\0\6\u013d\24\0\4\u013d\31\0\12\u013e\4\0"+
    "\6\u013e\24\0\4\u013e\17\0\2\u0138\2\0\1\u0138\112\0"+
    "\12\u013f\4\0\6\u013f\24\0\4\u013f\17\0\2\u0140\2\0"+
    "\1\u0140\5\0\12\u0141\4\0\6\u0141\24\0\4\u0141\31\0"+
    "\12\u0142\4\0\6\u0142\24\0\4\u0142\31\0\12\u0143\4\0"+
    "\6\u0143\24\0\4\u0143\31\0\12\u0144\4\0\6\u0144\24\0"+
    "\4\u0144\31\0\12\u0145\4\0\6\u0145\24\0\4\u0145\31\0"+
    "\12\u0146\4\0\6\u0146\24\0\4\u0146\17\0\2\u0140\2\0"+
    "\1\u0140\112\0\12\u0147\4\0\6\u0147\24\0\4\u0147\17\0"+
    "\2\u0148\2\0\1\u0148\5\0\12\u0149\4\0\6\u0149\24\0"+
    "\4\u0149\31\0\12\u014a\4\0\6\u014a\24\0\4\u014a\31\0"+
    "\12\u014b\4\0\6\u014b\24\0\4\u014b\31\0\12\u014c\4\0"+
    "\6\u014c\24\0\4\u014c\31\0\12\u014d\4\0\6\u014d\24\0"+
    "\4\u014d\31\0\12\u014e\4\0\6\u014e\24\0\4\u014e\17\0"+
    "\2\u0148\2\0\1\u0148\112\0\12\u014f\4\0\6\u014f\24\0"+
    "\4\u014f\17\0\2\u0150\2\0\1\u0150\5\0\12\u0151\4\0"+
    "\6\u0151\24\0\4\u0151\31\0\12\u0152\4\0\6\u0152\24\0"+
    "\4\u0152\31\0\12\u0153\4\0\6\u0153\24\0\4\u0153\31\0"+
    "\12\u0154\4\0\6\u0154\24\0\4\u0154\31\0\12\u0155\4\0"+
    "\6\u0155\24\0\4\u0155\31\0\12\u0156\4\0\6\u0156\24\0"+
    "\4\u0156\17\0\2\u0150\2\0\1\u0150\112\0\12\u0157\4\0"+
    "\6\u0157\24\0\4\u0157\17\0\2\u0158\2\0\1\u0158\5\0"+
    "\12\u0159\4\0\6\u0159\24\0\4\u0159\31\0\12\u015a\4\0"+
    "\6\u015a\24\0\4\u015a\31\0\12\u015b\4\0\6\u015b\24\0"+
    "\4\u015b\31\0\12\u015c\4\0\6\u015c\24\0\4\u015c\31\0"+
    "\12\u015d\4\0\6\u015d\24\0\4\u015d\31\0\12\u015e\4\0"+
    "\6\u015e\24\0\4\u015e\17\0\2\u0158\2\0\1\u0158\112\0"+
    "\12\u015f\4\0\6\u015f\24\0\4\u015f\17\0\2\u0160\2\0"+
    "\1\u0160\5\0\12\u0161\4\0\6\u0161\24\0\4\u0161\31\0"+
    "\12\u0162\4\0\6\u0162\24\0\4\u0162\31\0\12\u0163\4\0"+
    "\6\u0163\24\0\4\u0163\31\0\12\u0164\4\0\6\u0164\24\0"+
    "\4\u0164\31\0\12\u0165\4\0\6\u0165\24\0\4\u0165\31\0"+
    "\12\u0166\4\0\6\u0166\24\0\4\u0166\17\0\2\u0160\2\0"+
    "\1\u0160\112\0\12\u0167\4\0\6\u0167\24\0\4\u0167\17\0"+
    "\2\u0168\2\0\1\u0168\5\0\12\u0169\4\0\6\u0169\24\0"+
    "\4\u0169\31\0\12\u016a\4\0\6\u016a\24\0\4\u016a\31\0"+
    "\12\u016b\4\0\6\u016b\24\0\4\u016b\31\0\12\u016c\4\0"+
    "\6\u016c\24\0\4\u016c\31\0\12\u016d\4\0\6\u016d\24\0"+
    "\4\u016d\31\0\12\u016e\4\0\6\u016e\24\0\4\u016e\17\0"+
    "\2\u0168\2\0\1\u0168\112\0\12\u016f\4\0\6\u016f\24\0"+
    "\4\u016f\31\0\12\u0170\4\0\6\u0170\24\0\4\u0170\31\0"+
    "\12\u0171\4\0\6\u0171\24\0\4\u0171\31\0\12\u0172\4\0"+
    "\6\u0172\24\0\4\u0172\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23391];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\6\11\2\1\2\11\14\1\1\11"+
    "\4\1\2\11\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\15\1\1\0\2\1\6\0\2\1\1\0\4\1"+
    "\2\0\13\1\1\0\1\11\5\0\1\1\2\0\6\1"+
    "\7\0\7\1\7\0\6\1\7\0\3\1\2\0\2\1"+
    "\2\0\1\1\3\0\1\1\13\0\1\1\15\0\1\1"+
    "\1\11\51\0\1\1\5\0\1\1\211\0\1\1\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
	    return new Symbol(type, yyline, yycolumn);
	}
	private Symbol sym(int type, Object value){
	    return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner error: " + yytext());
            }
            // fall through
          case 37: break;
          case 2:
            { ;
            }
            // fall through
          case 38: break;
          case 3:
            { return sym(sym.RO);
            }
            // fall through
          case 39: break;
          case 4:
            { return sym(sym.RC);
            }
            // fall through
          case 40: break;
          case 5:
            { return sym(sym.STAR);
            }
            // fall through
          case 41: break;
          case 6:
            { return sym(sym.PLUS);
            }
            // fall through
          case 42: break;
          case 7:
            { return sym(sym.CM);
            }
            // fall through
          case 43: break;
          case 8:
            { return sym(sym.DOT);
            }
            // fall through
          case 44: break;
          case 9:
            { return sym(sym.UINT,new Integer(yytext()));
            }
            // fall through
          case 45: break;
          case 10:
            { return sym(sym.S);
            }
            // fall through
          case 46: break;
          case 11:
            { return sym(sym.EQ);
            }
            // fall through
          case 47: break;
          case 12:
            { return sym(sym.ID, new String(yytext()));
            }
            // fall through
          case 48: break;
          case 13:
            { return sym(sym.SO);
            }
            // fall through
          case 49: break;
          case 14:
            { return sym(sym.SC);
            }
            // fall through
          case 50: break;
          case 15:
            { return sym(sym.GRAMS);
            }
            // fall through
          case 51: break;
          case 16:
            { return sym(sym.LITERS);
            }
            // fall through
          case 52: break;
          case 17:
            { return sym(sym.BO);
            }
            // fall through
          case 53: break;
          case 18:
            { return sym(sym.BC);
            }
            // fall through
          case 54: break;
          case 19:
            { return sym(sym.TK2);
            }
            // fall through
          case 55: break;
          case 20:
            { return sym(sym.FZ);
            }
            // fall through
          case 56: break;
          case 21:
            { return sym(sym.IF);
            }
            // fall through
          case 57: break;
          case 22:
            { return sym(sym.HECTOLITERS);
            }
            // fall through
          case 58: break;
          case 23:
            { return sym(sym.KILOGRAMS);
            }
            // fall through
          case 59: break;
          case 24:
            { return sym(sym.ADD);
            }
            // fall through
          case 60: break;
          case 25:
            { return sym(sym.MAX);
            }
            // fall through
          case 61: break;
          case 26:
            { return sym(sym.MIN);
            }
            // fall through
          case 62: break;
          case 27:
            { return sym(sym.MOD);
            }
            // fall through
          case 63: break;
          case 28:
            { return sym(sym.SUB);
            }
            // fall through
          case 64: break;
          case 29:
            { return sym(sym.SEP);
            }
            // fall through
          case 65: break;
          case 30:
            { return sym(sym.INIT);
            }
            // fall through
          case 66: break;
          case 31:
            { return sym(sym.OBJECT);
            }
            // fall through
          case 67: break;
          case 32:
            { return sym(sym.VOLUME);
            }
            // fall through
          case 68: break;
          case 33:
            { return sym(sym.WEIGHT);
            }
            // fall through
          case 69: break;
          case 34:
            { return sym(sym.ATTRIBUTES);
            }
            // fall through
          case 70: break;
          case 35:
            { return sym(sym.TK1);
            }
            // fall through
          case 71: break;
          case 36:
            { return sym(sym.TK3);
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
