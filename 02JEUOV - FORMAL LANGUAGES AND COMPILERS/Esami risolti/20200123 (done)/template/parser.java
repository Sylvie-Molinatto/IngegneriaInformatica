
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\005\000\002\003" +
    "\014\000\002\003\014\000\002\003\014\000\002\004\005" +
    "\000\002\004\002\000\002\005\004\000\002\006\007\000" +
    "\002\006\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\002\000\002\024\005\000\002\021\003\000\002\021" +
    "\003\000\002\025\005\000\002\022\003\000\002\022\003" +
    "\000\002\007\005\000\002\007\002\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\023\010\000\002" +
    "\023\010\000\002\026\005\000\002\026\003\000\002\016" +
    "\011\000\002\016\012\000\002\011\005\000\002\011\003" +
    "\000\002\010\005\000\002\017\004\000\002\017\003\000" +
    "\002\012\006\000\002\013\004\000\002\013\007\000\002" +
    "\014\004\000\002\014\003\000\002\015\007\000\002\015" +
    "\007\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\004\ufffb\005\ufffb\006\ufffb\001\002\000" +
    "\004\002\175\001\002\000\004\007\041\001\002\000\010" +
    "\004\011\005\010\006\007\001\002\000\004\010\031\001" +
    "\002\000\004\010\013\001\002\000\004\010\012\001\002" +
    "\000\012\004\ufffc\005\ufffc\006\ufffc\007\ufffc\001\002\000" +
    "\010\004\ufffb\005\ufffb\006\ufffb\001\002\000\010\004\011" +
    "\005\016\006\015\001\002\000\004\010\024\001\002\000" +
    "\004\010\017\001\002\000\006\004\ufffb\006\ufffb\001\002" +
    "\000\006\004\011\006\021\001\002\000\004\010\022\001" +
    "\002\000\006\004\ufffb\007\ufffb\001\002\000\006\004\011" +
    "\007\uffff\001\002\000\006\004\ufffb\005\ufffb\001\002\000" +
    "\006\004\011\005\026\001\002\000\004\010\027\001\002" +
    "\000\006\004\ufffb\007\ufffb\001\002\000\006\004\011\007" +
    "\ufffe\001\002\000\006\004\ufffb\005\ufffb\001\002\000\006" +
    "\004\011\005\033\001\002\000\004\010\034\001\002\000" +
    "\006\004\ufffb\005\ufffb\001\002\000\006\004\011\005\036" +
    "\001\002\000\004\010\037\001\002\000\006\004\ufffb\007" +
    "\ufffb\001\002\000\006\004\011\007\ufffd\001\002\000\012" +
    "\002\ufff5\011\043\027\ufff5\043\ufff5\001\002\000\004\002" +
    "\000\001\002\000\006\012\153\016\151\001\002\000\010" +
    "\002\uffed\027\uffed\043\uffed\001\002\000\010\002\ufffa\027" +
    "\046\043\050\001\002\000\004\044\135\001\002\000\006" +
    "\027\046\043\050\001\002\000\004\044\051\001\002\000" +
    "\004\031\052\001\002\000\004\044\053\001\002\000\004" +
    "\033\054\001\002\000\006\032\055\035\061\001\002\000" +
    "\006\042\062\045\063\001\002\000\010\032\uffdf\034\uffdf" +
    "\035\uffdf\001\002\000\004\033\113\001\002\000\010\032" +
    "\055\034\111\035\061\001\002\000\006\042\062\045\063" +
    "\001\002\000\004\023\074\001\002\000\034\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea" +
    "\033\uffea\034\uffea\036\uffea\040\uffea\041\uffea\001\002\000" +
    "\010\013\066\021\067\022\065\001\002\000\006\042\062" +
    "\045\063\001\002\000\006\042\062\045\063\001\002\000" +
    "\006\042\062\045\063\001\002\000\034\013\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\021\uffec\022\065\024\uffec\033" +
    "\uffec\034\uffec\036\uffec\040\uffec\041\uffec\001\002\000\010" +
    "\021\067\022\065\036\072\001\002\000\004\033\uffdc\001" +
    "\002\000\034\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\033\uffeb\034\uffeb\036\uffeb\040" +
    "\uffeb\041\uffeb\001\002\000\006\025\075\026\076\001\002" +
    "\000\004\013\105\001\002\000\004\013\077\001\002\000" +
    "\006\042\062\045\063\001\002\000\012\013\uffe6\021\067" +
    "\022\065\024\uffe6\001\002\000\006\013\102\024\103\001" +
    "\002\000\006\042\062\045\063\001\002\000\034\013\uffe8" +
    "\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\040\uffe8\041\uffe8\001\002" +
    "\000\012\013\uffe7\021\067\022\065\024\uffe7\001\002\000" +
    "\006\042\062\045\063\001\002\000\006\013\102\024\107" +
    "\001\002\000\034\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\024\uffe9\033\uffe9\034\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\001\002\000\010\032\uffe0\034\uffe0\035" +
    "\uffe0\001\002\000\004\010\112\001\002\000\010\002\uffe4" +
    "\027\uffe4\043\uffe4\001\002\000\004\037\114\001\002\000" +
    "\006\012\122\016\121\001\002\000\006\034\120\037\114" +
    "\001\002\000\006\034\uffda\037\uffda\001\002\000\006\034" +
    "\uffdb\037\uffdb\001\002\000\010\032\uffde\034\uffde\035\uffde" +
    "\001\002\000\006\042\062\045\063\001\002\000\006\042" +
    "\062\045\063\001\002\000\012\021\067\022\065\040\126" +
    "\041\125\001\002\000\004\010\127\001\002\000\004\010" +
    "\uffd6\001\002\000\004\010\uffd7\001\002\000\006\034\uffd9" +
    "\037\uffd9\001\002\000\012\021\067\022\065\040\126\041" +
    "\125\001\002\000\004\010\132\001\002\000\006\034\uffd8" +
    "\037\uffd8\001\002\000\010\021\067\022\065\033\uffdd\001" +
    "\002\000\010\002\uffee\027\uffee\043\uffee\001\002\000\004" +
    "\030\136\001\002\000\004\033\137\001\002\000\004\044" +
    "\140\001\002\000\004\032\147\001\002\000\006\013\143" +
    "\034\144\001\002\000\006\013\uffe2\034\uffe2\001\002\000" +
    "\004\044\140\001\002\000\004\010\145\001\002\000\010" +
    "\002\uffe5\027\uffe5\043\uffe5\001\002\000\006\013\uffe3\034" +
    "\uffe3\001\002\000\006\042\062\045\063\001\002\000\012" +
    "\013\uffe1\021\067\022\065\034\uffe1\001\002\000\006\042" +
    "\062\045\063\001\002\000\006\010\166\013\165\001\002" +
    "\000\006\042\062\045\063\001\002\000\006\010\156\013" +
    "\155\001\002\000\004\016\151\001\002\000\010\002\ufff6" +
    "\027\ufff6\043\ufff6\001\002\000\004\010\160\001\002\000" +
    "\010\002\ufff9\027\ufff9\043\ufff9\001\002\000\012\014\162" +
    "\015\163\021\067\022\065\001\002\000\006\010\ufff3\013" +
    "\ufff3\001\002\000\006\010\ufff2\013\ufff2\001\002\000\006" +
    "\010\ufff4\013\ufff4\001\002\000\004\012\153\001\002\000" +
    "\010\002\ufff7\027\ufff7\043\ufff7\001\002\000\004\010\170" +
    "\001\002\000\010\002\ufff8\027\ufff8\043\ufff8\001\002\000" +
    "\012\017\172\020\173\021\067\022\065\001\002\000\006" +
    "\010\ufff0\013\ufff0\001\002\000\006\010\uffef\013\uffef\001" +
    "\002\000\006\010\ufff1\013\ufff1\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\022\001\001" +
    "\000\002\001\001\000\004\004\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\027\001\001\000\002" +
    "\001\001\000\004\004\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\037\001\001\000\002\001" +
    "\001\000\006\005\041\006\043\001\001\000\002\001\001" +
    "\000\006\024\153\025\151\001\001\000\004\007\044\001" +
    "\001\000\004\016\046\001\001\000\002\001\001\000\004" +
    "\016\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\055\013\056" +
    "\017\057\001\001\000\004\023\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\107\013\056\001\001" +
    "\000\004\023\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\072\001\001\000\004" +
    "\023\070\001\001\000\004\023\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\077\026\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\077\026\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\114\015\115\001\001" +
    "\000\002\001\001\000\004\015\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\127" +
    "\001\001\000\004\023\122\001\001\000\004\020\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\141\011" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\147\001\001" +
    "\000\002\001\001\000\004\023\170\001\001\000\002\001" +
    "\001\000\004\023\160\001\001\000\002\001\001\000\004" +
    "\025\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP execution_sec 
            { parser.Tree.reduce(3,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok1_maybe TK2 S tok1_maybe TK2 S tok1_maybe TK3 S tok1_maybe 
            { parser.Tree.reduce(10,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= tok1_maybe TK2 S tok1_maybe TK3 S tok1_maybe TK2 S tok1_maybe 
            { parser.Tree.reduce(10,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= tok1_maybe TK3 S tok1_maybe TK2 S tok1_maybe TK2 S tok1_maybe 
            { parser.Tree.reduce(10,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1_maybe ::= tok1_maybe TK1 S 
            { parser.Tree.reduce(3,"tok1_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1_maybe ::= 
            { parser.Tree.reduce(0,"tok1_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // execution_sec ::= init_instr commands_l 
            { parser.Tree.reduce(2,"execution_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // init_instr ::= INIT weight CM volume S 
            { parser.Tree.reduce(5,"init_instr",0);
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("WEIGHT="+w+" VOLUME="+v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // init_instr ::= INIT volume CM weight S 
            { parser.Tree.reduce(5,"init_instr",0);
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("WEIGHT="+w+" VOLUME="+v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // init_instr ::= INIT volume S 
            { parser.Tree.reduce(3,"init_instr",0);
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("VOLUME="+v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // init_instr ::= INIT weight S 
            { parser.Tree.reduce(3,"init_instr",0);
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("WEIGHT="+w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // init_instr ::= 
            { parser.Tree.reduce(0,"init_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_instr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // weight ::= WEIGHT expr w_unit 
            { parser.Tree.reduce(3,"weight",0);
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer u = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           if(u.equals(0)){
             RESULT = e;
           }
           else{
            RESULT = e*100;
           }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("weight",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // w_unit ::= GRAMS 
            { parser.Tree.reduce(1,"w_unit",0);
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("w_unit",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // w_unit ::= KILOGRAMS 
            { parser.Tree.reduce(1,"w_unit",0);
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("w_unit",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // volume ::= VOLUME expr v_unit 
            { parser.Tree.reduce(3,"volume",0);
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer u = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(u.equals(0)){
                RESULT = e;
            }
            else{
                RESULT = 100*e;
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("volume",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // v_unit ::= LITERS 
            { parser.Tree.reduce(1,"v_unit",0);
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_unit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // v_unit ::= HECTOLITERS 
            { parser.Tree.reduce(1,"v_unit",0);
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_unit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // commands_l ::= commands_l command command 
            { parser.Tree.reduce(3,"commands_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands_l",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // commands_l ::= 
            { parser.Tree.reduce(0,"commands_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands_l",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x+y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr STAR expr 
            { parser.Tree.reduce(3,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x*y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= UINT 
            { parser.Tree.reduce(1,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= FZ RO MIN CM expr_l RC 
            { parser.Tree.reduce(6,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           RESULT = Integer.MAX_VALUE;
           for(int i=0; i<x.length; i++){
            if(x[i]<RESULT){
                RESULT = x[i];
            }
           }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= FZ RO MAX CM expr_l RC 
            { parser.Tree.reduce(6,"expr",0);
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           RESULT = Integer.MIN_VALUE;
           for(int i=0; i<x.length; i++){
            if(x[i]>RESULT){
                RESULT = x[i];
            }
           }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr_l ::= expr_l CM expr 
            { parser.Tree.reduce(3,"expr_l",0);
              Integer[] RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] prev = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer cur = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Integer[prev.length+1];
            for(int i=0; i<prev.length; i++){
                RESULT[i] = prev[i];
            }
            RESULT[prev.length] = cur;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_l",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_l ::= expr 
            { parser.Tree.reduce(1,"expr_l",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Integer[]{x};
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_l",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // command ::= OBJECT ID ATTRIBUTES BO attributes_l BC S 
            { parser.Tree.reduce(7,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // command ::= IF ID DOT ID BO cond_l BC S 
            { parser.Tree.reduce(8,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attributes_l ::= attributes_l CM attribute 
            { parser.Tree.reduce(3,"attributes_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attributes_l ::= attribute 
            { parser.Tree.reduce(1,"attributes_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute ::= ID EQ expr 
            { parser.Tree.reduce(3,"attribute",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond_l ::= cond_l cond 
            { parser.Tree.reduce(2,"cond_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_l",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond_l ::= cond 
            { parser.Tree.reduce(1,"cond_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_l",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= type BO actions_l BC 
            { parser.Tree.reduce(4,"cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= EQ expr 
            { parser.Tree.reduce(2,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= SO expr CM expr SC 
            { parser.Tree.reduce(5,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actions_l ::= actions_l action_instr 
            { parser.Tree.reduce(2,"actions_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions_l",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actions_l ::= action_instr 
            { parser.Tree.reduce(1,"actions_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions_l",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // action_instr ::= MOD WEIGHT expr modifier S 
            { parser.Tree.reduce(5,"action_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // action_instr ::= MOD VOLUME expr modifier S 
            { parser.Tree.reduce(5,"action_instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // modifier ::= ADD 
            { parser.Tree.reduce(1,"modifier",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifier",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // modifier ::= SUB 
            { parser.Tree.reduce(1,"modifier",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifier",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
