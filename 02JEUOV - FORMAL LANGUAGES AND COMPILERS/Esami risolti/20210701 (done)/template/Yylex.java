// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\6\4\0\1\7\1\10\1\11\1\0\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\3\25\1\26\1\27\34\0\1\30\1\31"+
    "\7\0\2\32\2\0\1\33\1\0\1\34\3\0\1\35"+
    "\3\0\1\36\2\0\1\37\2\0\1\40\5\0\1\41"+
    "\1\0\1\42\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\2\4\1\5\1\6"+
    "\4\1\1\7\1\10\1\0\1\11\6\0\1\12\11\0"+
    "\1\13\1\14\5\0\1\15\24\0\1\16\10\0\1\17"+
    "\41\0\2\20\1\0\2\20\1\0\1\17\2\20\2\0"+
    "\1\20\12\0\1\17\17\0\1\17\u0577\0\7\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[1552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\43\0\106\0\151\0\214\0\257\0\43"+
    "\0\322\0\365\0\43\0\43\0\u0118\0\u013b\0\u015e\0\u0181"+
    "\0\43\0\43\0\151\0\43\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\43\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302"+
    "\0\u0325\0\u0348\0\u036b\0\u038e\0\43\0\43\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec"+
    "\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604"+
    "\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c"+
    "\0\43\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811"+
    "\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929"+
    "\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59"+
    "\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71"+
    "\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89"+
    "\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1"+
    "\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9"+
    "\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1"+
    "\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9"+
    "\0\u120c\0\u1117\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de"+
    "\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u13f6"+
    "\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb\0\u150e"+
    "\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626"+
    "\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e"+
    "\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856"+
    "\0\u1879\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e"+
    "\0\u1991\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86"+
    "\0\u1aa9\0\u1acc\0\u1aef\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e"+
    "\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6"+
    "\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u1dce"+
    "\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6"+
    "\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8\0\u1fdb\0\u1ffe"+
    "\0\u2021\0\u2044\0\u2067\0\u208a\0\u20ad\0\u20d0\0\u20f3\0\u2116"+
    "\0\u2139\0\u215c\0\u217f\0\u21a2\0\u21c5\0\u21e8\0\u220b\0\u222e"+
    "\0\u2251\0\u2274\0\u2297\0\u22ba\0\u22dd\0\u2300\0\u2323\0\u2346"+
    "\0\u2369\0\u238c\0\u23af\0\u23d2\0\u23f5\0\u2418\0\u243b\0\u245e"+
    "\0\u2481\0\u24a4\0\u24c7\0\u24ea\0\u250d\0\u2530\0\u2553\0\u2576"+
    "\0\u2599\0\u25bc\0\u25df\0\u2602\0\u2625\0\u2648\0\u266b\0\u268e"+
    "\0\u26b1\0\u26d4\0\u26f7\0\u271a\0\u273d\0\u2760\0\u2783\0\u27a6"+
    "\0\u27c9\0\u27ec\0\u280f\0\u2832\0\u2855\0\u2878\0\u289b\0\u28be"+
    "\0\u28e1\0\u2904\0\u2927\0\u294a\0\u296d\0\u2990\0\u29b3\0\u29d6"+
    "\0\u29f9\0\u2a1c\0\u2a3f\0\u2a62\0\u2a85\0\u2aa8\0\u2acb\0\u2aee"+
    "\0\u2b11\0\u2b34\0\u2b57\0\u2b7a\0\u2b9d\0\u2bc0\0\u2be3\0\u2c06"+
    "\0\u2c29\0\u2c4c\0\u2c6f\0\u2c92\0\u2cb5\0\u2cd8\0\u2cfb\0\u2d1e"+
    "\0\u2d41\0\u2d64\0\u2d87\0\u2daa\0\u2dcd\0\u2df0\0\u2e13\0\u2e36"+
    "\0\u2e59\0\u2e7c\0\u2e9f\0\u2ec2\0\u2ee5\0\u2f08\0\u2f2b\0\u2f4e"+
    "\0\u2f71\0\u2f94\0\u2fb7\0\u2fda\0\u2ffd\0\u3020\0\u3043\0\u3066"+
    "\0\u3089\0\u30ac\0\u30cf\0\u30f2\0\u3115\0\u3138\0\u315b\0\u317e"+
    "\0\u31a1\0\u31c4\0\u31e7\0\u320a\0\u322d\0\u3250\0\u3273\0\u3296"+
    "\0\u32b9\0\u32dc\0\u32ff\0\u3322\0\u3345\0\u3368\0\u338b\0\u33ae"+
    "\0\u33d1\0\u33f4\0\u3417\0\u343a\0\u345d\0\u3480\0\u34a3\0\u34c6"+
    "\0\u34e9\0\u350c\0\u352f\0\u3552\0\u3575\0\u3598\0\u35bb\0\u35de"+
    "\0\u3601\0\u3624\0\u3647\0\u366a\0\u368d\0\u36b0\0\u36d3\0\u36f6"+
    "\0\u3719\0\u373c\0\u375f\0\u3782\0\u37a5\0\u37c8\0\u37eb\0\u380e"+
    "\0\u3831\0\u3854\0\u3877\0\u389a\0\u38bd\0\u38e0\0\u3903\0\u3926"+
    "\0\u3949\0\u396c\0\u398f\0\u39b2\0\u39d5\0\u39f8\0\u3a1b\0\u3a3e"+
    "\0\u3a61\0\u3a84\0\u3aa7\0\u3aca\0\u3aed\0\u3b10\0\u3b33\0\u3b56"+
    "\0\u3b79\0\u3b9c\0\u3bbf\0\u3be2\0\u3c05\0\u3c28\0\u3c4b\0\u3c6e"+
    "\0\u3c91\0\u3cb4\0\u3cd7\0\u3cfa\0\u3d1d\0\u3d40\0\u3d63\0\u3d86"+
    "\0\u3da9\0\u3dcc\0\u3def\0\u3e12\0\u3e35\0\u3e58\0\u3e7b\0\u3e9e"+
    "\0\u3ec1\0\u3ee4\0\u3f07\0\u3f2a\0\u3f4d\0\u3f70\0\u3f93\0\u3fb6"+
    "\0\u3fd9\0\u3ffc\0\u401f\0\u4042\0\u4065\0\u4088\0\u40ab\0\u40ce"+
    "\0\u40f1\0\u4114\0\u4137\0\u415a\0\u417d\0\u41a0\0\u41c3\0\u41e6"+
    "\0\u4209\0\u422c\0\u424f\0\u4272\0\u4295\0\u42b8\0\u42db\0\u42fe"+
    "\0\u4321\0\u4344\0\u4367\0\u438a\0\u43ad\0\u43d0\0\u43f3\0\u4416"+
    "\0\u4439\0\u445c\0\u447f\0\u44a2\0\u44c5\0\u44e8\0\u450b\0\u452e"+
    "\0\u4551\0\u4574\0\u4597\0\u45ba\0\u45dd\0\u4600\0\u4623\0\u4646"+
    "\0\u4669\0\u468c\0\u46af\0\u46d2\0\u46f5\0\u4718\0\u473b\0\u475e"+
    "\0\u4781\0\u47a4\0\u47c7\0\u47ea\0\u480d\0\u4830\0\u4853\0\u4876"+
    "\0\u4899\0\u48bc\0\u48df\0\u4902\0\u4925\0\u4948\0\u496b\0\u498e"+
    "\0\u49b1\0\u49d4\0\u49f7\0\u4a1a\0\u4a3d\0\u4a60\0\u4a83\0\u4aa6"+
    "\0\u4ac9\0\u4aec\0\u4b0f\0\u4b32\0\u4b55\0\u4b78\0\u4b9b\0\u4bbe"+
    "\0\u4be1\0\u4c04\0\u4c27\0\u4c4a\0\u4c6d\0\u4c90\0\u4cb3\0\u4cd6"+
    "\0\u4cf9\0\u4d1c\0\u4d3f\0\u4d62\0\u4d85\0\u4da8\0\u4dcb\0\u4dee"+
    "\0\u4e11\0\u4e34\0\u4e57\0\u4e7a\0\u4e9d\0\u4ec0\0\u4ee3\0\u4f06"+
    "\0\u4f29\0\u4f4c\0\u4f6f\0\u4f92\0\u4fb5\0\u4fd8\0\u4ffb\0\u501e"+
    "\0\u5041\0\u5064\0\u5087\0\u50aa\0\u50cd\0\u50f0\0\u5113\0\u5136"+
    "\0\u5159\0\u517c\0\u519f\0\u51c2\0\u51e5\0\u5208\0\u522b\0\u524e"+
    "\0\u5271\0\u5294\0\u52b7\0\u52da\0\u52fd\0\u5320\0\u5343\0\u5366"+
    "\0\u5389\0\u53ac\0\u53cf\0\u53f2\0\u5415\0\u5438\0\u545b\0\u547e"+
    "\0\u54a1\0\u54c4\0\u54e7\0\u550a\0\u552d\0\u5550\0\u5573\0\u5596"+
    "\0\u55b9\0\u55dc\0\u55ff\0\u5622\0\u5645\0\u5668\0\u568b\0\u56ae"+
    "\0\u56d1\0\u56f4\0\u5717\0\u573a\0\u575d\0\u5780\0\u57a3\0\u57c6"+
    "\0\u57e9\0\u580c\0\u582f\0\u5852\0\u5875\0\u5898\0\u58bb\0\u58de"+
    "\0\u5901\0\u5924\0\u5947\0\u596a\0\u598d\0\u59b0\0\u59d3\0\u59f6"+
    "\0\u5a19\0\u5a3c\0\u5a5f\0\u5a82\0\u5aa5\0\u5ac8\0\u5aeb\0\u5b0e"+
    "\0\u5b31\0\u5b54\0\u5b77\0\u5b9a\0\u5bbd\0\u5be0\0\u5c03\0\u5c26"+
    "\0\u5c49\0\u5c6c\0\u5c8f\0\u5cb2\0\u5cd5\0\u5cf8\0\u5d1b\0\u5d3e"+
    "\0\u5d61\0\u5d84\0\u5da7\0\u5dca\0\u5ded\0\u5e10\0\u5e33\0\u5e56"+
    "\0\u5e79\0\u5e9c\0\u5ebf\0\u5ee2\0\u5f05\0\u5f28\0\u5f4b\0\u5f6e"+
    "\0\u5f91\0\u5fb4\0\u5fd7\0\u5ffa\0\u601d\0\u6040\0\u6063\0\u6086"+
    "\0\u60a9\0\u60cc\0\u60ef\0\u6112\0\u6135\0\u6158\0\u617b\0\u619e"+
    "\0\u61c1\0\u61e4\0\u6207\0\u622a\0\u624d\0\u6270\0\u6293\0\u62b6"+
    "\0\u62d9\0\u62fc\0\u631f\0\u6342\0\u6365\0\u6388\0\u63ab\0\u63ce"+
    "\0\u63f1\0\u6414\0\u6437\0\u645a\0\u647d\0\u64a0\0\u64c3\0\u64e6"+
    "\0\u6509\0\u652c\0\u654f\0\u6572\0\u6595\0\u65b8\0\u65db\0\u65fe"+
    "\0\u6621\0\u6644\0\u6667\0\u668a\0\u66ad\0\u66d0\0\u66f3\0\u6716"+
    "\0\u6739\0\u675c\0\u677f\0\u67a2\0\u67c5\0\u67e8\0\u680b\0\u682e"+
    "\0\u6851\0\u6874\0\u6897\0\u68ba\0\u68dd\0\u6900\0\u6923\0\u6946"+
    "\0\u6969\0\u698c\0\u69af\0\u69d2\0\u69f5\0\u6a18\0\u6a3b\0\u6a5e"+
    "\0\u6a81\0\u6aa4\0\u6ac7\0\u6aea\0\u6b0d\0\u6b30\0\u6b53\0\u6b76"+
    "\0\u6b99\0\u6bbc\0\u6bdf\0\u6c02\0\u6c25\0\u6c48\0\u6c6b\0\u6c8e"+
    "\0\u6cb1\0\u6cd4\0\u6cf7\0\u6d1a\0\u6d3d\0\u6d60\0\u6d83\0\u6da6"+
    "\0\u6dc9\0\u6dec\0\u6e0f\0\u6e32\0\u6e55\0\u6e78\0\u6e9b\0\u6ebe"+
    "\0\u6ee1\0\u6f04\0\u6f27\0\u6f4a\0\u6f6d\0\u6f90\0\u6fb3\0\u6fd6"+
    "\0\u6ff9\0\u701c\0\u703f\0\u7062\0\u7085\0\u70a8\0\u70cb\0\u70ee"+
    "\0\u7111\0\u7134\0\u7157\0\u717a\0\u719d\0\u71c0\0\u71e3\0\u7206"+
    "\0\u7229\0\u724c\0\u726f\0\u7292\0\u72b5\0\u72d8\0\u72fb\0\u731e"+
    "\0\u7341\0\u7364\0\u7387\0\u73aa\0\u73cd\0\u73f0\0\u7413\0\u7436"+
    "\0\u7459\0\u747c\0\u749f\0\u74c2\0\u74e5\0\u7508\0\u752b\0\u754e"+
    "\0\u7571\0\u7594\0\u75b7\0\u75da\0\u75fd\0\u7620\0\u7643\0\u7666"+
    "\0\u7689\0\u76ac\0\u76cf\0\u76f2\0\u7715\0\u7738\0\u775b\0\u777e"+
    "\0\u77a1\0\u77c4\0\u77e7\0\u780a\0\u782d\0\u7850\0\u7873\0\u7896"+
    "\0\u78b9\0\u78dc\0\u78ff\0\u7922\0\u7945\0\u7968\0\u798b\0\u79ae"+
    "\0\u79d1\0\u79f4\0\u7a17\0\u7a3a\0\u7a5d\0\u7a80\0\u7aa3\0\u7ac6"+
    "\0\u7ae9\0\u7b0c\0\u7b2f\0\u7b52\0\u7b75\0\u7b98\0\u7bbb\0\u7bde"+
    "\0\u7c01\0\u7c24\0\u7c47\0\u7c6a\0\u7c8d\0\u7cb0\0\u7cd3\0\u7cf6"+
    "\0\u7d19\0\u7d3c\0\u7d5f\0\u7d82\0\u7da5\0\u7dc8\0\u7deb\0\u7e0e"+
    "\0\u7e31\0\u7e54\0\u7e77\0\u7e9a\0\u7ebd\0\u7ee0\0\u7f03\0\u7f26"+
    "\0\u7f49\0\u7f6c\0\u7f8f\0\u7fb2\0\u7fd5\0\u7ff8\0\u801b\0\u803e"+
    "\0\u8061\0\u8084\0\u80a7\0\u80ca\0\u80ed\0\u8110\0\u8133\0\u8156"+
    "\0\u8179\0\u819c\0\u81bf\0\u81e2\0\u8205\0\u8228\0\u824b\0\u826e"+
    "\0\u8291\0\u82b4\0\u82d7\0\u82fa\0\u831d\0\u8340\0\u8363\0\u8386"+
    "\0\u83a9\0\u83cc\0\u83ef\0\u8412\0\u8435\0\u8458\0\u847b\0\u849e"+
    "\0\u84c1\0\u84e4\0\u8507\0\u852a\0\u854d\0\u8570\0\u8593\0\u85b6"+
    "\0\u85d9\0\u85fc\0\u861f\0\u8642\0\u8665\0\u8688\0\u86ab\0\u86ce"+
    "\0\u86f1\0\u8714\0\u8737\0\u875a\0\u877d\0\u87a0\0\u87c3\0\u87e6"+
    "\0\u8809\0\u882c\0\u884f\0\u8872\0\u8895\0\u88b8\0\u88db\0\u88fe"+
    "\0\u8921\0\u8944\0\u8967\0\u898a\0\u89ad\0\u89d0\0\u89f3\0\u8a16"+
    "\0\u8a39\0\u8a5c\0\u8a7f\0\u8aa2\0\u8ac5\0\u8ae8\0\u8b0b\0\u8b2e"+
    "\0\u8b51\0\u8b74\0\u8b97\0\u8bba\0\u8bdd\0\u8c00\0\u8c23\0\u8c46"+
    "\0\u8c69\0\u8c8c\0\u8caf\0\u8cd2\0\u8cf5\0\u8d18\0\u8d3b\0\u8d5e"+
    "\0\u8d81\0\u8da4\0\u8dc7\0\u8dea\0\u8e0d\0\u8e30\0\u8e53\0\u8e76"+
    "\0\u8e99\0\u8ebc\0\u8edf\0\u8f02\0\u8f25\0\u8f48\0\u8f6b\0\u8f8e"+
    "\0\u8fb1\0\u8fd4\0\u8ff7\0\u901a\0\u903d\0\u9060\0\u9083\0\u90a6"+
    "\0\u90c9\0\u90ec\0\u910f\0\u9132\0\u9155\0\u9178\0\u919b\0\u91be"+
    "\0\u91e1\0\u9204\0\u9227\0\u924a\0\u926d\0\u9290\0\u92b3\0\u92d6"+
    "\0\u92f9\0\u931c\0\u933f\0\u9362\0\u9385\0\u93a8\0\u93cb\0\u93ee"+
    "\0\u9411\0\u9434\0\u9457\0\u947a\0\u949d\0\u94c0\0\u94e3\0\u9506"+
    "\0\u9529\0\u954c\0\u956f\0\u9592\0\u95b5\0\u95d8\0\u95fb\0\u961e"+
    "\0\u9641\0\u9664\0\u9687\0\u96aa\0\u96cd\0\u96f0\0\u9713\0\u9736"+
    "\0\u9759\0\u977c\0\u979f\0\u97c2\0\u97e5\0\u9808\0\u982b\0\u984e"+
    "\0\u9871\0\u9894\0\u98b7\0\u98da\0\u98fd\0\u9920\0\u9943\0\u9966"+
    "\0\u9989\0\u99ac\0\u99cf\0\u99f2\0\u9a15\0\u9a38\0\u9a5b\0\u9a7e"+
    "\0\u9aa1\0\u9ac4\0\u9ae7\0\u9b0a\0\u9b2d\0\u9b50\0\u9b73\0\u9b96"+
    "\0\u9bb9\0\u9bdc\0\u9bff\0\u9c22\0\u9c45\0\u9c68\0\u9c8b\0\u9cae"+
    "\0\u9cd1\0\u9cf4\0\u9d17\0\u9d3a\0\u9d5d\0\u9d80\0\u9da3\0\u9dc6"+
    "\0\u9de9\0\u9e0c\0\u9e2f\0\u9e52\0\u9e75\0\u9e98\0\u9ebb\0\u9ede"+
    "\0\u9f01\0\u9f24\0\u9f47\0\u9f6a\0\u9f8d\0\u9fb0\0\u9fd3\0\u9ff6"+
    "\0\ua019\0\ua03c\0\ua05f\0\ua082\0\ua0a5\0\ua0c8\0\ua0eb\0\ua10e"+
    "\0\ua131\0\ua154\0\ua177\0\ua19a\0\ua1bd\0\ua1e0\0\ua203\0\ua226"+
    "\0\ua249\0\ua26c\0\ua28f\0\ua2b2\0\ua2d5\0\ua2f8\0\ua31b\0\ua33e"+
    "\0\ua361\0\ua384\0\ua3a7\0\ua3ca\0\ua3ed\0\ua410\0\ua433\0\ua456"+
    "\0\ua479\0\ua49c\0\ua4bf\0\ua4e2\0\ua505\0\ua528\0\ua54b\0\ua56e"+
    "\0\ua591\0\ua5b4\0\ua5d7\0\ua5fa\0\ua61d\0\ua640\0\ua663\0\ua686"+
    "\0\ua6a9\0\ua6cc\0\ua6ef\0\ua712\0\ua735\0\ua758\0\ua77b\0\ua79e"+
    "\0\ua7c1\0\ua7e4\0\ua807\0\ua82a\0\ua84d\0\ua870\0\ua893\0\ua8b6"+
    "\0\ua8d9\0\ua8fc\0\ua91f\0\ua942\0\ua965\0\ua988\0\ua9ab\0\ua9ce"+
    "\0\ua9f1\0\uaa14\0\uaa37\0\uaa5a\0\uaa7d\0\uaaa0\0\uaac3\0\uaae6"+
    "\0\uab09\0\uab2c\0\uab4f\0\uab72\0\uab95\0\uabb8\0\uabdb\0\uabfe"+
    "\0\uac21\0\uac44\0\uac67\0\uac8a\0\uacad\0\uacd0\0\uacf3\0\uad16"+
    "\0\uad39\0\uad5c\0\uad7f\0\uada2\0\uadc5\0\uade8\0\uae0b\0\uae2e"+
    "\0\uae51\0\uae74\0\uae97\0\uaeba\0\uaedd\0\uaf00\0\uaf23\0\uaf46"+
    "\0\uaf69\0\uaf8c\0\uafaf\0\uafd2\0\uaff5\0\ub018\0\ub03b\0\ub05e"+
    "\0\ub081\0\ub0a4\0\ub0c7\0\ub0ea\0\ub10d\0\ub130\0\ub153\0\ub176"+
    "\0\ub199\0\ub1bc\0\ub1df\0\ub202\0\ub225\0\ub248\0\ub26b\0\ub28e"+
    "\0\ub2b1\0\ub2d4\0\ub2f7\0\ub31a\0\ub33d\0\ub360\0\ub383\0\ub3a6"+
    "\0\ub3c9\0\ub3ec\0\ub40f\0\ub432\0\ub455\0\ub478\0\ub49b\0\ub4be"+
    "\0\ub4e1\0\ub504\0\ub527\0\ub54a\0\ub56d\0\ub590\0\ub5b3\0\ub5d6"+
    "\0\ub5f9\0\ub61c\0\ub63f\0\ub662\0\ub685\0\ub6a8\0\ub6cb\0\ub6ee"+
    "\0\ub711\0\ub734\0\ub757\0\ub77a\0\ub79d\0\ub7c0\0\ub7e3\0\ub806"+
    "\0\ub829\0\ub84c\0\ub86f\0\ub892\0\ub8b5\0\ub8d8\0\ub8fb\0\ub91e"+
    "\0\ub941\0\ub964\0\ub987\0\ub9aa\0\ub9cd\0\ub9f0\0\uba13\0\uba36"+
    "\0\uba59\0\uba7c\0\uba9f\0\ubac2\0\ubae5\0\ubb08\0\ubb2b\0\ubb4e"+
    "\0\ubb71\0\ubb94\0\ubbb7\0\ubbda\0\ubbfd\0\ubc20\0\ubc43\0\ubc66"+
    "\0\ubc89\0\ubcac\0\ubccf\0\ubcf2\0\ubd15\0\ubd38\0\ubd5b\0\ubd7e"+
    "\0\ubda1\0\ubdc4\0\ubde7\0\ube0a\0\ube2d\0\ube50\0\ube73\0\ube96"+
    "\0\ubeb9\0\ubedc\0\ubeff\0\ubf22\0\ubf45\0\ubf68\0\ubf8b\0\ubfae"+
    "\0\ubfd1\0\ubff4\0\uc017\0\uc03a\0\uc05d\0\uc080\0\uc0a3\0\uc0c6"+
    "\0\uc0e9\0\uc10c\0\uc12f\0\uc152\0\uc175\0\uc198\0\uc1bb\0\uc1de"+
    "\0\uc201\0\uc224\0\uc247\0\uc26a\0\uc28d\0\uc2b0\0\uc2d3\0\uc2f6"+
    "\0\uc319\0\uc33c\0\uc35f\0\uc382\0\uc3a5\0\uc3c8\0\uc3eb\0\uc40e"+
    "\0\uc431\0\uc454\0\uc477\0\uc49a\0\uc4bd\0\uc4e0\0\uc503\0\uc526"+
    "\0\uc549\0\uc56c\0\uc58f\0\uc5b2\0\uc5d5\0\uc5f8\0\uc61b\0\uc63e"+
    "\0\uc661\0\uc684\0\uc6a7\0\uc6ca\0\uc6ed\0\uc710\0\uc733\0\uc756"+
    "\0\uc779\0\uc79c\0\uc7bf\0\uc7e2\0\uc805\0\uc828\0\uc84b\0\uc86e"+
    "\0\uc891\0\uc8b4\0\uc8d7\0\uc8fa\0\uc91d\0\uc940\0\uc963\0\uc986"+
    "\0\uc9a9\0\uc9cc\0\uc9ef\0\uca12\0\uca35\0\uca58\0\uca7b\0\uca9e"+
    "\0\ucac1\0\ucae4\0\ucb07\0\ucb2a\0\ucb4d\0\ucb70\0\ucb93\0\ucbb6"+
    "\0\ucbd9\0\ucbfc\0\ucc1f\0\ucc42\0\ucc65\0\ucc88\0\uccab\0\uccce"+
    "\0\uccf1\0\ucd14\0\ucd37\0\ucd5a\0\ucd7d\0\ucda0\0\ucdc3\0\ucde6"+
    "\0\uce09\0\uce2c\0\uce4f\0\uce72\0\uce95\0\uceb8\0\ucedb\0\ucefe"+
    "\0\ucf21\0\ucf44\0\ucf67\0\ucf8a\0\ucfad\0\ucfd0\0\ucff3\0\ud016"+
    "\0\ud039\0\ud05c\0\ud07f\0\ud0a2\0\ud0c5\0\ud0e8\0\ud10b\0\ud12e"+
    "\0\ud151\0\ud151\0\ud174\0\ud197\0\ud1ba\0\ud1dd\0\ud200\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\3\2\1\11\7\12\1\13\1\14\1\15\1\16"+
    "\1\2\1\17\1\2\1\20\3\2\1\21\1\22\45\0"+
    "\1\3\40\0\5\23\1\24\35\23\6\0\1\25\45\0"+
    "\1\26\45\0\1\27\42\0\1\27\1\0\10\12\30\0"+
    "\1\30\42\0\1\31\67\0\1\32\36\0\1\33\14\0"+
    "\1\34\34\0\11\26\1\35\31\26\16\0\10\36\33\0"+
    "\1\37\1\40\1\41\1\0\4\42\34\0\1\43\62\0"+
    "\1\44\11\0\1\45\34\0\10\26\1\3\1\35\31\26"+
    "\16\0\10\46\36\0\1\47\37\0\10\42\33\0\3\42"+
    "\1\50\47\0\1\51\32\0\1\52\1\53\61\0\1\54"+
    "\32\0\1\55\42\0\1\56\32\0\6\57\35\0\1\60"+
    "\1\61\41\0\2\62\40\0\1\63\50\0\1\64\35\0"+
    "\4\57\1\65\36\0\10\66\33\0\1\67\1\70\36\0"+
    "\1\71\2\0\1\67\1\70\36\0\1\71\2\0\2\70"+
    "\60\0\1\72\24\0\1\73\6\66\33\0\5\66\1\74"+
    "\45\0\1\75\27\0\1\71\2\0\1\76\1\77\36\0"+
    "\1\71\2\0\2\77\42\0\1\100\57\0\1\101\34\0"+
    "\1\102\42\0\1\103\32\0\6\104\32\0\1\71\2\0"+
    "\1\77\1\105\36\0\1\71\2\0\2\105\41\0\1\106"+
    "\1\107\45\0\1\110\1\104\35\0\3\104\1\111\37\0"+
    "\10\112\30\0\1\71\45\0\1\113\1\114\41\0\2\115"+
    "\50\0\1\112\33\0\5\112\52\0\1\116\26\0\1\117"+
    "\1\120\36\0\1\121\2\0\1\117\1\120\36\0\1\121"+
    "\2\0\2\120\55\0\1\122\23\0\1\121\2\0\1\123"+
    "\1\124\36\0\1\121\2\0\2\124\42\0\1\125\55\0"+
    "\1\126\23\0\1\121\2\0\1\124\1\127\36\0\1\121"+
    "\2\0\2\127\41\0\1\130\1\131\55\0\1\132\23\0"+
    "\1\121\45\0\1\133\1\134\41\0\2\135\55\0\1\136"+
    "\26\0\1\137\1\140\36\0\1\141\2\0\1\137\1\140"+
    "\36\0\1\141\2\0\2\140\55\0\1\142\23\0\1\141"+
    "\2\0\1\143\1\144\36\0\1\141\2\0\2\144\42\0"+
    "\1\145\55\0\1\146\23\0\1\141\2\0\1\144\1\147"+
    "\36\0\1\141\2\0\2\147\41\0\1\150\1\151\55\0"+
    "\1\152\23\0\1\141\45\0\1\153\1\154\41\0\2\155"+
    "\55\0\1\156\26\0\1\157\1\160\36\0\1\161\2\0"+
    "\1\157\1\160\36\0\1\161\2\0\2\160\55\0\1\162"+
    "\23\0\1\161\2\0\1\163\1\164\36\0\1\161\2\0"+
    "\2\164\42\0\1\165\55\0\1\166\23\0\1\161\2\0"+
    "\1\164\1\167\36\0\1\161\2\0\2\167\41\0\1\170"+
    "\1\171\55\0\1\172\23\0\1\161\45\0\1\173\1\174"+
    "\41\0\2\175\55\0\1\176\26\0\1\177\1\200\36\0"+
    "\1\201\2\0\1\177\1\200\36\0\1\201\2\0\2\200"+
    "\55\0\1\202\23\0\1\201\2\0\1\203\1\204\36\0"+
    "\1\201\2\0\2\204\42\0\1\205\55\0\1\206\23\0"+
    "\1\201\2\0\1\204\1\207\36\0\1\201\2\0\2\207"+
    "\41\0\1\210\1\211\55\0\1\212\23\0\1\201\45\0"+
    "\1\213\1\214\41\0\2\215\55\0\1\216\26\0\1\217"+
    "\1\220\36\0\1\221\2\0\1\217\1\220\36\0\1\221"+
    "\2\0\2\220\55\0\1\222\23\0\1\221\2\0\1\223"+
    "\1\224\36\0\1\221\2\0\2\224\42\0\1\225\36\0"+
    "\1\221\2\0\1\224\1\226\36\0\1\221\2\0\2\226"+
    "\41\0\1\227\1\230\36\0\1\221\45\0\1\231\1\232"+
    "\41\0\2\233\41\0\1\234\1\235\36\0\1\236\2\0"+
    "\1\234\1\235\36\0\1\236\2\0\2\235\36\0\1\236"+
    "\2\0\1\237\1\240\36\0\1\236\2\0\2\240\42\0"+
    "\1\241\36\0\1\236\2\0\1\240\1\242\36\0\1\236"+
    "\2\0\2\242\41\0\1\243\1\244\36\0\1\236\45\0"+
    "\1\245\1\246\41\0\2\247\41\0\1\250\1\251\36\0"+
    "\1\252\2\0\1\250\1\251\36\0\1\252\2\0\2\251"+
    "\36\0\1\252\2\0\1\253\1\254\36\0\1\252\2\0"+
    "\2\254\42\0\1\255\36\0\1\252\2\0\1\254\1\256"+
    "\36\0\1\252\2\0\2\256\41\0\1\257\1\260\36\0"+
    "\1\252\45\0\1\261\1\262\41\0\2\263\41\0\1\264"+
    "\1\265\36\0\1\266\2\0\1\264\1\265\36\0\1\266"+
    "\2\0\2\265\36\0\1\266\2\0\1\267\1\270\36\0"+
    "\1\266\2\0\2\270\42\0\1\271\36\0\1\266\2\0"+
    "\1\270\1\272\36\0\1\266\2\0\2\272\41\0\1\273"+
    "\1\274\36\0\1\266\45\0\1\275\1\276\41\0\2\277"+
    "\41\0\1\300\1\301\36\0\1\302\2\0\1\300\1\301"+
    "\36\0\1\302\2\0\2\301\36\0\1\302\2\0\1\303"+
    "\1\304\36\0\1\302\2\0\2\304\42\0\1\305\36\0"+
    "\1\302\2\0\1\304\1\306\36\0\1\302\2\0\2\306"+
    "\41\0\1\307\1\310\36\0\1\302\45\0\1\311\1\312"+
    "\41\0\2\313\41\0\1\314\1\315\36\0\1\316\2\0"+
    "\1\314\1\315\36\0\1\316\2\0\2\315\36\0\1\316"+
    "\2\0\1\317\1\320\36\0\1\316\2\0\2\320\42\0"+
    "\1\321\36\0\1\316\2\0\1\320\1\322\36\0\1\316"+
    "\2\0\2\322\41\0\1\323\1\324\36\0\1\316\45\0"+
    "\1\325\1\326\41\0\2\327\41\0\1\330\1\331\36\0"+
    "\1\332\2\0\1\330\1\331\36\0\1\332\2\0\2\331"+
    "\36\0\1\332\2\0\1\333\1\334\36\0\1\332\2\0"+
    "\2\334\42\0\1\335\36\0\1\332\2\0\1\334\1\336"+
    "\36\0\1\332\2\0\2\336\41\0\1\337\1\340\36\0"+
    "\1\332\45\0\1\341\1\342\41\0\2\343\41\0\1\344"+
    "\1\345\36\0\1\346\2\0\1\344\1\345\36\0\1\346"+
    "\2\0\2\345\36\0\1\346\2\0\1\347\1\350\36\0"+
    "\1\346\2\0\2\350\42\0\1\351\36\0\1\346\2\0"+
    "\1\350\1\352\36\0\1\346\2\0\2\352\41\0\1\353"+
    "\1\354\36\0\1\346\45\0\1\355\1\356\41\0\2\357"+
    "\41\0\1\360\1\361\36\0\1\362\2\0\1\360\1\361"+
    "\36\0\1\362\2\0\2\361\36\0\1\362\2\0\1\363"+
    "\1\364\36\0\1\362\2\0\2\364\42\0\1\365\36\0"+
    "\1\362\2\0\1\364\1\366\36\0\1\362\2\0\2\366"+
    "\41\0\1\367\1\370\36\0\1\362\45\0\1\371\1\372"+
    "\41\0\2\373\41\0\1\374\1\375\36\0\1\376\2\0"+
    "\1\374\1\375\36\0\1\376\2\0\2\375\36\0\1\376"+
    "\2\0\1\377\1\u0100\36\0\1\376\2\0\2\u0100\42\0"+
    "\1\u0101\36\0\1\376\2\0\1\u0100\1\u0102\36\0\1\376"+
    "\2\0\2\u0102\41\0\1\u0103\1\u0104\36\0\1\376\45\0"+
    "\1\u0105\1\u0106\41\0\2\u0107\41\0\1\u0108\1\u0109\36\0"+
    "\1\u010a\2\0\1\u0108\1\u0109\36\0\1\u010a\2\0\2\u0109"+
    "\36\0\1\u010a\2\0\1\u010b\1\u010c\36\0\1\u010a\2\0"+
    "\2\u010c\42\0\1\u010d\36\0\1\u010a\2\0\1\u010c\1\u010e"+
    "\36\0\1\u010a\2\0\2\u010e\41\0\1\u010f\1\u0110\36\0"+
    "\1\u010a\45\0\1\u0111\1\u0112\41\0\2\u0113\41\0\1\u0114"+
    "\1\u0115\36\0\1\u0116\2\0\1\u0114\1\u0115\36\0\1\u0116"+
    "\2\0\2\u0115\36\0\1\u0116\2\0\1\u0117\1\u0118\36\0"+
    "\1\u0116\2\0\2\u0118\42\0\1\u0119\36\0\1\u0116\2\0"+
    "\1\u0118\1\u011a\36\0\1\u0116\2\0\2\u011a\41\0\1\u011b"+
    "\1\u011c\36\0\1\u0116\45\0\1\u011d\1\u011e\41\0\2\u011f"+
    "\41\0\1\u0120\1\u0121\36\0\1\u0122\2\0\1\u0120\1\u0121"+
    "\36\0\1\u0122\2\0\2\u0121\36\0\1\u0122\2\0\1\u0123"+
    "\1\u0124\36\0\1\u0122\2\0\2\u0124\42\0\1\u0125\36\0"+
    "\1\u0122\2\0\1\u0124\1\u0126\36\0\1\u0122\2\0\2\u0126"+
    "\41\0\1\u0127\1\u0128\36\0\1\u0122\45\0\1\u0129\1\u012a"+
    "\41\0\2\u012b\41\0\1\u012c\1\u012d\36\0\1\u012e\2\0"+
    "\1\u012c\1\u012d\36\0\1\u012e\2\0\2\u012d\36\0\1\u012e"+
    "\2\0\1\u012f\1\u0130\36\0\1\u012e\2\0\2\u0130\42\0"+
    "\1\u0131\36\0\1\u012e\2\0\1\u0130\1\u0132\36\0\1\u012e"+
    "\2\0\2\u0132\41\0\1\u0133\1\u0134\36\0\1\u012e\45\0"+
    "\1\u0135\1\u0136\41\0\2\u0137\41\0\1\u0138\1\u0139\36\0"+
    "\1\u013a\2\0\1\u0138\1\u0139\36\0\1\u013a\2\0\2\u0139"+
    "\36\0\1\u013a\2\0\1\u013b\1\u013c\36\0\1\u013a\2\0"+
    "\2\u013c\42\0\1\u013d\36\0\1\u013a\2\0\1\u013c\1\u013e"+
    "\36\0\1\u013a\2\0\2\u013e\41\0\1\u013f\1\u0140\36\0"+
    "\1\u013a\45\0\1\u0141\1\u0142\41\0\2\u0143\41\0\1\u0144"+
    "\1\u0145\36\0\1\u0146\2\0\1\u0144\1\u0145\36\0\1\u0146"+
    "\2\0\2\u0145\36\0\1\u0146\2\0\1\u0147\1\u0148\36\0"+
    "\1\u0146\2\0\2\u0148\42\0\1\u0149\36\0\1\u0146\2\0"+
    "\1\u0148\1\u014a\36\0\1\u0146\2\0\2\u014a\41\0\1\u014b"+
    "\1\u014c\36\0\1\u0146\45\0\1\u014d\1\u014e\41\0\2\u014f"+
    "\41\0\1\u0150\1\u0151\36\0\1\u0152\2\0\1\u0150\1\u0151"+
    "\36\0\1\u0152\2\0\2\u0151\36\0\1\u0152\2\0\1\u0153"+
    "\1\u0154\36\0\1\u0152\2\0\2\u0154\42\0\1\u0155\36\0"+
    "\1\u0152\2\0\1\u0154\1\u0156\36\0\1\u0152\2\0\2\u0156"+
    "\41\0\1\u0157\1\u0158\36\0\1\u0152\45\0\1\u0159\1\u015a"+
    "\41\0\2\u015b\41\0\1\u015c\1\u015d\36\0\1\u015e\2\0"+
    "\1\u015c\1\u015d\36\0\1\u015e\2\0\2\u015d\36\0\1\u015e"+
    "\2\0\1\u015f\1\u0160\36\0\1\u015e\2\0\2\u0160\42\0"+
    "\1\u0161\36\0\1\u015e\2\0\1\u0160\1\u0162\36\0\1\u015e"+
    "\2\0\2\u0162\41\0\1\u0163\1\u0164\36\0\1\u015e\45\0"+
    "\1\u0165\1\u0166\41\0\2\u0167\41\0\1\u0168\1\u0169\36\0"+
    "\1\u016a\2\0\1\u0168\1\u0169\36\0\1\u016a\2\0\2\u0169"+
    "\36\0\1\u016a\2\0\1\u016b\1\u016c\36\0\1\u016a\2\0"+
    "\2\u016c\42\0\1\u016d\36\0\1\u016a\2\0\1\u016c\1\u016e"+
    "\36\0\1\u016a\2\0\2\u016e\41\0\1\u016f\1\u0170\36\0"+
    "\1\u016a\45\0\1\u0171\1\u0172\41\0\2\u0173\41\0\1\u0174"+
    "\1\u0175\36\0\1\u0176\2\0\1\u0174\1\u0175\36\0\1\u0176"+
    "\2\0\2\u0175\36\0\1\u0176\2\0\1\u0177\1\u0178\36\0"+
    "\1\u0176\2\0\2\u0178\42\0\1\u0179\36\0\1\u0176\2\0"+
    "\1\u0178\1\u017a\36\0\1\u0176\2\0\2\u017a\41\0\1\u017b"+
    "\1\u017c\36\0\1\u0176\45\0\1\u017d\1\u017e\41\0\2\u017f"+
    "\41\0\1\u0180\1\u0181\36\0\1\u0182\2\0\1\u0180\1\u0181"+
    "\36\0\1\u0182\2\0\2\u0181\36\0\1\u0182\2\0\1\u0183"+
    "\1\u0184\36\0\1\u0182\2\0\2\u0184\42\0\1\u0185\36\0"+
    "\1\u0182\2\0\1\u0184\1\u0186\36\0\1\u0182\2\0\2\u0186"+
    "\41\0\1\u0187\1\u0188\36\0\1\u0182\45\0\1\u0189\1\u018a"+
    "\41\0\2\u018b\41\0\1\u018c\1\u018d\36\0\1\u018e\2\0"+
    "\1\u018c\1\u018d\36\0\1\u018e\2\0\2\u018d\36\0\1\u018e"+
    "\2\0\1\u018f\1\u0190\36\0\1\u018e\2\0\2\u0190\42\0"+
    "\1\u0191\36\0\1\u018e\2\0\1\u0190\1\u0192\36\0\1\u018e"+
    "\2\0\2\u0192\41\0\1\u0193\1\u0194\36\0\1\u018e\45\0"+
    "\1\u0195\1\u0196\41\0\2\u0197\41\0\1\u0198\1\u0199\36\0"+
    "\1\u019a\2\0\1\u0198\1\u0199\36\0\1\u019a\2\0\2\u0199"+
    "\36\0\1\u019a\2\0\1\u019b\1\u019c\36\0\1\u019a\2\0"+
    "\2\u019c\42\0\1\u019d\36\0\1\u019a\2\0\1\u019c\1\u019e"+
    "\36\0\1\u019a\2\0\2\u019e\41\0\1\u019f\1\u01a0\36\0"+
    "\1\u019a\45\0\1\u01a1\1\u01a2\41\0\2\u01a3\41\0\1\u01a4"+
    "\1\u01a5\36\0\1\u01a6\2\0\1\u01a4\1\u01a5\36\0\1\u01a6"+
    "\2\0\2\u01a5\36\0\1\u01a6\2\0\1\u01a7\1\u01a8\36\0"+
    "\1\u01a6\2\0\2\u01a8\42\0\1\u01a9\36\0\1\u01a6\2\0"+
    "\1\u01a8\1\u01aa\36\0\1\u01a6\2\0\2\u01aa\41\0\1\u01ab"+
    "\1\u01ac\36\0\1\u01a6\45\0\1\u01ad\1\u01ae\41\0\2\u01af"+
    "\41\0\1\u01b0\1\u01b1\36\0\1\u01b2\2\0\1\u01b0\1\u01b1"+
    "\36\0\1\u01b2\2\0\2\u01b1\36\0\1\u01b2\2\0\1\u01b3"+
    "\1\u01b4\36\0\1\u01b2\2\0\2\u01b4\42\0\1\u01b5\36\0"+
    "\1\u01b2\2\0\1\u01b4\1\u01b6\36\0\1\u01b2\2\0\2\u01b6"+
    "\41\0\1\u01b7\1\u01b8\36\0\1\u01b2\45\0\1\u01b9\1\u01ba"+
    "\41\0\2\u01bb\41\0\1\u01bc\1\u01bd\36\0\1\u01be\2\0"+
    "\1\u01bc\1\u01bd\36\0\1\u01be\2\0\2\u01bd\36\0\1\u01be"+
    "\2\0\1\u01bf\1\u01c0\36\0\1\u01be\2\0\2\u01c0\42\0"+
    "\1\u01c1\36\0\1\u01be\2\0\1\u01c0\1\u01c2\36\0\1\u01be"+
    "\2\0\2\u01c2\41\0\1\u01c3\1\u01c4\36\0\1\u01be\45\0"+
    "\1\u01c5\1\u01c6\41\0\2\u01c7\41\0\1\u01c8\1\u01c9\36\0"+
    "\1\u01ca\2\0\1\u01c8\1\u01c9\36\0\1\u01ca\2\0\2\u01c9"+
    "\36\0\1\u01ca\2\0\1\u01cb\1\u01cc\36\0\1\u01ca\2\0"+
    "\2\u01cc\42\0\1\u01cd\36\0\1\u01ca\2\0\1\u01cc\1\u01ce"+
    "\36\0\1\u01ca\2\0\2\u01ce\41\0\1\u01cf\1\u01d0\36\0"+
    "\1\u01ca\45\0\1\u01d1\1\u01d2\41\0\2\u01d3\41\0\1\u01d4"+
    "\1\u01d5\36\0\1\u01d6\2\0\1\u01d4\1\u01d5\36\0\1\u01d6"+
    "\2\0\2\u01d5\36\0\1\u01d6\2\0\1\u01d7\1\u01d8\36\0"+
    "\1\u01d6\2\0\2\u01d8\42\0\1\u01d9\36\0\1\u01d6\2\0"+
    "\1\u01d8\1\u01da\36\0\1\u01d6\2\0\2\u01da\41\0\1\u01db"+
    "\1\u01dc\36\0\1\u01d6\45\0\1\u01dd\1\u01de\41\0\2\u01df"+
    "\41\0\1\u01e0\1\u01e1\36\0\1\u01e2\2\0\1\u01e0\1\u01e1"+
    "\36\0\1\u01e2\2\0\2\u01e1\36\0\1\u01e2\2\0\1\u01e3"+
    "\1\u01e4\36\0\1\u01e2\2\0\2\u01e4\42\0\1\u01e5\36\0"+
    "\1\u01e2\2\0\1\u01e4\1\u01e6\36\0\1\u01e2\2\0\2\u01e6"+
    "\41\0\1\u01e7\1\u01e8\36\0\1\u01e2\45\0\1\u01e9\1\u01ea"+
    "\41\0\2\u01eb\41\0\1\u01ec\1\u01ed\36\0\1\u01ee\2\0"+
    "\1\u01ec\1\u01ed\36\0\1\u01ee\2\0\2\u01ed\36\0\1\u01ee"+
    "\2\0\1\u01ef\1\u01f0\36\0\1\u01ee\2\0\2\u01f0\42\0"+
    "\1\u01f1\36\0\1\u01ee\2\0\1\u01f0\1\u01f2\36\0\1\u01ee"+
    "\2\0\2\u01f2\41\0\1\u01f3\1\u01f4\36\0\1\u01ee\45\0"+
    "\1\u01f5\1\u01f6\41\0\2\u01f7\41\0\1\u01f8\1\u01f9\36\0"+
    "\1\u01fa\2\0\1\u01f8\1\u01f9\36\0\1\u01fa\2\0\2\u01f9"+
    "\36\0\1\u01fa\2\0\1\u01fb\1\u01fc\36\0\1\u01fa\2\0"+
    "\2\u01fc\42\0\1\u01fd\36\0\1\u01fa\2\0\1\u01fc\1\u01fe"+
    "\36\0\1\u01fa\2\0\2\u01fe\41\0\1\u01ff\1\u0200\36\0"+
    "\1\u01fa\45\0\1\u0201\1\u0202\41\0\2\u0203\41\0\1\u0204"+
    "\1\u0205\36\0\1\u0206\2\0\1\u0204\1\u0205\36\0\1\u0206"+
    "\2\0\2\u0205\36\0\1\u0206\2\0\1\u0207\1\u0208\36\0"+
    "\1\u0206\2\0\2\u0208\42\0\1\u0209\36\0\1\u0206\2\0"+
    "\1\u0208\1\u020a\36\0\1\u0206\2\0\2\u020a\41\0\1\u020b"+
    "\1\u020c\36\0\1\u0206\45\0\1\u020d\1\u020e\41\0\2\u020f"+
    "\41\0\1\u0210\1\u0211\36\0\1\u0212\2\0\1\u0210\1\u0211"+
    "\36\0\1\u0212\2\0\2\u0211\36\0\1\u0212\2\0\1\u0213"+
    "\1\u0214\36\0\1\u0212\2\0\2\u0214\42\0\1\u0215\36\0"+
    "\1\u0212\2\0\1\u0214\1\u0216\36\0\1\u0212\2\0\2\u0216"+
    "\41\0\1\u0217\1\u0218\36\0\1\u0212\45\0\1\u0219\1\u021a"+
    "\41\0\2\u021b\41\0\1\u021c\1\u021d\36\0\1\u021e\2\0"+
    "\1\u021c\1\u021d\36\0\1\u021e\2\0\2\u021d\36\0\1\u021e"+
    "\2\0\1\u021f\1\u0220\36\0\1\u021e\2\0\2\u0220\42\0"+
    "\1\u0221\36\0\1\u021e\2\0\1\u0220\1\u0222\36\0\1\u021e"+
    "\2\0\2\u0222\41\0\1\u0223\1\u0224\36\0\1\u021e\45\0"+
    "\1\u0225\1\u0226\41\0\2\u0227\41\0\1\u0228\1\u0229\36\0"+
    "\1\u022a\2\0\1\u0228\1\u0229\36\0\1\u022a\2\0\2\u0229"+
    "\36\0\1\u022a\2\0\1\u022b\1\u022c\36\0\1\u022a\2\0"+
    "\2\u022c\42\0\1\u022d\36\0\1\u022a\2\0\1\u022c\1\u022e"+
    "\36\0\1\u022a\2\0\2\u022e\41\0\1\u022f\1\u0230\36\0"+
    "\1\u022a\45\0\1\u0231\1\u0232\41\0\2\u0233\41\0\1\u0234"+
    "\1\u0235\36\0\1\u0236\2\0\1\u0234\1\u0235\36\0\1\u0236"+
    "\2\0\2\u0235\36\0\1\u0236\2\0\1\u0237\1\u0238\36\0"+
    "\1\u0236\2\0\2\u0238\42\0\1\u0239\36\0\1\u0236\2\0"+
    "\1\u0238\1\u023a\36\0\1\u0236\2\0\2\u023a\41\0\1\u023b"+
    "\1\u023c\36\0\1\u0236\45\0\1\u023d\1\u023e\41\0\2\u023f"+
    "\41\0\1\u0240\1\u0241\36\0\1\u0242\2\0\1\u0240\1\u0241"+
    "\36\0\1\u0242\2\0\2\u0241\36\0\1\u0242\2\0\1\u0243"+
    "\1\u0244\36\0\1\u0242\2\0\2\u0244\42\0\1\u0245\36\0"+
    "\1\u0242\2\0\1\u0244\1\u0246\36\0\1\u0242\2\0\2\u0246"+
    "\41\0\1\u0247\1\u0248\36\0\1\u0242\45\0\1\u0249\1\u024a"+
    "\41\0\2\u024b\41\0\1\u024c\1\u024d\36\0\1\u024e\2\0"+
    "\1\u024c\1\u024d\36\0\1\u024e\2\0\2\u024d\36\0\1\u024e"+
    "\2\0\1\u024f\1\u0250\36\0\1\u024e\2\0\2\u0250\42\0"+
    "\1\u0251\36\0\1\u024e\2\0\1\u0250\1\u0252\36\0\1\u024e"+
    "\2\0\2\u0252\41\0\1\u0253\1\u0254\36\0\1\u024e\45\0"+
    "\1\u0255\1\u0256\41\0\2\u0257\41\0\1\u0258\1\u0259\36\0"+
    "\1\u025a\2\0\1\u0258\1\u0259\36\0\1\u025a\2\0\2\u0259"+
    "\36\0\1\u025a\2\0\1\u025b\1\u025c\36\0\1\u025a\2\0"+
    "\2\u025c\42\0\1\u025d\36\0\1\u025a\2\0\1\u025c\1\u025e"+
    "\36\0\1\u025a\2\0\2\u025e\41\0\1\u025f\1\u0260\36\0"+
    "\1\u025a\45\0\1\u0261\1\u0262\41\0\2\u0263\41\0\1\u0264"+
    "\1\u0265\36\0\1\u0266\2\0\1\u0264\1\u0265\36\0\1\u0266"+
    "\2\0\2\u0265\36\0\1\u0266\2\0\1\u0267\1\u0268\36\0"+
    "\1\u0266\2\0\2\u0268\42\0\1\u0269\36\0\1\u0266\2\0"+
    "\1\u0268\1\u026a\36\0\1\u0266\2\0\2\u026a\41\0\1\u026b"+
    "\1\u026c\36\0\1\u0266\45\0\1\u026d\1\u026e\41\0\2\u026f"+
    "\41\0\1\u0270\1\u0271\36\0\1\u0272\2\0\1\u0270\1\u0271"+
    "\36\0\1\u0272\2\0\2\u0271\36\0\1\u0272\2\0\1\u0273"+
    "\1\u0274\36\0\1\u0272\2\0\2\u0274\42\0\1\u0275\36\0"+
    "\1\u0272\2\0\1\u0274\1\u0276\36\0\1\u0272\2\0\2\u0276"+
    "\41\0\1\u0277\1\u0278\36\0\1\u0272\45\0\1\u0279\1\u027a"+
    "\41\0\2\u027b\41\0\1\u027c\1\u027d\36\0\1\u027e\2\0"+
    "\1\u027c\1\u027d\36\0\1\u027e\2\0\2\u027d\36\0\1\u027e"+
    "\2\0\1\u027f\1\u0280\36\0\1\u027e\2\0\2\u0280\42\0"+
    "\1\u0281\36\0\1\u027e\2\0\1\u0280\1\u0282\36\0\1\u027e"+
    "\2\0\2\u0282\41\0\1\u0283\1\u0284\36\0\1\u027e\45\0"+
    "\1\u0285\1\u0286\41\0\2\u0287\41\0\1\u0288\1\u0289\36\0"+
    "\1\u028a\2\0\1\u0288\1\u0289\36\0\1\u028a\2\0\2\u0289"+
    "\36\0\1\u028a\2\0\1\u028b\1\u028c\36\0\1\u028a\2\0"+
    "\2\u028c\42\0\1\u028d\36\0\1\u028a\2\0\1\u028c\1\u028e"+
    "\36\0\1\u028a\2\0\2\u028e\41\0\1\u028f\1\u0290\36\0"+
    "\1\u028a\45\0\1\u0291\1\u0292\41\0\2\u0293\41\0\1\u0294"+
    "\1\u0295\36\0\1\u0296\2\0\1\u0294\1\u0295\36\0\1\u0296"+
    "\2\0\2\u0295\36\0\1\u0296\2\0\1\u0297\1\u0298\36\0"+
    "\1\u0296\2\0\2\u0298\42\0\1\u0299\36\0\1\u0296\2\0"+
    "\1\u0298\1\u029a\36\0\1\u0296\2\0\2\u029a\41\0\1\u029b"+
    "\1\u029c\36\0\1\u0296\45\0\1\u029d\1\u029e\41\0\2\u029f"+
    "\41\0\1\u02a0\1\u02a1\36\0\1\u02a2\2\0\1\u02a0\1\u02a1"+
    "\36\0\1\u02a2\2\0\2\u02a1\36\0\1\u02a2\2\0\1\u02a3"+
    "\1\u02a4\36\0\1\u02a2\2\0\2\u02a4\42\0\1\u02a5\36\0"+
    "\1\u02a2\2\0\1\u02a4\1\u02a6\36\0\1\u02a2\2\0\2\u02a6"+
    "\41\0\1\u02a7\1\u02a8\36\0\1\u02a2\45\0\1\u02a9\1\u02aa"+
    "\41\0\2\u02ab\41\0\1\u02ac\1\u02ad\36\0\1\u02ae\2\0"+
    "\1\u02ac\1\u02ad\36\0\1\u02ae\2\0\2\u02ad\36\0\1\u02ae"+
    "\2\0\1\u02af\1\u02b0\36\0\1\u02ae\2\0\2\u02b0\42\0"+
    "\1\u02b1\36\0\1\u02ae\2\0\1\u02b0\1\u02b2\36\0\1\u02ae"+
    "\2\0\2\u02b2\41\0\1\u02b3\1\u02b4\36\0\1\u02ae\45\0"+
    "\1\u02b5\1\u02b6\41\0\2\u02b7\41\0\1\u02b8\1\u02b9\36\0"+
    "\1\u02ba\2\0\1\u02b8\1\u02b9\36\0\1\u02ba\2\0\2\u02b9"+
    "\36\0\1\u02ba\2\0\1\u02bb\1\u02bc\36\0\1\u02ba\2\0"+
    "\2\u02bc\42\0\1\u02bd\36\0\1\u02ba\2\0\1\u02bc\1\u02be"+
    "\36\0\1\u02ba\2\0\2\u02be\41\0\1\u02bf\1\u02c0\36\0"+
    "\1\u02ba\45\0\1\u02c1\1\u02c2\41\0\2\u02c3\41\0\1\u02c4"+
    "\1\u02c5\36\0\1\u02c6\2\0\1\u02c4\1\u02c5\36\0\1\u02c6"+
    "\2\0\2\u02c5\36\0\1\u02c6\2\0\1\u02c7\1\u02c8\36\0"+
    "\1\u02c6\2\0\2\u02c8\42\0\1\u02c9\36\0\1\u02c6\2\0"+
    "\1\u02c8\1\u02ca\36\0\1\u02c6\2\0\2\u02ca\41\0\1\u02cb"+
    "\1\u02cc\36\0\1\u02c6\45\0\1\u02cd\1\u02ce\41\0\2\u02cf"+
    "\41\0\1\u02d0\1\u02d1\36\0\1\u02d2\2\0\1\u02d0\1\u02d1"+
    "\36\0\1\u02d2\2\0\2\u02d1\36\0\1\u02d2\2\0\1\u02d3"+
    "\1\u02d4\36\0\1\u02d2\2\0\2\u02d4\42\0\1\u02d5\36\0"+
    "\1\u02d2\2\0\1\u02d4\1\u02d6\36\0\1\u02d2\2\0\2\u02d6"+
    "\41\0\1\u02d7\1\u02d8\36\0\1\u02d2\45\0\1\u02d9\1\u02da"+
    "\41\0\2\u02db\41\0\1\u02dc\1\u02dd\36\0\1\u02de\2\0"+
    "\1\u02dc\1\u02dd\36\0\1\u02de\2\0\2\u02dd\36\0\1\u02de"+
    "\2\0\1\u02df\1\u02e0\36\0\1\u02de\2\0\2\u02e0\42\0"+
    "\1\u02e1\36\0\1\u02de\2\0\1\u02e0\1\u02e2\36\0\1\u02de"+
    "\2\0\2\u02e2\41\0\1\u02e3\1\u02e4\36\0\1\u02de\45\0"+
    "\1\u02e5\1\u02e6\41\0\2\u02e7\41\0\1\u02e8\1\u02e9\36\0"+
    "\1\u02ea\2\0\1\u02e8\1\u02e9\36\0\1\u02ea\2\0\2\u02e9"+
    "\36\0\1\u02ea\2\0\1\u02eb\1\u02ec\36\0\1\u02ea\2\0"+
    "\2\u02ec\42\0\1\u02ed\36\0\1\u02ea\2\0\1\u02ec\1\u02ee"+
    "\36\0\1\u02ea\2\0\2\u02ee\41\0\1\u02ef\1\u02f0\36\0"+
    "\1\u02ea\45\0\1\u02f1\1\u02f2\41\0\2\u02f3\41\0\1\u02f4"+
    "\1\u02f5\36\0\1\u02f6\2\0\1\u02f4\1\u02f5\36\0\1\u02f6"+
    "\2\0\2\u02f5\36\0\1\u02f6\2\0\1\u02f7\1\u02f8\36\0"+
    "\1\u02f6\2\0\2\u02f8\42\0\1\u02f9\36\0\1\u02f6\2\0"+
    "\1\u02f8\1\u02fa\36\0\1\u02f6\2\0\2\u02fa\41\0\1\u02fb"+
    "\1\u02fc\36\0\1\u02f6\45\0\1\u02fd\1\u02fe\41\0\2\u02ff"+
    "\41\0\1\u0300\1\u0301\36\0\1\u0302\2\0\1\u0300\1\u0301"+
    "\36\0\1\u0302\2\0\2\u0301\36\0\1\u0302\2\0\1\u0303"+
    "\1\u0304\36\0\1\u0302\2\0\2\u0304\42\0\1\u0305\36\0"+
    "\1\u0302\2\0\1\u0304\1\u0306\36\0\1\u0302\2\0\2\u0306"+
    "\41\0\1\u0307\1\u0308\36\0\1\u0302\45\0\1\u0309\1\u030a"+
    "\41\0\2\u030b\41\0\1\u030c\1\u030d\36\0\1\u030e\2\0"+
    "\1\u030c\1\u030d\36\0\1\u030e\2\0\2\u030d\36\0\1\u030e"+
    "\2\0\1\u030f\1\u0310\36\0\1\u030e\2\0\2\u0310\42\0"+
    "\1\u0311\36\0\1\u030e\2\0\1\u0310\1\u0312\36\0\1\u030e"+
    "\2\0\2\u0312\41\0\1\u0313\1\u0314\36\0\1\u030e\45\0"+
    "\1\u0315\1\u0316\41\0\2\u0317\41\0\1\u0318\1\u0319\36\0"+
    "\1\u031a\2\0\1\u0318\1\u0319\36\0\1\u031a\2\0\2\u0319"+
    "\36\0\1\u031a\2\0\1\u031b\1\u031c\36\0\1\u031a\2\0"+
    "\2\u031c\42\0\1\u031d\36\0\1\u031a\2\0\1\u031c\1\u031e"+
    "\36\0\1\u031a\2\0\2\u031e\41\0\1\u031f\1\u0320\36\0"+
    "\1\u031a\45\0\1\u0321\1\u0322\41\0\2\u0323\41\0\1\u0324"+
    "\1\u0325\36\0\1\u0326\2\0\1\u0324\1\u0325\36\0\1\u0326"+
    "\2\0\2\u0325\36\0\1\u0326\2\0\1\u0327\1\u0328\36\0"+
    "\1\u0326\2\0\2\u0328\42\0\1\u0329\36\0\1\u0326\2\0"+
    "\1\u0328\1\u032a\36\0\1\u0326\2\0\2\u032a\41\0\1\u032b"+
    "\1\u032c\36\0\1\u0326\45\0\1\u032d\1\u032e\41\0\2\u032f"+
    "\41\0\1\u0330\1\u0331\36\0\1\u0332\2\0\1\u0330\1\u0331"+
    "\36\0\1\u0332\2\0\2\u0331\36\0\1\u0332\2\0\1\u0333"+
    "\1\u0334\36\0\1\u0332\2\0\2\u0334\42\0\1\u0335\36\0"+
    "\1\u0332\2\0\1\u0334\1\u0336\36\0\1\u0332\2\0\2\u0336"+
    "\41\0\1\u0337\1\u0338\36\0\1\u0332\45\0\1\u0339\1\u033a"+
    "\41\0\2\u033b\41\0\1\u033c\1\u033d\36\0\1\u033e\2\0"+
    "\1\u033c\1\u033d\36\0\1\u033e\2\0\2\u033d\36\0\1\u033e"+
    "\2\0\1\u033f\1\u0340\36\0\1\u033e\2\0\2\u0340\42\0"+
    "\1\u0341\36\0\1\u033e\2\0\1\u0340\1\u0342\36\0\1\u033e"+
    "\2\0\2\u0342\41\0\1\u0343\1\u0344\36\0\1\u033e\45\0"+
    "\1\u0345\1\u0346\41\0\2\u0347\41\0\1\u0348\1\u0349\36\0"+
    "\1\u034a\2\0\1\u0348\1\u0349\36\0\1\u034a\2\0\2\u0349"+
    "\36\0\1\u034a\2\0\1\u034b\1\u034c\36\0\1\u034a\2\0"+
    "\2\u034c\42\0\1\u034d\36\0\1\u034a\2\0\1\u034c\1\u034e"+
    "\36\0\1\u034a\2\0\2\u034e\41\0\1\u034f\1\u0350\36\0"+
    "\1\u034a\45\0\1\u0351\1\u0352\41\0\2\u0353\41\0\1\u0354"+
    "\1\u0355\36\0\1\u0356\2\0\1\u0354\1\u0355\36\0\1\u0356"+
    "\2\0\2\u0355\36\0\1\u0356\2\0\1\u0357\1\u0358\36\0"+
    "\1\u0356\2\0\2\u0358\42\0\1\u0359\36\0\1\u0356\2\0"+
    "\1\u0358\1\u035a\36\0\1\u0356\2\0\2\u035a\41\0\1\u035b"+
    "\1\u035c\36\0\1\u0356\45\0\1\u035d\1\u035e\41\0\2\u035f"+
    "\41\0\1\u0360\1\u0361\36\0\1\u0362\2\0\1\u0360\1\u0361"+
    "\36\0\1\u0362\2\0\2\u0361\36\0\1\u0362\2\0\1\u0363"+
    "\1\u0364\36\0\1\u0362\2\0\2\u0364\42\0\1\u0365\36\0"+
    "\1\u0362\2\0\1\u0364\1\u0366\36\0\1\u0362\2\0\2\u0366"+
    "\41\0\1\u0367\1\u0368\36\0\1\u0362\45\0\1\u0369\1\u036a"+
    "\41\0\2\u036b\41\0\1\u036c\1\u036d\36\0\1\u036e\2\0"+
    "\1\u036c\1\u036d\36\0\1\u036e\2\0\2\u036d\36\0\1\u036e"+
    "\2\0\1\u036f\1\u0370\36\0\1\u036e\2\0\2\u0370\42\0"+
    "\1\u0371\36\0\1\u036e\2\0\1\u0370\1\u0372\36\0\1\u036e"+
    "\2\0\2\u0372\41\0\1\u0373\1\u0374\36\0\1\u036e\45\0"+
    "\1\u0375\1\u0376\41\0\2\u0377\41\0\1\u0378\1\u0379\36\0"+
    "\1\u037a\2\0\1\u0378\1\u0379\36\0\1\u037a\2\0\2\u0379"+
    "\36\0\1\u037a\2\0\1\u037b\1\u037c\36\0\1\u037a\2\0"+
    "\2\u037c\42\0\1\u037d\36\0\1\u037a\2\0\1\u037c\1\u037e"+
    "\36\0\1\u037a\2\0\2\u037e\41\0\1\u037f\1\u0380\36\0"+
    "\1\u037a\45\0\1\u0381\1\u0382\41\0\2\u0383\41\0\1\u0384"+
    "\1\u0385\36\0\1\u0386\2\0\1\u0384\1\u0385\36\0\1\u0386"+
    "\2\0\2\u0385\36\0\1\u0386\2\0\1\u0387\1\u0388\36\0"+
    "\1\u0386\2\0\2\u0388\42\0\1\u0389\36\0\1\u0386\2\0"+
    "\1\u0388\1\u038a\36\0\1\u0386\2\0\2\u038a\41\0\1\u038b"+
    "\1\u038c\36\0\1\u0386\45\0\1\u038d\1\u038e\41\0\2\u038f"+
    "\41\0\1\u0390\1\u0391\36\0\1\u0392\2\0\1\u0390\1\u0391"+
    "\36\0\1\u0392\2\0\2\u0391\36\0\1\u0392\2\0\1\u0393"+
    "\1\u0394\36\0\1\u0392\2\0\2\u0394\42\0\1\u0395\36\0"+
    "\1\u0392\2\0\1\u0394\1\u0396\36\0\1\u0392\2\0\2\u0396"+
    "\41\0\1\u0397\1\u0398\36\0\1\u0392\45\0\1\u0399\1\u039a"+
    "\41\0\2\u039b\41\0\1\u039c\1\u039d\36\0\1\u039e\2\0"+
    "\1\u039c\1\u039d\36\0\1\u039e\2\0\2\u039d\36\0\1\u039e"+
    "\2\0\1\u039f\1\u03a0\36\0\1\u039e\2\0\2\u03a0\42\0"+
    "\1\u03a1\36\0\1\u039e\2\0\1\u03a0\1\u03a2\36\0\1\u039e"+
    "\2\0\2\u03a2\41\0\1\u03a3\1\u03a4\36\0\1\u039e\45\0"+
    "\1\u03a5\1\u03a6\41\0\2\u03a7\41\0\1\u03a8\1\u03a9\36\0"+
    "\1\u03aa\2\0\1\u03a8\1\u03a9\36\0\1\u03aa\2\0\2\u03a9"+
    "\36\0\1\u03aa\2\0\1\u03ab\1\u03ac\36\0\1\u03aa\2\0"+
    "\2\u03ac\42\0\1\u03ad\36\0\1\u03aa\2\0\1\u03ac\1\u03ae"+
    "\36\0\1\u03aa\2\0\2\u03ae\41\0\1\u03af\1\u03b0\36\0"+
    "\1\u03aa\45\0\1\u03b1\1\u03b2\41\0\2\u03b3\41\0\1\u03b4"+
    "\1\u03b5\36\0\1\u03b6\2\0\1\u03b4\1\u03b5\36\0\1\u03b6"+
    "\2\0\2\u03b5\36\0\1\u03b6\2\0\1\u03b7\1\u03b8\36\0"+
    "\1\u03b6\2\0\2\u03b8\42\0\1\u03b9\36\0\1\u03b6\2\0"+
    "\1\u03b8\1\u03ba\36\0\1\u03b6\2\0\2\u03ba\41\0\1\u03bb"+
    "\1\u03bc\36\0\1\u03b6\45\0\1\u03bd\1\u03be\41\0\2\u03bf"+
    "\41\0\1\u03c0\1\u03c1\36\0\1\u03c2\2\0\1\u03c0\1\u03c1"+
    "\36\0\1\u03c2\2\0\2\u03c1\36\0\1\u03c2\2\0\1\u03c3"+
    "\1\u03c4\36\0\1\u03c2\2\0\2\u03c4\42\0\1\u03c5\36\0"+
    "\1\u03c2\2\0\1\u03c4\1\u03c6\36\0\1\u03c2\2\0\2\u03c6"+
    "\41\0\1\u03c7\1\u03c8\36\0\1\u03c2\45\0\1\u03c9\1\u03ca"+
    "\41\0\2\u03cb\41\0\1\u03cc\1\u03cd\36\0\1\u03ce\2\0"+
    "\1\u03cc\1\u03cd\36\0\1\u03ce\2\0\2\u03cd\36\0\1\u03ce"+
    "\2\0\1\u03cf\1\u03d0\36\0\1\u03ce\2\0\2\u03d0\42\0"+
    "\1\u03d1\36\0\1\u03ce\2\0\1\u03d0\1\u03d2\36\0\1\u03ce"+
    "\2\0\2\u03d2\41\0\1\u03d3\1\u03d4\36\0\1\u03ce\45\0"+
    "\1\u03d5\1\u03d6\41\0\2\u03d7\41\0\1\u03d8\1\u03d9\36\0"+
    "\1\u03da\2\0\1\u03d8\1\u03d9\36\0\1\u03da\2\0\2\u03d9"+
    "\36\0\1\u03da\2\0\1\u03db\1\u03dc\36\0\1\u03da\2\0"+
    "\2\u03dc\42\0\1\u03dd\36\0\1\u03da\2\0\1\u03dc\1\u03de"+
    "\36\0\1\u03da\2\0\2\u03de\41\0\1\u03df\1\u03e0\36\0"+
    "\1\u03da\45\0\1\u03e1\1\u03e2\41\0\2\u03e3\41\0\1\u03e4"+
    "\1\u03e5\36\0\1\u03e6\2\0\1\u03e4\1\u03e5\36\0\1\u03e6"+
    "\2\0\2\u03e5\36\0\1\u03e6\2\0\1\u03e7\1\u03e8\36\0"+
    "\1\u03e6\2\0\2\u03e8\42\0\1\u03e9\36\0\1\u03e6\2\0"+
    "\1\u03e8\1\u03ea\36\0\1\u03e6\2\0\2\u03ea\41\0\1\u03eb"+
    "\1\u03ec\36\0\1\u03e6\45\0\1\u03ed\1\u03ee\41\0\2\u03ef"+
    "\41\0\1\u03f0\1\u03f1\36\0\1\u03f2\2\0\1\u03f0\1\u03f1"+
    "\36\0\1\u03f2\2\0\2\u03f1\36\0\1\u03f2\2\0\1\u03f3"+
    "\1\u03f4\36\0\1\u03f2\2\0\2\u03f4\42\0\1\u03f5\36\0"+
    "\1\u03f2\2\0\1\u03f4\1\u03f6\36\0\1\u03f2\2\0\2\u03f6"+
    "\41\0\1\u03f7\1\u03f8\36\0\1\u03f2\45\0\1\u03f9\1\u03fa"+
    "\41\0\2\u03fb\41\0\1\u03fc\1\u03fd\36\0\1\u03fe\2\0"+
    "\1\u03fc\1\u03fd\36\0\1\u03fe\2\0\2\u03fd\36\0\1\u03fe"+
    "\2\0\1\u03ff\1\u0400\36\0\1\u03fe\2\0\2\u0400\42\0"+
    "\1\u0401\36\0\1\u03fe\2\0\1\u0400\1\u0402\36\0\1\u03fe"+
    "\2\0\2\u0402\41\0\1\u0403\1\u0404\36\0\1\u03fe\45\0"+
    "\1\u0405\1\u0406\41\0\2\u0407\41\0\1\u0408\1\u0409\36\0"+
    "\1\u040a\2\0\1\u0408\1\u0409\36\0\1\u040a\2\0\2\u0409"+
    "\36\0\1\u040a\2\0\1\u040b\1\u040c\36\0\1\u040a\2\0"+
    "\2\u040c\42\0\1\u040d\36\0\1\u040a\2\0\1\u040c\1\u040e"+
    "\36\0\1\u040a\2\0\2\u040e\41\0\1\u040f\1\u0410\36\0"+
    "\1\u040a\45\0\1\u0411\1\u0412\41\0\2\u0413\41\0\1\u0414"+
    "\1\u0415\36\0\1\u0416\2\0\1\u0414\1\u0415\36\0\1\u0416"+
    "\2\0\2\u0415\36\0\1\u0416\2\0\1\u0417\1\u0418\36\0"+
    "\1\u0416\2\0\2\u0418\42\0\1\u0419\36\0\1\u0416\2\0"+
    "\1\u0418\1\u041a\36\0\1\u0416\2\0\2\u041a\41\0\1\u041b"+
    "\1\u041c\36\0\1\u0416\45\0\1\u041d\1\u041e\41\0\2\u041f"+
    "\41\0\1\u0420\1\u0421\36\0\1\u0422\2\0\1\u0420\1\u0421"+
    "\36\0\1\u0422\2\0\2\u0421\36\0\1\u0422\2\0\1\u0423"+
    "\1\u0424\36\0\1\u0422\2\0\2\u0424\42\0\1\u0425\36\0"+
    "\1\u0422\2\0\1\u0424\1\u0426\36\0\1\u0422\2\0\2\u0426"+
    "\41\0\1\u0427\1\u0428\36\0\1\u0422\45\0\1\u0429\1\u042a"+
    "\41\0\2\u042b\41\0\1\u042c\1\u042d\36\0\1\u042e\2\0"+
    "\1\u042c\1\u042d\36\0\1\u042e\2\0\2\u042d\36\0\1\u042e"+
    "\2\0\1\u042f\1\u0430\36\0\1\u042e\2\0\2\u0430\42\0"+
    "\1\u0431\36\0\1\u042e\2\0\1\u0430\1\u0432\36\0\1\u042e"+
    "\2\0\2\u0432\41\0\1\u0433\1\u0434\36\0\1\u042e\45\0"+
    "\1\u0435\1\u0436\41\0\2\u0437\41\0\1\u0438\1\u0439\36\0"+
    "\1\u043a\2\0\1\u0438\1\u0439\36\0\1\u043a\2\0\2\u0439"+
    "\36\0\1\u043a\2\0\1\u043b\1\u043c\36\0\1\u043a\2\0"+
    "\2\u043c\42\0\1\u043d\36\0\1\u043a\2\0\1\u043c\1\u043e"+
    "\36\0\1\u043a\2\0\2\u043e\41\0\1\u043f\1\u0440\36\0"+
    "\1\u043a\45\0\1\u0441\1\u0442\41\0\2\u0443\41\0\1\u0444"+
    "\1\u0445\36\0\1\u0446\2\0\1\u0444\1\u0445\36\0\1\u0446"+
    "\2\0\2\u0445\36\0\1\u0446\2\0\1\u0447\1\u0448\36\0"+
    "\1\u0446\2\0\2\u0448\42\0\1\u0449\36\0\1\u0446\2\0"+
    "\1\u0448\1\u044a\36\0\1\u0446\2\0\2\u044a\41\0\1\u044b"+
    "\1\u044c\36\0\1\u0446\45\0\1\u044d\1\u044e\41\0\2\u044f"+
    "\41\0\1\u0450\1\u0451\36\0\1\u0452\2\0\1\u0450\1\u0451"+
    "\36\0\1\u0452\2\0\2\u0451\36\0\1\u0452\2\0\1\u0453"+
    "\1\u0454\36\0\1\u0452\2\0\2\u0454\42\0\1\u0455\36\0"+
    "\1\u0452\2\0\1\u0454\1\u0456\36\0\1\u0452\2\0\2\u0456"+
    "\41\0\1\u0457\1\u0458\36\0\1\u0452\45\0\1\u0459\1\u045a"+
    "\41\0\2\u045b\41\0\1\u045c\1\u045d\36\0\1\u045e\2\0"+
    "\1\u045c\1\u045d\36\0\1\u045e\2\0\2\u045d\36\0\1\u045e"+
    "\2\0\1\u045f\1\u0460\36\0\1\u045e\2\0\2\u0460\42\0"+
    "\1\u0461\36\0\1\u045e\2\0\1\u0460\1\u0462\36\0\1\u045e"+
    "\2\0\2\u0462\41\0\1\u0463\1\u0464\36\0\1\u045e\45\0"+
    "\1\u0465\1\u0466\41\0\2\u0467\41\0\1\u0468\1\u0469\36\0"+
    "\1\u046a\2\0\1\u0468\1\u0469\36\0\1\u046a\2\0\2\u0469"+
    "\36\0\1\u046a\2\0\1\u046b\1\u046c\36\0\1\u046a\2\0"+
    "\2\u046c\42\0\1\u046d\36\0\1\u046a\2\0\1\u046c\1\u046e"+
    "\36\0\1\u046a\2\0\2\u046e\41\0\1\u046f\1\u0470\36\0"+
    "\1\u046a\45\0\1\u0471\1\u0472\41\0\2\u0473\41\0\1\u0474"+
    "\1\u0475\36\0\1\u0476\2\0\1\u0474\1\u0475\36\0\1\u0476"+
    "\2\0\2\u0475\36\0\1\u0476\2\0\1\u0477\1\u0478\36\0"+
    "\1\u0476\2\0\2\u0478\42\0\1\u0479\36\0\1\u0476\2\0"+
    "\1\u0478\1\u047a\36\0\1\u0476\2\0\2\u047a\41\0\1\u047b"+
    "\1\u047c\36\0\1\u0476\45\0\1\u047d\1\u047e\41\0\2\u047f"+
    "\41\0\1\u0480\1\u0481\36\0\1\u0482\2\0\1\u0480\1\u0481"+
    "\36\0\1\u0482\2\0\2\u0481\36\0\1\u0482\2\0\1\u0483"+
    "\1\u0484\36\0\1\u0482\2\0\2\u0484\42\0\1\u0485\36\0"+
    "\1\u0482\2\0\1\u0484\1\u0486\36\0\1\u0482\2\0\2\u0486"+
    "\41\0\1\u0487\1\u0488\36\0\1\u0482\45\0\1\u0489\1\u048a"+
    "\41\0\2\u048b\41\0\1\u048c\1\u048d\36\0\1\u048e\2\0"+
    "\1\u048c\1\u048d\36\0\1\u048e\2\0\2\u048d\36\0\1\u048e"+
    "\2\0\1\u048f\1\u0490\36\0\1\u048e\2\0\2\u0490\42\0"+
    "\1\u0491\36\0\1\u048e\2\0\1\u0490\1\u0492\36\0\1\u048e"+
    "\2\0\2\u0492\41\0\1\u0493\1\u0494\36\0\1\u048e\45\0"+
    "\1\u0495\1\u0496\41\0\2\u0497\41\0\1\u0498\1\u0499\36\0"+
    "\1\u049a\2\0\1\u0498\1\u0499\36\0\1\u049a\2\0\2\u0499"+
    "\36\0\1\u049a\2\0\1\u049b\1\u049c\36\0\1\u049a\2\0"+
    "\2\u049c\42\0\1\u049d\36\0\1\u049a\2\0\1\u049c\1\u049e"+
    "\36\0\1\u049a\2\0\2\u049e\41\0\1\u049f\1\u04a0\36\0"+
    "\1\u049a\45\0\1\u04a1\1\u04a2\41\0\2\u04a3\41\0\1\u04a4"+
    "\1\u04a5\36\0\1\u04a6\2\0\1\u04a4\1\u04a5\36\0\1\u04a6"+
    "\2\0\2\u04a5\36\0\1\u04a6\2\0\1\u04a7\1\u04a8\36\0"+
    "\1\u04a6\2\0\2\u04a8\42\0\1\u04a9\36\0\1\u04a6\2\0"+
    "\1\u04a8\1\u04aa\36\0\1\u04a6\2\0\2\u04aa\41\0\1\u04ab"+
    "\1\u04ac\36\0\1\u04a6\45\0\1\u04ad\1\u04ae\41\0\2\u04af"+
    "\41\0\1\u04b0\1\u04b1\36\0\1\u04b2\2\0\1\u04b0\1\u04b1"+
    "\36\0\1\u04b2\2\0\2\u04b1\36\0\1\u04b2\2\0\1\u04b3"+
    "\1\u04b4\36\0\1\u04b2\2\0\2\u04b4\42\0\1\u04b5\36\0"+
    "\1\u04b2\2\0\1\u04b4\1\u04b6\36\0\1\u04b2\2\0\2\u04b6"+
    "\41\0\1\u04b7\1\u04b8\36\0\1\u04b2\45\0\1\u04b9\1\u04ba"+
    "\41\0\2\u04bb\41\0\1\u04bc\1\u04bd\36\0\1\u04be\2\0"+
    "\1\u04bc\1\u04bd\36\0\1\u04be\2\0\2\u04bd\36\0\1\u04be"+
    "\2\0\1\u04bf\1\u04c0\36\0\1\u04be\2\0\2\u04c0\42\0"+
    "\1\u04c1\36\0\1\u04be\2\0\1\u04c0\1\u04c2\36\0\1\u04be"+
    "\2\0\2\u04c2\41\0\1\u04c3\1\u04c4\36\0\1\u04be\45\0"+
    "\1\u04c5\1\u04c6\41\0\2\u04c7\41\0\1\u04c8\1\u04c9\36\0"+
    "\1\u04ca\2\0\1\u04c8\1\u04c9\36\0\1\u04ca\2\0\2\u04c9"+
    "\36\0\1\u04ca\2\0\1\u04cb\1\u04cc\36\0\1\u04ca\2\0"+
    "\2\u04cc\42\0\1\u04cd\36\0\1\u04ca\2\0\1\u04cc\1\u04ce"+
    "\36\0\1\u04ca\2\0\2\u04ce\41\0\1\u04cf\1\u04d0\36\0"+
    "\1\u04ca\45\0\1\u04d1\1\u04d2\41\0\2\u04d3\41\0\1\u04d4"+
    "\1\u04d5\36\0\1\u04d6\2\0\1\u04d4\1\u04d5\36\0\1\u04d6"+
    "\2\0\2\u04d5\36\0\1\u04d6\2\0\1\u04d7\1\u04d8\36\0"+
    "\1\u04d6\2\0\2\u04d8\42\0\1\u04d9\36\0\1\u04d6\2\0"+
    "\1\u04d8\1\u04da\36\0\1\u04d6\2\0\2\u04da\41\0\1\u04db"+
    "\1\u04dc\36\0\1\u04d6\45\0\1\u04dd\1\u04de\41\0\2\u04df"+
    "\41\0\1\u04e0\1\u04e1\36\0\1\u04e2\2\0\1\u04e0\1\u04e1"+
    "\36\0\1\u04e2\2\0\2\u04e1\36\0\1\u04e2\2\0\1\u04e3"+
    "\1\u04e4\36\0\1\u04e2\2\0\2\u04e4\42\0\1\u04e5\36\0"+
    "\1\u04e2\2\0\1\u04e4\1\u04e6\36\0\1\u04e2\2\0\2\u04e6"+
    "\41\0\1\u04e7\1\u04e8\36\0\1\u04e2\45\0\1\u04e9\1\u04ea"+
    "\41\0\2\u04eb\41\0\1\u04ec\1\u04ed\36\0\1\u04ee\2\0"+
    "\1\u04ec\1\u04ed\36\0\1\u04ee\2\0\2\u04ed\36\0\1\u04ee"+
    "\2\0\1\u04ef\1\u04f0\36\0\1\u04ee\2\0\2\u04f0\42\0"+
    "\1\u04f1\36\0\1\u04ee\2\0\1\u04f0\1\u04f2\36\0\1\u04ee"+
    "\2\0\2\u04f2\41\0\1\u04f3\1\u04f4\36\0\1\u04ee\45\0"+
    "\1\u04f5\1\u04f6\41\0\2\u04f7\41\0\1\u04f8\1\u04f9\36\0"+
    "\1\u04fa\2\0\1\u04f8\1\u04f9\36\0\1\u04fa\2\0\2\u04f9"+
    "\36\0\1\u04fa\2\0\1\u04fb\1\u04fc\36\0\1\u04fa\2\0"+
    "\2\u04fc\42\0\1\u04fd\36\0\1\u04fa\2\0\1\u04fc\1\u04fe"+
    "\36\0\1\u04fa\2\0\2\u04fe\41\0\1\u04ff\1\u0500\36\0"+
    "\1\u04fa\45\0\1\u0501\1\u0502\41\0\2\u0503\41\0\1\u0504"+
    "\1\u0505\36\0\1\u0506\2\0\1\u0504\1\u0505\36\0\1\u0506"+
    "\2\0\2\u0505\36\0\1\u0506\2\0\1\u0507\1\u0508\36\0"+
    "\1\u0506\2\0\2\u0508\42\0\1\u0509\36\0\1\u0506\2\0"+
    "\1\u0508\1\u050a\36\0\1\u0506\2\0\2\u050a\41\0\1\u050b"+
    "\1\u050c\36\0\1\u0506\45\0\1\u050d\1\u050e\41\0\2\u050f"+
    "\41\0\1\u0510\1\u0511\36\0\1\u0512\2\0\1\u0510\1\u0511"+
    "\36\0\1\u0512\2\0\2\u0511\36\0\1\u0512\2\0\1\u0513"+
    "\1\u0514\36\0\1\u0512\2\0\2\u0514\42\0\1\u0515\36\0"+
    "\1\u0512\2\0\1\u0514\1\u0516\36\0\1\u0512\2\0\2\u0516"+
    "\41\0\1\u0517\1\u0518\36\0\1\u0512\45\0\1\u0519\1\u051a"+
    "\41\0\2\u051b\41\0\1\u051c\1\u051d\36\0\1\u051e\2\0"+
    "\1\u051c\1\u051d\36\0\1\u051e\2\0\2\u051d\36\0\1\u051e"+
    "\2\0\1\u051f\1\u0520\36\0\1\u051e\2\0\2\u0520\42\0"+
    "\1\u0521\36\0\1\u051e\2\0\1\u0520\1\u0522\36\0\1\u051e"+
    "\2\0\2\u0522\41\0\1\u0523\1\u0524\36\0\1\u051e\45\0"+
    "\1\u0525\1\u0526\41\0\2\u0527\41\0\1\u0528\1\u0529\36\0"+
    "\1\u052a\2\0\1\u0528\1\u0529\36\0\1\u052a\2\0\2\u0529"+
    "\36\0\1\u052a\2\0\1\u052b\1\u052c\36\0\1\u052a\2\0"+
    "\2\u052c\42\0\1\u052d\36\0\1\u052a\2\0\1\u052c\1\u052e"+
    "\36\0\1\u052a\2\0\2\u052e\41\0\1\u052f\1\u0530\36\0"+
    "\1\u052a\45\0\1\u0531\1\u0532\41\0\2\u0533\41\0\1\u0534"+
    "\1\u0535\36\0\1\u0536\2\0\1\u0534\1\u0535\36\0\1\u0536"+
    "\2\0\2\u0535\36\0\1\u0536\2\0\1\u0537\1\u0538\36\0"+
    "\1\u0536\2\0\2\u0538\42\0\1\u0539\36\0\1\u0536\2\0"+
    "\1\u0538\1\u053a\36\0\1\u0536\2\0\2\u053a\41\0\1\u053b"+
    "\1\u053c\36\0\1\u0536\45\0\1\u053d\1\u053e\41\0\2\u053f"+
    "\41\0\1\u0540\1\u0541\36\0\1\u0542\2\0\1\u0540\1\u0541"+
    "\36\0\1\u0542\2\0\2\u0541\36\0\1\u0542\2\0\1\u0543"+
    "\1\u0544\36\0\1\u0542\2\0\2\u0544\42\0\1\u0545\36\0"+
    "\1\u0542\2\0\1\u0544\1\u0546\36\0\1\u0542\2\0\2\u0546"+
    "\41\0\1\u0547\1\u0548\36\0\1\u0542\45\0\1\u0549\1\u054a"+
    "\41\0\2\u054b\41\0\1\u054c\1\u054d\36\0\1\u054e\2\0"+
    "\1\u054c\1\u054d\36\0\1\u054e\2\0\2\u054d\36\0\1\u054e"+
    "\2\0\1\u054f\1\u0550\36\0\1\u054e\2\0\2\u0550\42\0"+
    "\1\u0551\36\0\1\u054e\2\0\1\u0550\1\u0552\36\0\1\u054e"+
    "\2\0\2\u0552\41\0\1\u0553\1\u0554\36\0\1\u054e\45\0"+
    "\1\u0555\1\u0556\41\0\2\u0557\41\0\1\u0558\1\u0559\36\0"+
    "\1\u055a\2\0\1\u0558\1\u0559\36\0\1\u055a\2\0\2\u0559"+
    "\36\0\1\u055a\2\0\1\u055b\1\u055c\36\0\1\u055a\2\0"+
    "\2\u055c\42\0\1\u055d\36\0\1\u055a\2\0\1\u055c\1\u055e"+
    "\36\0\1\u055a\2\0\2\u055e\41\0\1\u055f\1\u0560\36\0"+
    "\1\u055a\45\0\1\u0561\1\u0562\41\0\2\u0563\41\0\1\u0564"+
    "\1\u0565\36\0\1\u0566\2\0\1\u0564\1\u0565\36\0\1\u0566"+
    "\2\0\2\u0565\36\0\1\u0566\2\0\1\u0567\1\u0568\36\0"+
    "\1\u0566\2\0\2\u0568\42\0\1\u0569\36\0\1\u0566\2\0"+
    "\1\u0568\1\u056a\36\0\1\u0566\2\0\2\u056a\41\0\1\u056b"+
    "\1\u056c\36\0\1\u0566\45\0\1\u056d\1\u056e\41\0\2\u056f"+
    "\41\0\1\u0570\1\u0571\36\0\1\u0572\2\0\1\u0570\1\u0571"+
    "\36\0\1\u0572\2\0\2\u0571\36\0\1\u0572\2\0\1\u0573"+
    "\1\u0574\36\0\1\u0572\2\0\2\u0574\42\0\1\u0575\36\0"+
    "\1\u0572\2\0\1\u0574\1\u0576\36\0\1\u0572\2\0\2\u0576"+
    "\41\0\1\u0577\1\u0578\36\0\1\u0572\45\0\1\u0579\1\u057a"+
    "\41\0\2\u057b\41\0\1\u057c\1\u057d\36\0\1\u057e\2\0"+
    "\1\u057c\1\u057d\36\0\1\u057e\2\0\2\u057d\36\0\1\u057e"+
    "\2\0\1\u057f\1\u0580\36\0\1\u057e\2\0\2\u0580\42\0"+
    "\1\u0581\36\0\1\u057e\2\0\1\u0580\1\u0582\36\0\1\u057e"+
    "\2\0\2\u0582\41\0\1\u0583\1\u0584\36\0\1\u057e\45\0"+
    "\1\u0585\1\u0586\41\0\2\u0587\41\0\1\u0588\1\u0589\36\0"+
    "\1\u058a\2\0\1\u0588\1\u0589\36\0\1\u058a\2\0\2\u0589"+
    "\36\0\1\u058a\2\0\1\u058b\1\u058c\36\0\1\u058a\2\0"+
    "\2\u058c\42\0\1\u058d\36\0\1\u058a\2\0\1\u058c\1\u058e"+
    "\36\0\1\u058a\2\0\2\u058e\41\0\1\u058f\1\u0590\36\0"+
    "\1\u058a\45\0\1\u0591\1\u0592\41\0\2\u0593\41\0\1\u0594"+
    "\1\u0595\36\0\1\u0596\2\0\1\u0594\1\u0595\36\0\1\u0596"+
    "\2\0\2\u0595\36\0\1\u0596\2\0\1\u0597\1\u0598\36\0"+
    "\1\u0596\2\0\2\u0598\42\0\1\u0599\36\0\1\u0596\2\0"+
    "\1\u0598\1\u059a\36\0\1\u0596\2\0\2\u059a\41\0\1\u059b"+
    "\1\u059c\36\0\1\u0596\45\0\1\u059d\1\u059e\41\0\2\u059f"+
    "\41\0\1\u05a0\1\u05a1\36\0\1\u05a2\2\0\1\u05a0\1\u05a1"+
    "\36\0\1\u05a2\2\0\2\u05a1\36\0\1\u05a2\2\0\1\u05a3"+
    "\1\u05a4\36\0\1\u05a2\2\0\2\u05a4\42\0\1\u05a5\36\0"+
    "\1\u05a2\2\0\1\u05a4\1\u05a6\36\0\1\u05a2\2\0\2\u05a6"+
    "\41\0\1\u05a7\1\u05a8\36\0\1\u05a2\45\0\1\u05a9\1\u05aa"+
    "\41\0\2\u05ab\41\0\1\u05ac\1\u05ad\36\0\1\u05ae\2\0"+
    "\1\u05ac\1\u05ad\36\0\1\u05ae\2\0\2\u05ad\36\0\1\u05ae"+
    "\2\0\1\u05af\1\u05b0\36\0\1\u05ae\2\0\2\u05b0\42\0"+
    "\1\u05b1\36\0\1\u05ae\2\0\1\u05b0\1\u05b2\36\0\1\u05ae"+
    "\2\0\2\u05b2\41\0\1\u05b3\1\u05b4\36\0\1\u05ae\45\0"+
    "\1\u05b5\1\u05b6\41\0\2\u05b7\41\0\1\u05b8\1\u05b9\36\0"+
    "\1\u05ba\2\0\1\u05b8\1\u05b9\36\0\1\u05ba\2\0\2\u05b9"+
    "\36\0\1\u05ba\2\0\1\u05bb\1\u05bc\36\0\1\u05ba\2\0"+
    "\2\u05bc\42\0\1\u05bd\36\0\1\u05ba\2\0\1\u05bc\1\u05be"+
    "\36\0\1\u05ba\2\0\2\u05be\41\0\1\u05bf\1\u05c0\36\0"+
    "\1\u05ba\45\0\1\u05c1\1\u05c2\41\0\2\u05c3\41\0\1\u05c4"+
    "\1\u05c5\36\0\1\u05c6\2\0\1\u05c4\1\u05c5\36\0\1\u05c6"+
    "\2\0\2\u05c5\36\0\1\u05c6\2\0\1\u05c7\1\u05c8\36\0"+
    "\1\u05c6\2\0\2\u05c8\42\0\1\u05c9\36\0\1\u05c6\2\0"+
    "\1\u05c8\1\u05ca\36\0\1\u05c6\2\0\2\u05ca\41\0\1\u05cb"+
    "\1\u05cc\36\0\1\u05c6\45\0\1\u05cd\1\u05ce\41\0\2\u05cf"+
    "\41\0\1\u05d0\1\u05d1\36\0\1\u05d2\2\0\1\u05d0\1\u05d1"+
    "\36\0\1\u05d2\2\0\2\u05d1\36\0\1\u05d2\2\0\1\u05d3"+
    "\1\u05d4\36\0\1\u05d2\2\0\2\u05d4\42\0\1\u05d5\36\0"+
    "\1\u05d2\2\0\1\u05d4\1\u05d6\36\0\1\u05d2\2\0\2\u05d6"+
    "\41\0\1\u05d7\1\u05d8\36\0\1\u05d2\45\0\1\u05d9\1\u05da"+
    "\41\0\2\u05db\41\0\1\u05dc\1\u05dd\36\0\1\u05de\2\0"+
    "\1\u05dc\1\u05dd\36\0\1\u05de\2\0\2\u05dd\36\0\1\u05de"+
    "\2\0\1\u05df\1\u05e0\36\0\1\u05de\2\0\2\u05e0\42\0"+
    "\1\u05e1\36\0\1\u05de\2\0\1\u05e0\1\u05e2\36\0\1\u05de"+
    "\2\0\2\u05e2\41\0\1\u05e3\1\u05e4\36\0\1\u05de\45\0"+
    "\1\u05e5\1\u05e6\41\0\2\u05e7\41\0\1\u05e8\1\u05e9\36\0"+
    "\1\u05ea\2\0\1\u05e8\1\u05e9\36\0\1\u05ea\2\0\2\u05e9"+
    "\36\0\1\u05ea\2\0\1\u05eb\1\u05ec\36\0\1\u05ea\2\0"+
    "\2\u05ec\42\0\1\u05ed\36\0\1\u05ea\2\0\1\u05ec\1\u05ee"+
    "\36\0\1\u05ea\2\0\2\u05ee\41\0\1\u05ef\1\u05f0\36\0"+
    "\1\u05ea\45\0\1\u05f1\1\u05f2\41\0\2\u05f3\41\0\1\u05f4"+
    "\1\u05f5\36\0\1\u05f6\2\0\1\u05f4\1\u05f5\36\0\1\u05f6"+
    "\2\0\2\u05f5\36\0\1\u05f6\2\0\1\u05f7\1\u05f8\36\0"+
    "\1\u05f6\2\0\2\u05f8\42\0\1\u05f9\36\0\1\u05f6\2\0"+
    "\1\u05f8\1\u05fa\36\0\1\u05f6\2\0\2\u05fa\41\0\1\u05fb"+
    "\1\u05fc\36\0\1\u05f6\45\0\1\u05fd\1\u05fe\41\0\2\u05ff"+
    "\41\0\1\u0600\1\u0601\36\0\1\u0602\2\0\1\u0600\1\u0601"+
    "\36\0\1\u0602\2\0\2\u0601\36\0\1\u0602\2\0\1\u0603"+
    "\1\u0604\36\0\1\u0602\2\0\2\u0604\42\0\1\u0605\36\0"+
    "\1\u0602\2\0\1\u0604\1\u0606\36\0\1\u0602\2\0\2\u0606"+
    "\41\0\1\u0607\1\u0608\36\0\1\u0602\45\0\1\u0609\1\u060a"+
    "\41\0\2\u060b\41\0\1\u060c\1\u060d\41\0\2\u060d\41\0"+
    "\1\u060e\1\u060f\41\0\2\u060f\41\0\1\u060f\1\u0610\41\0"+
    "\2\u0610\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[53795];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\2\1\2\11\4\1\2\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\5\0\1\1"+
    "\24\0\1\11\10\0\1\1\41\0\2\1\1\0\2\1"+
    "\1\0\3\1\2\0\1\1\12\0\1\1\17\0\1\1"+
    "\u0577\0\6\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
	    return new Symbol(type, yyline, yycolumn);
	}
	private Symbol sym(int type, Object value){
	    return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner error: " + yytext());
            }
            // fall through
          case 17: break;
          case 2:
            { ;
            }
            // fall through
          case 18: break;
          case 3:
            { return sym(sym.CM);
            }
            // fall through
          case 19: break;
          case 4:
            { return sym(sym.UINT,new Integer(yytext()));
            }
            // fall through
          case 20: break;
          case 5:
            { return sym(sym.COL);
            }
            // fall through
          case 21: break;
          case 6:
            { return sym(sym.S);
            }
            // fall through
          case 22: break;
          case 7:
            { return sym(sym.BO);
            }
            // fall through
          case 23: break;
          case 8:
            { return sym(sym.BC);
            }
            // fall through
          case 24: break;
          case 9:
            { return sym(sym.QSTRING,new String(yytext()));
            }
            // fall through
          case 25: break;
          case 10:
            { return sym(sym.KG);
            }
            // fall through
          case 26: break;
          case 11:
            { return sym(sym.SEP);
            }
            // fall through
          case 27: break;
          case 12:
            { return sym(sym.REAL, new Double(yytext()));
            }
            // fall through
          case 28: break;
          case 13:
            { return sym(sym.EURO);
            }
            // fall through
          case 29: break;
          case 14:
            { return sym(sym.EURO_KG);
            }
            // fall through
          case 30: break;
          case 15:
            { return sym(sym.TK1);
            }
            // fall through
          case 31: break;
          case 16:
            { return sym(sym.TK2);
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
