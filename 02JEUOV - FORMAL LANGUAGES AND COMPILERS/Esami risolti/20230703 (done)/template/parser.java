
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\007\000\002\003" +
    "\007\000\002\003\007\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\005\000\002\006\007\000" +
    "\002\013\006\000\002\013\004\000\002\007\004\000\002" +
    "\007\002\000\002\010\007\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\005\000\002\012\007" +
    "\000\002\011\006\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000" +
    "\004\002\074\001\002\000\010\004\065\005\064\006\063" +
    "\001\002\000\004\007\007\001\002\000\004\011\012\001" +
    "\002\000\004\011\012\001\002\000\006\007\024\011\012" +
    "\001\002\000\004\030\013\001\002\000\004\012\014\001" +
    "\002\000\004\030\016\001\002\000\006\013\021\014\020" +
    "\001\002\000\004\031\017\001\002\000\006\013\ufff7\014" +
    "\ufff7\001\002\000\004\030\022\001\002\000\006\007\ufff9" +
    "\011\ufff9\001\002\000\004\031\023\001\002\000\006\013" +
    "\ufff8\014\ufff8\001\002\000\006\002\ufff5\015\ufff5\001\002" +
    "\000\004\011\012\001\002\000\006\007\ufffa\011\ufffa\001" +
    "\002\000\006\002\000\015\031\001\002\000\006\002\ufff6" +
    "\015\ufff6\001\002\000\010\022\032\023\034\030\035\001" +
    "\002\000\010\022\032\023\034\030\035\001\002\000\010" +
    "\016\050\020\043\021\045\001\002\000\010\022\032\023" +
    "\034\030\035\001\002\000\004\026\036\001\002\000\004" +
    "\030\037\001\002\000\004\025\040\001\002\000\004\031" +
    "\041\001\002\000\012\016\uffef\020\uffef\021\uffef\024\uffef" +
    "\001\002\000\010\020\043\021\045\024\044\001\002\000" +
    "\010\022\032\023\034\030\035\001\002\000\012\016\ufff0" +
    "\020\ufff0\021\ufff0\024\ufff0\001\002\000\010\022\032\023" +
    "\034\030\035\001\002\000\012\016\ufff2\020\043\021\ufff2" +
    "\024\ufff2\001\002\000\012\016\ufff3\020\ufff3\021\ufff3\024" +
    "\ufff3\001\002\000\004\027\052\001\002\000\006\017\055" +
    "\027\056\001\002\000\004\030\053\001\002\000\004\010" +
    "\054\001\002\000\006\017\uffed\027\uffed\001\002\000\006" +
    "\002\ufff4\015\ufff4\001\002\000\004\030\057\001\002\000" +
    "\004\010\060\001\002\000\006\017\uffee\027\uffee\001\002" +
    "\000\012\016\ufff1\020\ufff1\021\ufff1\024\ufff1\001\002\000" +
    "\006\007\ufffb\011\ufffb\001\002\000\012\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\001\002\000\006\004\ufffc\006\ufffc\001" +
    "\002\000\006\005\ufffc\006\ufffc\001\002\000\006\005\067" +
    "\006\063\001\002\000\006\006\ufffc\007\ufffc\001\002\000" +
    "\006\006\063\007\uffff\001\002\000\006\004\072\006\063" +
    "\001\002\000\006\006\ufffc\007\ufffc\001\002\000\006\006" +
    "\063\007\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\010\006\007\001\001\000\004\006\061\001\001\000" +
    "\004\006\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\026\001" +
    "\001\000\004\006\025\001\001\000\002\001\001\000\004" +
    "\010\027\001\001\000\002\001\001\000\004\012\032\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\004" +
    "\012\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\046\001\001\000\002\001\001\000" +
    "\004\012\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\070\001\001\000\004\004\065\001\001\000\002\001" +
    "\001\000\004\004\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\072\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String,Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, HashMap<String,Integer>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP houses_sec SEP preferences_sec 
            { parser.Tree.reduce(5,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok3_maybe TK1 tok3_maybe TK2 tok3_maybe 
            { parser.Tree.reduce(5,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= tok3_maybe TK2 tok3_maybe TK1 tok3_maybe 
            { parser.Tree.reduce(5,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok3_maybe ::= tok3_maybe TK3 
            { parser.Tree.reduce(2,"tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok3_maybe ::= 
            { parser.Tree.reduce(0,"tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // houses_sec ::= house house 
            { parser.Tree.reduce(2,"houses_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("houses_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // houses_sec ::= houses_sec house house 
            { parser.Tree.reduce(3,"houses_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("houses_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // house ::= HOUSE QSTRING START room_l END 
            { parser.Tree.reduce(5,"house",0);
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Integer> tab = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          parser.table.put(type, tab);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("house",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // room_l ::= room_l CM QSTRING UINT 
            { parser.Tree.reduce(4,"room_l",0);
              HashMap<String,Integer> RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Integer> tab = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tab.put(name, size);
                RESULT = tab;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_l",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // room_l ::= QSTRING UINT 
            { parser.Tree.reduce(2,"room_l",0);
              HashMap<String,Integer> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new HashMap<String, Integer>();
                RESULT.put(name, size);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_l",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // preferences_sec ::= preferences_sec if_cmd 
            { parser.Tree.reduce(2,"preferences_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preferences_sec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // preferences_sec ::= 
            { parser.Tree.reduce(0,"preferences_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preferences_sec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if_cmd ::= IF bool_expr THEN print_l FI 
            { parser.Tree.reduce(5,"if_cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_cmd",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool_expr ::= bool_expr AND bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x&y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool_expr ::= bool_expr OR bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x|y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_expr ::= NOT bool_expr 
            { parser.Tree.reduce(2,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_expr ::= RO bool_expr RC 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bool_expr ::= QSTRING DOT QSTRING EQEQ UINT 
            { parser.Tree.reduce(5,"bool_expr",0);
              Boolean RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 HashMap<String, Integer> tab = parser.table.get(type);
                 Integer true_size = tab.get(name);
                 if(true_size.equals(size)){
                    RESULT = true;
                 }
                 else{
                    RESULT = false;
                 }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // print_l ::= print_l PRINT QSTRING S 
            { parser.Tree.reduce(4,"print_l",0);
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Boolean result = (Boolean) parser.stack(-5);
                if(result==true){
                    System.out.println(s);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print_l ::= PRINT QSTRING S 
            { parser.Tree.reduce(3,"print_l",0);
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Boolean result = (Boolean) parser.stack(-4);
                if(result==true){
                    System.out.println(s);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
