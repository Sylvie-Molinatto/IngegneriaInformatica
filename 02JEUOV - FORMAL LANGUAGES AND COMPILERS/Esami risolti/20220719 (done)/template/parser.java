
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\010\000\002\003\014\000\002\004\005" +
    "\000\002\004\002\000\002\005\004\000\002\007\007\000" +
    "\002\007\007\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\016\005\000\002\017\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\020\003" +
    "\000\002\021\006\000\002\010\005\000\002\010\003\000" +
    "\002\012\006\000\002\012\005\000\002\011\004\000\002" +
    "\011\004\000\002\014\005\000\002\015\007\000\002\006" +
    "\003\000\002\006\003\000\002\013\007\000\002\013\010" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\006\ufffb\030\ufffb\031\ufffb\001\002\000" +
    "\004\002\122\001\002\000\004\006\022\001\002\000\010" +
    "\006\uffff\030\010\031\007\001\002\000\004\004\021\001" +
    "\002\000\004\004\011\001\002\000\006\030\ufffb\031\ufffb" +
    "\001\002\000\006\030\013\031\007\001\002\000\004\004" +
    "\014\001\002\000\010\006\ufffe\030\ufffb\031\ufffb\001\002" +
    "\000\006\030\016\031\007\001\002\000\004\004\017\001" +
    "\002\000\006\006\ufffb\031\ufffb\001\002\000\006\006\ufffd" +
    "\031\007\001\002\000\010\006\ufffc\030\ufffc\031\ufffc\001" +
    "\002\000\004\007\025\001\002\000\004\002\000\001\002" +
    "\000\006\022\064\023\070\001\002\000\012\010\031\013" +
    "\026\022\ufff5\023\ufff5\001\002\000\006\017\034\032\033" +
    "\001\002\000\006\004\056\011\055\001\002\000\006\004" +
    "\052\011\051\001\002\000\006\017\034\032\033\001\002" +
    "\000\024\004\uffef\005\uffef\012\uffef\014\uffef\015\uffef\016" +
    "\uffef\021\uffef\026\uffef\027\uffef\001\002\000\024\004\ufff0" +
    "\005\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\026" +
    "\ufff0\027\ufff0\001\002\000\004\020\043\001\002\000\010" +
    "\012\040\015\036\016\037\001\002\000\006\017\034\032" +
    "\033\001\002\000\006\017\034\032\033\001\002\000\006" +
    "\004\ufff4\011\ufff4\001\002\000\024\004\ufff1\005\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\026\ufff1\027\ufff1" +
    "\001\002\000\024\004\ufff2\005\ufff2\012\ufff2\014\ufff2\015" +
    "\ufff2\016\037\021\ufff2\026\ufff2\027\ufff2\001\002\000\006" +
    "\017\034\032\033\001\002\000\012\005\uffec\015\036\016" +
    "\037\021\uffec\001\002\000\006\005\046\021\047\001\002" +
    "\000\006\017\034\032\033\001\002\000\024\004\uffee\005" +
    "\uffee\012\uffee\014\uffee\015\uffee\016\uffee\021\uffee\026\uffee" +
    "\027\uffee\001\002\000\012\005\uffed\015\036\016\037\021" +
    "\uffed\001\002\000\004\010\031\001\002\000\006\022\ufff6" +
    "\023\ufff6\001\002\000\004\004\054\001\002\000\006\022" +
    "\ufff8\023\ufff8\001\002\000\004\013\026\001\002\000\006" +
    "\022\ufff7\023\ufff7\001\002\000\004\004\060\001\002\000" +
    "\006\022\ufff9\023\ufff9\001\002\000\010\014\062\015\036" +
    "\016\037\001\002\000\006\004\ufff3\011\ufff3\001\002\000" +
    "\004\004\121\001\002\000\006\010\073\013\072\001\002" +
    "\000\010\002\ufffa\022\064\023\070\001\002\000\004\004" +
    "\114\001\002\000\006\022\064\023\070\001\002\000\006" +
    "\010\073\013\072\001\002\000\004\024\074\001\002\000" +
    "\010\017\uffe4\024\uffe4\032\uffe4\001\002\000\010\017\uffe5" +
    "\024\uffe5\032\uffe5\001\002\000\006\017\034\032\033\001" +
    "\002\000\010\017\034\025\103\032\033\001\002\000\010" +
    "\015\036\016\037\026\077\001\002\000\006\017\034\032" +
    "\033\001\002\000\010\015\036\016\037\027\101\001\002" +
    "\000\004\004\102\001\002\000\010\017\uffe3\025\uffe3\032" +
    "\uffe3\001\002\000\004\004\uffe6\001\002\000\010\015\036" +
    "\016\037\026\105\001\002\000\006\017\034\032\033\001" +
    "\002\000\010\015\036\016\037\027\107\001\002\000\004" +
    "\004\110\001\002\000\010\017\uffe2\025\uffe2\032\uffe2\001" +
    "\002\000\006\022\064\023\070\001\002\000\006\022\064" +
    "\023\070\001\002\000\010\002\uffeb\022\uffeb\023\uffeb\001" +
    "\002\000\010\002\uffe9\022\uffe9\023\uffe9\001\002\000\006" +
    "\022\064\023\070\001\002\000\010\002\uffea\022\uffea\023" +
    "\uffea\001\002\000\006\017\034\032\033\001\002\000\010" +
    "\004\uffe7\015\036\016\037\001\002\000\010\002\uffe8\022" +
    "\uffe8\023\uffe8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\022" +
    "\007\023\001\001\000\002\001\001\000\012\011\066\012" +
    "\064\014\065\015\062\001\001\000\006\016\026\017\027" +
    "\001\001\000\006\020\060\021\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\034\021\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\041\021\031\001\001\000\006" +
    "\020\040\021\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\044\020\043\021\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\047\021\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\116" +
    "\001\001\000\010\011\114\014\065\015\062\001\001\000" +
    "\002\001\001\000\010\011\110\014\065\015\062\001\001" +
    "\000\004\006\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\074\020\075\021\031" +
    "\001\001\000\006\020\103\021\031\001\001\000\002\001" +
    "\001\000\006\020\077\021\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\105\021\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\111\014\065\015\062\001\001\000\010\011\112\014\065" +
    "\015\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\115\014\065\015\062\001\001\000\002\001\001" +
    "\000\006\020\117\021\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    battery = new Double(0.00);
    fuel = new Double(0.00);

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public Double battery;
    public Double fuel;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP run_sec 
            { parser.Tree.reduce(3,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok2_maybe 
            { parser.Tree.reduce(1,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= tok2_maybe TK1 S tok2_maybe TK1 S 
            { parser.Tree.reduce(6,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= tok2_maybe TK1 S tok2_maybe TK1 S tok2_maybe TK1 S tok2_maybe 
            { parser.Tree.reduce(10,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok2_maybe ::= tok2_maybe TK2 S 
            { parser.Tree.reduce(3,"tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok2_maybe ::= 
            { parser.Tree.reduce(0,"tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // run_sec ::= start_instr command_l 
            { parser.Tree.reduce(2,"run_sec",0);
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] s = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("run_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // start_instr ::= START battery_ass DASH fuel_ass S 
            { parser.Tree.reduce(5,"start_instr",0);
              Double[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2]; RESULT[0]=b; RESULT[1]=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // start_instr ::= START fuel_ass DASH battery_ass S 
            { parser.Tree.reduce(5,"start_instr",0);
              Double[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2]; RESULT[0]=b; RESULT[1]=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // start_instr ::= START battery_ass S 
            { parser.Tree.reduce(3,"start_instr",0);
              Double[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2]; RESULT[0]=b; RESULT[1]=100.00; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // start_instr ::= START fuel_ass S 
            { parser.Tree.reduce(3,"start_instr",0);
              Double[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2]; RESULT[0]=100.00; RESULT[1]=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // start_instr ::= START 
            { parser.Tree.reduce(1,"start_instr",0);
              Double[] RESULT =null;
		 RESULT = new Double[2]; RESULT[0]=100.00; RESULT[1]=100.00; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_instr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // battery_ass ::= BATTERY expr KWH 
            { parser.Tree.reduce(3,"battery_ass",0);
              Double RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double res = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = res;
    System.out.print("battery="+res);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("battery_ass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fuel_ass ::= FUEL expr LITERS 
            { parser.Tree.reduce(3,"fuel_ass",0);
              Double RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double res = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = res;
    System.out.println(" fuel="+res);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel_ass",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr PLUS_WD expr 
            { parser.Tree.reduce(3,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x+y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr STAR_WD expr 
            { parser.Tree.reduce(3,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x*y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= REAL 
            { parser.Tree.reduce(1,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= max 
            { parser.Tree.reduce(1,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // max ::= MAX_WD RO expr_l RC 
            { parser.Tree.reduce(4,"max",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
      RESULT = 0.0;
      for(int i=0;i<x.length;i++){
        if(x[i]>RESULT){
            RESULT = x[i];
        }
      }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_l ::= expr_l CM expr 
            { parser.Tree.reduce(3,"expr_l",0);
              Double[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] list = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double current = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Double[list.length+1];
             for(int i=0;i<list.length;i++){
                RESULT[i] = list[i];
             }
             RESULT[list.length]=current;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_l",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr_l ::= expr 
            { parser.Tree.reduce(1,"expr_l",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new Double[]{x};
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_l",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command_l ::= command command command command 
            { parser.Tree.reduce(4,"command_l",0);
              Double[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command_l ::= command_l command command 
            { parser.Tree.reduce(3,"command_l",0);
              Double[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // command ::= mod S 
            { parser.Tree.reduce(2,"command",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= use S 
            { parser.Tree.reduce(2,"command",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mod ::= MOD power_type expr 
            { parser.Tree.reduce(3,"mod",0);
              Double[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(p==0){
                    Double[] prevArray = (Double[]) parser.stack(-3);
                    Double[] newArray = new Double[2];
                    newArray[0] = x + prevArray[0];
                    newArray[1] = prevArray[1];
                    System.out.println("battery="+newArray[0]+" fuel="+newArray[1]);
                    RESULT = newArray;
                }
                else{
                    Double[] prevArray = (Double[]) parser.stack(-3);
                    Double[] newArray = new Double[2];
                    newArray[0] = prevArray[0];
                    newArray[1] = x + prevArray[1];
                    System.out.println("battery="+newArray[0]+" fuel="+newArray[1]);
                    RESULT = newArray;
                }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use ::= USE power_type DO cons_l DONE 
            { parser.Tree.reduce(5,"use",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = x;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // power_type ::= BATTERY 
            { parser.Tree.reduce(1,"power_type",0);
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // power_type ::= FUEL 
            { parser.Tree.reduce(1,"power_type",0);
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cons_l ::= expr KM expr UNITSKM S 
            { parser.Tree.reduce(5,"cons_l",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
               Integer power_type = (Integer) parser.stack(-6); 
               Double[] prevArray = (Double[]) parser.stack(-8);
               Double[] newArray = new Double[2];
               if(power_type==0){
                  newArray[0] = prevArray[0] - (x*y);
                  newArray[1] = prevArray[1];
                  RESULT = newArray;
                  System.out.println("battery="+newArray[0]+" fuel="+newArray[1]);
               }
               else{
                  newArray[0] = prevArray[0];
                  newArray[1] = prevArray[1] - (x*y);
                  RESULT = newArray;
                  System.out.println("battery="+newArray[0]+" fuel="+newArray[1]);
               }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_l",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cons_l ::= cons_l expr KM expr UNITSKM S 
            { parser.Tree.reduce(6,"cons_l",0);
              Double[] RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double[] prev = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Integer power_type = (Integer) parser.stack(-7);
                Double[] newArray = new Double[2];
                if(power_type==0){
                  newArray[0] = prev[0] - (x*y);
                  newArray[1] = prev[1];
                  System.out.println("battery="+newArray[0]+" fuel="+newArray[1]);
                  RESULT = newArray;
               }
               else{
                  newArray[0] = prev[0];
                  newArray[1] = prev[1] - (x*y);
                  System.out.println("battery="+newArray[0]+" fuel="+newArray[1]);
                  RESULT = newArray;
               } 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_l",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
