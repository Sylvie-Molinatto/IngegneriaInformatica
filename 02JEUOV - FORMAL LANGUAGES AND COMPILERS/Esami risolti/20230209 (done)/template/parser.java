
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\005\000\002\003\006\000\002\003\007" +
    "\000\002\003\007\000\002\003\010\000\002\004\005\000" +
    "\002\004\006\000\002\005\005\000\002\005\002\000\002" +
    "\006\010\000\002\011\006\000\002\011\010\000\002\016" +
    "\002\000\002\007\011\000\002\007\002\000\002\010\003" +
    "\000\002\010\002\000\002\012\002\000\002\013\002\000" +
    "\002\015\006\000\002\015\004\000\002\014\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\006\004\007\005\006\001\002\000\004\002" +
    "\102\001\002\000\004\007\034\001\002\000\004\006\026" +
    "\001\002\000\004\006\022\001\002\000\006\004\012\005" +
    "\011\001\002\000\004\006\021\001\002\000\004\006\013" +
    "\001\002\000\006\005\014\007\uffff\001\002\000\004\006" +
    "\016\001\002\000\006\005\011\007\ufffd\001\002\000\006" +
    "\005\017\007\ufffc\001\002\000\004\006\020\001\002\000" +
    "\010\004\ufff8\005\ufff8\007\ufff8\001\002\000\010\004\ufff9" +
    "\005\ufff9\007\ufff9\001\002\000\004\005\023\001\002\000" +
    "\004\006\025\001\002\000\006\005\011\007\ufffe\001\002" +
    "\000\004\005\017\001\002\000\006\004\027\005\017\001" +
    "\002\000\004\006\030\001\002\000\004\005\031\001\002" +
    "\000\004\006\033\001\002\000\006\005\011\007\ufffb\001" +
    "\002\000\006\005\017\007\ufffa\001\002\000\006\007\ufff6" +
    "\017\ufff6\001\002\000\006\007\036\017\040\001\002\000" +
    "\006\002\ufff0\020\ufff0\001\002\000\004\017\040\001\002" +
    "\000\004\010\041\001\002\000\004\011\042\001\002\000" +
    "\004\017\044\001\002\000\006\012\051\014\050\001\002" +
    "\000\004\010\045\001\002\000\004\021\046\001\002\000" +
    "\004\013\047\001\002\000\006\012\ufff4\014\ufff4\001\002" +
    "\000\004\017\053\001\002\000\004\006\052\001\002\000" +
    "\006\007\ufff5\017\ufff5\001\002\000\004\010\054\001\002" +
    "\000\004\021\055\001\002\000\004\013\056\001\002\000" +
    "\006\012\ufff3\014\ufff3\001\002\000\006\007\ufff7\017\ufff7" +
    "\001\002\000\006\002\000\020\061\001\002\000\004\017" +
    "\062\001\002\000\006\010\ufff2\017\ufff2\001\002\000\006" +
    "\010\064\017\uffee\001\002\000\004\017\uffef\001\002\000" +
    "\004\017\uffec\001\002\000\004\017\074\001\002\000\006" +
    "\006\071\014\070\001\002\000\004\017\uffed\001\002\000" +
    "\006\002\ufff1\020\ufff1\001\002\000\004\017\074\001\002" +
    "\000\006\006\uffeb\014\uffeb\001\002\000\004\015\075\001" +
    "\002\000\004\017\076\001\002\000\004\021\077\001\002" +
    "\000\004\016\100\001\002\000\006\006\uffe9\014\uffe9\001" +
    "\002\000\006\006\uffea\014\uffea\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\002\003\003\004\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\034\001\001\000\004\006\036\001\001\000\004\007\057" +
    "\001\001\000\004\006\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\062\001\001\000\004\010" +
    "\064\001\001\000\002\001\001\000\006\013\065\015\066" +
    "\001\001\000\004\014\100\001\001\000\002\001\001\000" +
    "\004\012\071\001\001\000\002\001\001\000\004\014\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, HashMap<String, Double>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP food_sec SEP recipes_sec 
            { parser.Tree.reduce(5,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok2_maybe TK1 S 
            { parser.Tree.reduce(3,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= TK1 S tok2_maybe 
            { parser.Tree.reduce(3,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= tok2_maybe TK1 S tok2_maybe 
            { parser.Tree.reduce(4,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header_sec ::= tok2_maybe TK1 S TK2 S 
            { parser.Tree.reduce(5,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header_sec ::= TK2 S TK1 S tok2_maybe 
            { parser.Tree.reduce(5,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header_sec ::= TK2 S TK1 S TK2 S 
            { parser.Tree.reduce(6,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok2_maybe ::= tok2_maybe TK2 S 
            { parser.Tree.reduce(3,"tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2_maybe ::= TK2 S TK2 S 
            { parser.Tree.reduce(4,"tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // food_sec ::= food_sec food_cat food_cat 
            { parser.Tree.reduce(3,"food_sec",0);
              Object RESULT =null;
		
                  String min_food_name = "";
                  Double min_price = Double.MAX_VALUE;
                  String max_food_name = "";
                  Double max_price = Double.MIN_VALUE;
                  for(String s1 : parser.table.keySet()){
                    HashMap<String,Double> tab = parser.table.get(s1);
                    for(String s2 : tab.keySet()){
                        Double price = tab.get(s2);
                        if(price>max_price){
                            max_price = price;
                            max_food_name = s2;
                        }
                        if(price<min_price){
                            min_price = price;
                            min_food_name = s2;
                        }
                    }
                  }

                  System.out.printf("Less expensive: "+min_food_name+" %.2f EURO/kg\n", min_price);
                  System.out.printf("More expensive: "+max_food_name+" %.2f EURO/kg\n", max_price);
                  System.out.println("---");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // food_sec ::= 
            { parser.Tree.reduce(0,"food_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // food_cat ::= QSTRING COL SO food_l SC S 
            { parser.Tree.reduce(6,"food_cat",0);
              Object RESULT =null;
		int cat_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cat_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cat_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Double> tab = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
               parser.table.put(cat_name, tab);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_cat",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // food_l ::= QSTRING COL REAL EUROKG 
            { parser.Tree.reduce(4,"food_l",0);
              HashMap<String,Double> RESULT =null;
		int food_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int food_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String food_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               RESULT = new HashMap<String,Double>();
               RESULT.put(food_name, price);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // food_l ::= food_l CM QSTRING COL REAL EUROKG 
            { parser.Tree.reduce(6,"food_l",0);
              HashMap<String,Double> RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap<String,Double> tab = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int food_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int food_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String food_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               tab.put(food_name, price);
               RESULT = tab;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_l",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int recipe_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int recipe_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String recipe_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(recipe_name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // recipes_sec ::= recipes_sec UINT QSTRING NT$0 col_maybe ingr_l S 
            { parser.Tree.reduce(7,"recipes_sec",0);
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int recipe_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int recipe_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String recipe_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   System.out.printf("TOT: %.2f EURO\n",price);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipes_sec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // recipes_sec ::= 
            { parser.Tree.reduce(0,"recipes_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipes_sec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // col_maybe ::= COL 
            { parser.Tree.reduce(1,"col_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_maybe",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // col_maybe ::= 
            { parser.Tree.reduce(0,"col_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_maybe",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Integer RESULT =null;
		 RESULT = (Integer) parser.stack(-5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Integer RESULT =null;
		 RESULT = (Integer) parser.stack(-3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ingr_l ::= ingr_l CM NT0 ingr 
            { parser.Tree.reduce(4,"ingr_l",0);
              Double RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double prev = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double current = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = current+prev;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingr_l",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ingr_l ::= NT1 ingr 
            { parser.Tree.reduce(2,"ingr_l",0);
              Double RESULT =null;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = price;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingr_l",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ingr ::= QSTRING DOT QSTRING REAL KG 
            { parser.Tree.reduce(5,"ingr",0);
              Double RESULT =null;
		int cat_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cat_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cat_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ingr_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ingr_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ingr_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int weightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double weight = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     HashMap<String,Double> tab = parser.table.get(cat_name);
     Double price_kg = tab.get(ingr_name);
     Integer qty = (Integer) parser.stack(-5);
     Double price = price_kg*weight*qty;
     System.out.printf(ingr_name+" %.2f EURO\n", price);
     RESULT = price;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
