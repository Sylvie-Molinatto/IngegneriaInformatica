
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\013\000\002\004\010\000\002\004\007" +
    "\000\002\005\004\000\002\005\003\000\002\005\005\000" +
    "\002\006\004\000\002\006\004\000\002\007\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\002\000\002\011" +
    "\003\000\002\012\006\000\002\012\002\000\002\017\005" +
    "\000\002\017\004\000\002\013\003\000\002\013\003\000" +
    "\002\014\006\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\023\006\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\024\002\000\002\025\002\000\002\015\004\000\002\015" +
    "\005\000\002\016\011\000\002\016\011\000\002\022\005" +
    "\000\002\022\005\000\002\022\004\000\002\022\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\005\007\006\006\001\002\000\010\004" +
    "\151\005\147\006\146\001\002\000\004\002\144\001\002" +
    "\000\004\007\130\001\002\000\004\007\123\001\002\000" +
    "\004\010\011\001\002\000\010\002\ufff0\021\020\030\012" +
    "\001\002\000\004\011\104\001\002\000\010\002\uffec\021" +
    "\uffec\030\uffec\001\002\000\010\002\uffed\021\uffed\030\uffed" +
    "\001\002\000\004\002\ufff2\001\002\000\006\021\020\030" +
    "\012\001\002\000\004\002\000\001\002\000\014\014\022" +
    "\015\025\017\023\020\024\030\021\001\002\000\014\012" +
    "\uffde\013\uffde\016\uffde\026\uffde\027\uffde\001\002\000\014" +
    "\014\022\015\025\017\023\020\024\030\021\001\002\000" +
    "\014\012\uffdd\013\uffdd\016\uffdd\026\uffdd\027\uffdd\001\002" +
    "\000\014\012\uffdc\013\uffdc\016\uffdc\026\uffdc\027\uffdc\001" +
    "\002\000\014\014\022\015\025\017\023\020\024\030\021" +
    "\001\002\000\012\012\027\013\032\026\uffdb\027\uffdb\001" +
    "\002\000\014\014\022\015\025\017\023\020\024\030\021" +
    "\001\002\000\006\026\037\027\040\001\002\000\010\022" +
    "\034\026\uffda\027\uffda\001\002\000\014\014\022\015\025" +
    "\017\023\020\024\030\021\001\002\000\014\012\uffe1\013" +
    "\uffe1\016\uffe1\026\uffe1\027\uffe1\001\002\000\010\002\uffe3" +
    "\021\uffe3\030\uffe3\001\002\000\006\026\037\027\040\001" +
    "\002\000\010\022\uffd8\026\uffd8\027\uffd8\001\002\000\014" +
    "\014\042\015\045\017\043\020\044\030\041\001\002\000" +
    "\014\014\042\015\045\017\043\020\044\030\041\001\002" +
    "\000\012\012\uffd1\013\uffd1\016\uffd1\023\uffd1\001\002\000" +
    "\014\014\042\015\045\017\043\020\044\030\041\001\002" +
    "\000\012\012\uffd0\013\uffd0\016\uffd0\023\uffd0\001\002\000" +
    "\012\012\uffcf\013\uffcf\016\uffcf\023\uffcf\001\002\000\014" +
    "\014\042\015\045\017\043\020\044\030\041\001\002\000" +
    "\010\012\050\013\051\023\047\001\002\000\004\024\054" +
    "\001\002\000\014\014\042\015\045\017\043\020\044\030" +
    "\041\001\002\000\014\014\042\015\045\017\043\020\044" +
    "\030\041\001\002\000\012\012\uffd4\013\uffd4\016\uffd4\023" +
    "\uffd4\001\002\000\012\012\uffd5\013\uffd5\016\uffd5\023\uffd5" +
    "\001\002\000\004\031\055\001\002\000\004\007\056\001" +
    "\002\000\004\025\057\001\002\000\010\022\uffd7\026\uffd7" +
    "\027\uffd7\001\002\000\010\012\050\013\051\016\061\001" +
    "\002\000\012\012\uffd2\013\uffd2\016\uffd2\023\uffd2\001\002" +
    "\000\012\012\uffd3\013\uffd3\016\uffd3\023\uffd3\001\002\000" +
    "\010\012\050\013\051\023\064\001\002\000\004\024\065" +
    "\001\002\000\004\031\066\001\002\000\004\007\067\001" +
    "\002\000\004\025\070\001\002\000\010\022\uffd6\026\uffd6" +
    "\027\uffd6\001\002\000\010\022\uffd9\026\uffd9\027\uffd9\001" +
    "\002\000\014\012\uffe2\013\uffe2\016\uffe2\026\uffe2\027\uffe2" +
    "\001\002\000\010\012\027\013\032\016\074\001\002\000" +
    "\014\012\uffdf\013\uffdf\016\uffdf\026\uffdf\027\uffdf\001\002" +
    "\000\014\012\uffe0\013\uffe0\016\uffe0\026\uffe0\027\uffe0\001" +
    "\002\000\006\021\020\030\012\001\002\000\006\021\020" +
    "\030\012\001\002\000\004\002\ufff1\001\002\000\006\021" +
    "\020\030\012\001\002\000\010\002\uffee\021\020\030\012" +
    "\001\002\000\004\002\uffef\001\002\000\014\014\106\015" +
    "\112\017\107\020\111\030\105\001\002\000\012\007\uffe6" +
    "\012\uffe6\013\uffe6\016\uffe6\001\002\000\014\014\106\015" +
    "\112\017\107\020\111\030\105\001\002\000\012\007\uffe5" +
    "\012\uffe5\013\uffe5\016\uffe5\001\002\000\010\007\121\012" +
    "\114\013\116\001\002\000\012\007\uffe4\012\uffe4\013\uffe4" +
    "\016\uffe4\001\002\000\014\014\106\015\112\017\107\020" +
    "\111\030\105\001\002\000\010\012\114\013\116\016\115" +
    "\001\002\000\014\014\106\015\112\017\107\020\111\030" +
    "\105\001\002\000\012\007\uffe7\012\uffe7\013\uffe7\016\uffe7" +
    "\001\002\000\014\014\106\015\112\017\107\020\111\030" +
    "\105\001\002\000\012\007\uffe9\012\uffe9\013\uffe9\016\uffe9" +
    "\001\002\000\012\007\uffea\012\uffea\013\uffea\016\uffea\001" +
    "\002\000\010\002\uffeb\021\uffeb\030\uffeb\001\002\000\012" +
    "\007\uffe8\012\uffe8\013\uffe8\016\uffe8\001\002\000\004\005" +
    "\124\001\002\000\004\007\125\001\002\000\004\005\126" +
    "\001\002\000\004\007\127\001\002\000\010\004\ufffd\005" +
    "\ufffd\006\ufffd\001\002\000\010\004\ufff3\005\ufff3\006\ufff3" +
    "\001\002\000\010\004\134\005\133\006\132\001\002\000" +
    "\004\007\137\001\002\000\004\007\136\001\002\000\004" +
    "\007\135\001\002\000\012\004\ufff5\005\ufff5\006\ufff5\010" +
    "\ufff5\001\002\000\012\004\ufff4\005\ufff4\006\ufff4\010\ufff4" +
    "\001\002\000\010\004\ufff3\005\ufff3\006\ufff3\001\002\000" +
    "\010\004\134\005\133\006\141\001\002\000\004\007\142" +
    "\001\002\000\010\004\ufff3\005\ufff3\010\ufff3\001\002\000" +
    "\010\004\134\005\133\010\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\010\uffff\001\002\000\004\007\165\001" +
    "\002\000\004\007\162\001\002\000\006\004\151\006\146" +
    "\001\002\000\004\007\160\001\002\000\010\004\151\006" +
    "\146\010\ufffa\001\002\000\006\004\151\006\146\001\002" +
    "\000\006\004\151\006\146\001\002\000\006\004\151\006" +
    "\146\001\002\000\010\004\ufff6\006\ufff6\010\ufff6\001\002" +
    "\000\004\010\ufff9\001\002\000\010\004\ufff8\006\ufff8\010" +
    "\ufff8\001\002\000\010\004\151\006\146\010\ufffb\001\002" +
    "\000\004\005\163\001\002\000\004\007\164\001\002\000" +
    "\010\004\ufffc\005\ufffc\006\ufffc\001\002\000\010\004\ufff7" +
    "\006\ufff7\010\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\010\002\004\003\007\004\003\001\001\000" +
    "\010\005\144\006\147\007\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\016\012\014\013\015\014\013\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\075\014\013\023\012\001\001" +
    "\000\002\001\001\000\004\021\025\001\001\000\002\001" +
    "\001\000\004\021\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\072\001\001\000\006\015\030\024" +
    "\027\001\001\000\004\021\071\001\001\000\004\016\070" +
    "\001\001\000\004\025\034\001\001\000\004\021\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\035" +
    "\001\001\000\002\001\001\000\004\022\062\001\001\000" +
    "\004\022\045\001\001\000\002\001\001\000\004\022\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\052\001\001\000\004\022\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\076\014\013\023\012\001\001\000\012\013\100" +
    "\014\013\017\077\023\012\001\001\000\002\001\001\000" +
    "\010\013\101\014\013\023\012\001\001\000\012\013\100" +
    "\014\013\017\102\023\012\001\001\000\002\001\001\000" +
    "\004\020\107\001\001\000\002\001\001\000\004\020\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\112\001\001\000\002\001\001\000\004" +
    "\020\117\001\001\000\002\001\001\000\004\020\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\160\001\001\000\002\001\001" +
    "\000\006\006\153\007\152\001\001\000\006\006\153\007" +
    "\156\001\001\000\004\006\154\001\001\000\004\006\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, Boolean> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header SEP execution 
            { parser.Tree.reduce(3,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok2_odd tok13 
            { parser.Tree.reduce(2,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TK3 S tok1_tok2_maybe TK3 S tok1_tok2_maybe TK3 S tok1_tok2_maybe 
            { parser.Tree.reduce(9,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok2_odd ::= TK2 S TK2 S TK2 S 
            { parser.Tree.reduce(6,"tok2_odd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_odd",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok2_odd ::= tok2_odd TK2 S TK2 S 
            { parser.Tree.reduce(5,"tok2_odd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_odd",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok13 ::= tok1_or_tok3 tok1_or_tok3 
            { parser.Tree.reduce(2,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok13 ::= tok1_or_tok3_3 
            { parser.Tree.reduce(1,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok13 ::= tok1_or_tok3_3 tok1_or_tok3_3 tok1_or_tok3_3 
            { parser.Tree.reduce(3,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok1_or_tok3 ::= TK1 S 
            { parser.Tree.reduce(2,"tok1_or_tok3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_or_tok3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok1_or_tok3 ::= TK3 S 
            { parser.Tree.reduce(2,"tok1_or_tok3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_or_tok3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok1_or_tok3_3 ::= tok1_or_tok3 tok1_or_tok3 tok1_or_tok3 
            { parser.Tree.reduce(3,"tok1_or_tok3_3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_or_tok3_3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok1_tok2_maybe ::= tok1_tok2_maybe TK1 S 
            { parser.Tree.reduce(3,"tok1_tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok2_maybe",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok1_tok2_maybe ::= tok1_tok2_maybe TK2 S 
            { parser.Tree.reduce(3,"tok1_tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok2_maybe",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok1_tok2_maybe ::= 
            { parser.Tree.reduce(0,"tok1_tok2_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok2_maybe",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // execution ::= cmd_l 
            { parser.Tree.reduce(1,"execution",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cmd_l ::= cmd cmd cmd more_cmd 
            { parser.Tree.reduce(4,"cmd_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cmd_l ::= 
            { parser.Tree.reduce(0,"cmd_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // more_cmd ::= cmd cmd more_cmd 
            { parser.Tree.reduce(3,"more_cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cmd",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // more_cmd ::= cmd cmd 
            { parser.Tree.reduce(2,"more_cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cmd",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cmd ::= ass_cmd 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cmd ::= if_cmd 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ass_cmd ::= ID EQ bool_expr S 
            { parser.Tree.reduce(4,"ass_cmd",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean res = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     parser.table.put(name, res);
     //System.out.println(name+" "+res);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_cmd",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= bool_expr AND bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x&y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= bool_expr OR bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x|y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= NOT bool_expr 
            { parser.Tree.reduce(2,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= RO bool_expr RC 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool_expr ::= ID 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.table.get(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_expr ::= TRUE 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_expr ::= FALSE 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_cmd ::= IF bool_expr_1 comp_l FI 
            { parser.Tree.reduce(4,"if_cmd",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_cmd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_expr_1 ::= bool_expr_1 AND bool_expr_1 
            { parser.Tree.reduce(3,"bool_expr_1",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x&y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr_1 ::= bool_expr_1 OR bool_expr_1 
            { parser.Tree.reduce(3,"bool_expr_1",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x|y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr_1 ::= NOT bool_expr_1 
            { parser.Tree.reduce(2,"bool_expr_1",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_expr_1 ::= RO bool_expr_1 RC 
            { parser.Tree.reduce(3,"bool_expr_1",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_expr_1 ::= ID 
            { parser.Tree.reduce(1,"bool_expr_1",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.table.get(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expr_1 ::= TRUE 
            { parser.Tree.reduce(1,"bool_expr_1",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_expr_1 ::= FALSE 
            { parser.Tree.reduce(1,"bool_expr_1",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Boolean RESULT =null;
		 RESULT = (Boolean) parser.stack(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Boolean RESULT =null;
		 RESULT = (Boolean) parser.stack(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comp_l ::= NT0 comp 
            { parser.Tree.reduce(2,"comp_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_l",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comp_l ::= comp_l NT1 comp 
            { parser.Tree.reduce(3,"comp_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_l",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comp ::= OR_WORD bool_expr_2 DO PRINT QSTRING S DONE 
            { parser.Tree.reduce(7,"comp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
           Boolean y = (Boolean) parser.stack(-7);
           if(x||y){
            System.out.println(s);
           }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comp ::= AND_WORD bool_expr_2 DO PRINT QSTRING S DONE 
            { parser.Tree.reduce(7,"comp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
           Boolean y = (Boolean) parser.stack(-7);
           if(x && y){
            System.out.println(s);
           }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_expr_2 ::= bool_expr_2 AND bool_expr_2 
            { parser.Tree.reduce(3,"bool_expr_2",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x&y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_expr_2 ::= bool_expr_2 OR bool_expr_2 
            { parser.Tree.reduce(3,"bool_expr_2",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x|y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_expr_2 ::= NOT bool_expr_2 
            { parser.Tree.reduce(2,"bool_expr_2",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_expr_2 ::= RO bool_expr_2 RC 
            { parser.Tree.reduce(3,"bool_expr_2",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_expr_2 ::= ID 
            { parser.Tree.reduce(1,"bool_expr_2",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.table.get(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_expr_2 ::= TRUE 
            { parser.Tree.reduce(1,"bool_expr_2",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_expr_2 ::= FALSE 
            { parser.Tree.reduce(1,"bool_expr_2",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
