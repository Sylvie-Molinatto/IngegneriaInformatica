
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\010\000\002\004\010\000\002\004\007\000" +
    "\002\006\010\000\002\007\005\000\002\010\007\000\002" +
    "\005\005\000\002\005\005\000\002\005\002\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\013\006" +
    "\000\002\016\010\000\002\016\006\000\002\015\003\000" +
    "\002\014\004\000\002\014\003\000\002\024\002\000\002" +
    "\017\011\000\002\023\006\000\002\023\004\000\002\020" +
    "\002\000\002\021\002\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\006\004\007\005\006\001\002\000\004\002" +
    "\120\001\002\000\004\007\050\001\002\000\004\010\037" +
    "\001\002\000\004\010\032\001\002\000\006\004\013\005" +
    "\012\001\002\000\006\005\012\007\uffff\001\002\000\004" +
    "\010\021\001\002\000\004\010\016\001\002\000\004\007" +
    "\ufffd\001\002\000\004\007\ufffe\001\002\000\004\004\017" +
    "\001\002\000\004\010\020\001\002\000\006\004\ufff9\005" +
    "\ufff9\001\002\000\004\005\022\001\002\000\004\010\023" +
    "\001\002\000\004\005\024\001\002\000\004\010\025\001" +
    "\002\000\006\005\ufff8\007\ufff8\001\002\000\004\005\012" +
    "\001\002\000\006\005\030\007\ufff7\001\002\000\004\010" +
    "\031\001\002\000\004\007\ufff6\001\002\000\004\004\033" +
    "\001\002\000\004\010\034\001\002\000\004\004\035\001" +
    "\002\000\004\010\036\001\002\000\006\004\ufffa\005\ufffa" +
    "\001\002\000\012\004\ufff3\005\ufff3\006\ufff3\007\ufff3\001" +
    "\002\000\012\004\043\005\042\006\041\007\ufffc\001\002" +
    "\000\004\010\047\001\002\000\004\010\045\001\002\000" +
    "\004\010\044\001\002\000\012\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\001\002\000\010\004\ufff3\006\ufff3\007\ufff3\001" +
    "\002\000\010\004\043\006\041\007\ufffb\001\002\000\012" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\001\002\000\004\015" +
    "\054\001\002\000\006\007\ufff2\015\054\001\002\000\004" +
    "\015\054\001\002\000\004\007\071\001\002\000\004\011" +
    "\055\001\002\000\004\016\056\001\002\000\004\015\066" +
    "\001\002\000\006\010\061\013\060\001\002\000\004\016" +
    "\062\001\002\000\006\007\uffef\015\uffef\001\002\000\004" +
    "\015\063\001\002\000\004\017\064\001\002\000\004\012" +
    "\065\001\002\000\006\010\uffee\013\uffee\001\002\000\004" +
    "\017\067\001\002\000\004\012\070\001\002\000\006\010" +
    "\uffed\013\uffed\001\002\000\004\015\074\001\002\000\006" +
    "\002\uffea\015\uffea\001\002\000\006\002\uffec\015\074\001" +
    "\002\000\004\016\uffe9\001\002\000\004\002\000\001\002" +
    "\000\004\016\077\001\002\000\004\014\100\001\002\000" +
    "\004\011\101\001\002\000\004\015\uffe4\001\002\000\004" +
    "\015\110\001\002\000\006\010\105\013\104\001\002\000" +
    "\004\015\uffe5\001\002\000\006\002\uffe8\015\uffe8\001\002" +
    "\000\004\015\110\001\002\000\006\010\uffe7\013\uffe7\001" +
    "\002\000\004\016\111\001\002\000\006\010\uffe3\013\uffe3" +
    "\001\002\000\006\010\uffe6\013\uffe6\001\002\000\006\002" +
    "\uffeb\015\uffeb\001\002\000\004\015\054\001\002\000\006" +
    "\007\ufff1\015\ufff1\001\002\000\004\015\054\001\002\000" +
    "\006\007\ufff0\015\ufff0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\010\002\003\003\004\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\010\007\014\010\013\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\052\012\050\013\051\001\001\000\004" +
    "\013\115\001\001\000\004\013\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\072\015\074\017\071\001\001" +
    "\000\002\001\001\000\004\017\112\001\001\000\004\024" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\101\023\102\001" +
    "\001\000\004\022\111\001\001\000\002\001\001\000\004" +
    "\020\105\001\001\000\002\001\001\000\004\022\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\114\001" +
    "\001\000\002\001\001\000\004\013\116\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, HashMap<String, Double>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP dresses_sec SEP shopping_sec 
            { parser.Tree.reduce(5,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok1_3odd tok2_3 
            { parser.Tree.reduce(2,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= tok1_3odd tok2_9 
            { parser.Tree.reduce(2,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= tok1_3odd tok2_10 
            { parser.Tree.reduce(2,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header_sec ::= TK2 S tok1_tok3_maybe 
            { parser.Tree.reduce(3,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header_sec ::= TK2 S tok1_tok3_maybe TK2 S tok1_tok3_maybe 
            { parser.Tree.reduce(6,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok1_3odd ::= TK1 S TK1 S TK1 S 
            { parser.Tree.reduce(6,"tok1_3odd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_3odd",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok1_3odd ::= tok1_3odd TK1 S TK1 S 
            { parser.Tree.reduce(5,"tok1_3odd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_3odd",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2_3 ::= TK2 S TK2 S TK2 S 
            { parser.Tree.reduce(6,"tok2_3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok2_9 ::= tok2_3 tok2_3 tok2_3 
            { parser.Tree.reduce(3,"tok2_9",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_9",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok2_10 ::= tok2_3 tok2_3 tok2_3 TK2 S 
            { parser.Tree.reduce(5,"tok2_10",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_10",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok1_tok3_maybe ::= tok1_tok3_maybe TK1 S 
            { parser.Tree.reduce(3,"tok1_tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok3_maybe",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok1_tok3_maybe ::= tok1_tok3_maybe TK3 S 
            { parser.Tree.reduce(3,"tok1_tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok3_maybe",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok1_tok3_maybe ::= 
            { parser.Tree.reduce(0,"tok1_tok3_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_tok3_maybe",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dresses_sec ::= clothes_l 
            { parser.Tree.reduce(1,"dresses_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dresses_sec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clothes_l ::= dress dress dress 
            { parser.Tree.reduce(3,"clothes_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clothes_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clothes_l ::= clothes_l dress dress 
            { parser.Tree.reduce(3,"clothes_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clothes_l",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dress ::= QSTRING DASH prod_l S 
            { parser.Tree.reduce(4,"dress",0);
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Double> value = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
       parser.table.put(key,value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dress",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prod_l ::= prod_l CM UINT QSTRING REAL EURO 
            { parser.Tree.reduce(6,"prod_l",0);
              HashMap<String,Double> RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap<String,Double> tab = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tab.put(key, value);
                RESULT = tab;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_l",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prod_l ::= UINT QSTRING REAL EURO 
            { parser.Tree.reduce(4,"prod_l",0);
              HashMap<String,Double> RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 RESULT = new HashMap<String, Double>();
                 RESULT.put(key, value);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_l",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // shopping_sec ::= purch_cmd_l 
            { parser.Tree.reduce(1,"shopping_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shopping_sec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // purch_cmd_l ::= purch_cmd_l cmd 
            { parser.Tree.reduce(2,"purch_cmd_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("purch_cmd_l",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // purch_cmd_l ::= cmd 
            { parser.Tree.reduce(1,"purch_cmd_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("purch_cmd_l",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object[] RESULT =null;
		int dress_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dress_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dress_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(dress_name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cmd ::= QSTRING NT$0 UINT PERCENT DASH purch_prod_l S 
            { parser.Tree.reduce(7,"cmd",0);
              Object[] RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dress_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dress_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String dress_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int percleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int percright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer perc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] res = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = new Object[]{dress_name, perc};
          System.out.println("TOTAL: "+res[0]+" euro N_PROD: "+res[1]);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // purch_prod_l ::= purch_prod_l CM NT0 prod 
            { parser.Tree.reduce(4,"purch_prod_l",0);
              Object[] RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object[] prev = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] cur = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Double tot_price = (Double) prev[0] + (Double) cur[0];
            Integer tot_qty = (Integer) prev[1] + (Integer) cur[1];
            RESULT = new Object[]{tot_price, tot_qty};

              CUP$parser$result = parser.getSymbolFactory().newSymbol("purch_prod_l",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // purch_prod_l ::= NT1 prod 
            { parser.Tree.reduce(2,"purch_prod_l",0);
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = p;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("purch_prod_l",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Object[] RESULT =null;
		 RESULT = new Object[2]; RESULT[0] = (String) parser.stack(-6); RESULT[1] = (Integer) parser.stack(-4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Object[] RESULT =null;
		 RESULT = new Object[2]; RESULT[0] = (String) parser.stack(-4); RESULT[1] = (Integer) parser.stack(-2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prod ::= QSTRING UINT 
            { parser.Tree.reduce(2,"prod",0);
              Object[] RESULT =null;
		int prod_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prod_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String prod_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer qty = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Object[] result = (Object[]) parser.stack(-2);

        HashMap<String,Double> tab = parser.table.get(result[0]);

        Double price = tab.get(prod_name);

        Integer discount = (Integer) result[1];

        Double res = qty*(price - (100-discount)*price/100);

        System.out.println(prod_name+" "+res+" euro");

        RESULT = new Object[]{res, qty};

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
