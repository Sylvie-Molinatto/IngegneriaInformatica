
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\005\000\002\003" +
    "\011\000\002\003\014\000\002\003\003\000\002\004\005" +
    "\000\002\004\002\000\002\005\003\000\002\006\006\000" +
    "\002\006\002\000\002\010\005\000\002\010\004\000\002" +
    "\007\003\000\002\007\003\000\002\011\006\000\002\012" +
    "\015\000\002\012\011\000\002\013\005\000\002\013\004" +
    "\000\002\020\002\000\002\021\002\000\002\014\006\000" +
    "\002\015\005\000\002\015\004\000\002\022\002\000\002" +
    "\023\002\000\002\016\006\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\010\004\ufffb\005\ufffb\006\ufffb\001\002\000" +
    "\004\002\114\001\002\000\004\006\022\001\002\000\010" +
    "\004\010\005\007\006\ufffd\001\002\000\004\007\012\001" +
    "\002\000\004\007\011\001\002\000\010\004\ufffc\005\ufffc" +
    "\006\ufffc\001\002\000\006\004\ufffb\005\ufffb\001\002\000" +
    "\006\004\010\005\014\001\002\000\004\007\015\001\002" +
    "\000\010\004\ufffb\005\ufffb\006\ufffb\001\002\000\010\004" +
    "\010\005\017\006\uffff\001\002\000\004\007\020\001\002" +
    "\000\006\004\ufffb\006\ufffb\001\002\000\006\004\010\006" +
    "\ufffe\001\002\000\010\002\ufff8\012\031\025\023\001\002" +
    "\000\004\010\111\001\002\000\010\002\ufff5\012\ufff5\025" +
    "\ufff5\001\002\000\004\002\ufffa\001\002\000\006\012\031" +
    "\025\023\001\002\000\010\002\ufff4\012\ufff4\025\ufff4\001" +
    "\002\000\004\002\000\001\002\000\004\014\032\001\002" +
    "\000\014\020\034\021\035\022\037\023\040\025\033\001" +
    "\002\000\004\011\100\001\002\000\014\020\034\021\035" +
    "\022\037\023\040\025\033\001\002\000\012\015\uffe3\016" +
    "\uffe3\017\uffe3\024\uffe3\001\002\000\010\015\047\016\042" +
    "\017\044\001\002\000\012\015\uffe2\016\uffe2\017\uffe2\024" +
    "\uffe2\001\002\000\014\020\034\021\035\022\037\023\040" +
    "\025\033\001\002\000\010\016\042\017\044\024\043\001" +
    "\002\000\014\020\034\021\035\022\037\023\040\025\033" +
    "\001\002\000\012\015\uffe1\016\uffe1\017\uffe1\024\uffe1\001" +
    "\002\000\014\020\034\021\035\022\037\023\040\025\033" +
    "\001\002\000\012\015\uffe5\016\042\017\uffe5\024\uffe5\001" +
    "\002\000\012\015\uffe6\016\uffe6\017\uffe6\024\uffe6\001\002" +
    "\000\004\014\050\001\002\000\004\025\uffed\001\002\000" +
    "\004\025\071\001\002\000\006\015\054\025\uffee\001\002" +
    "\000\004\025\071\001\002\000\012\002\ufff1\012\ufff1\013" +
    "\055\025\ufff1\001\002\000\004\014\056\001\002\000\004" +
    "\025\uffe8\001\002\000\004\025\063\001\002\000\006\015" +
    "\062\025\uffe9\001\002\000\004\025\063\001\002\000\010" +
    "\002\ufff2\012\ufff2\025\ufff2\001\002\000\004\010\065\001" +
    "\002\000\006\015\uffeb\025\uffeb\001\002\000\004\026\066" +
    "\001\002\000\004\007\067\001\002\000\006\015\uffe7\025" +
    "\uffe7\001\002\000\006\015\uffea\025\uffea\001\002\000\004" +
    "\010\073\001\002\000\006\015\ufff0\025\ufff0\001\002\000" +
    "\004\026\074\001\002\000\004\007\075\001\002\000\006" +
    "\015\uffec\025\uffec\001\002\000\006\015\uffef\025\uffef\001" +
    "\002\000\012\015\uffe4\016\uffe4\017\uffe4\024\uffe4\001\002" +
    "\000\004\026\101\001\002\000\012\015\uffe0\016\uffe0\017" +
    "\uffe0\024\uffe0\001\002\000\006\012\031\025\023\001\002" +
    "\000\006\012\031\025\023\001\002\000\010\002\ufff9\012" +
    "\031\025\023\001\002\000\006\012\031\025\023\001\002" +
    "\000\010\002\ufff6\012\ufff6\025\ufff6\001\002\000\006\012" +
    "\031\025\023\001\002\000\010\002\ufff7\012\ufff7\025\ufff7" +
    "\001\002\000\004\026\112\001\002\000\004\007\113\001" +
    "\002\000\010\002\ufff3\012\ufff3\025\ufff3\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\020\001\001\000\002\001\001\000\014\005\027" +
    "\006\024\007\025\011\023\012\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\101" +
    "\011\023\012\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\035\001\001\000\002" +
    "\001\001\000\004\017\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\040\001\001" +
    "\000\002\001\001\000\004\017\045\001\001\000\002\001" +
    "\001\000\004\017\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\051\021\050\001" +
    "\001\000\004\014\075\001\001\000\004\020\052\001\001" +
    "\000\004\014\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\057\023\056\001\001\000\004\016\067" +
    "\001\001\000\004\022\060\001\001\000\004\016\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\102\011\023\012\026\001\001\000\012\007" +
    "\104\010\103\011\023\012\026\001\001\000\010\007\106" +
    "\011\023\012\026\001\001\000\010\007\105\011\023\012" +
    "\026\001\001\000\002\001\001\000\010\007\107\011\023" +
    "\012\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, String>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap<String, String> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= header_sec SEP code_sec 
            { parser.Tree.reduce(3,"PROG",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header_sec ::= tok1_maybe TK2 S tok1_maybe TK2 S tok1_maybe 
            { parser.Tree.reduce(7,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header_sec ::= tok1_maybe TK2 S tok1_maybe TK2 S tok1_maybe TK2 S tok1_maybe 
            { parser.Tree.reduce(10,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_sec ::= tok1_maybe 
            { parser.Tree.reduce(1,"header_sec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1_maybe ::= tok1_maybe TK1 S 
            { parser.Tree.reduce(3,"tok1_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1_maybe ::= 
            { parser.Tree.reduce(0,"tok1_maybe",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_maybe",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_sec ::= command_l 
            { parser.Tree.reduce(1,"code_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command_l ::= cmd cmd cmd more_cmd 
            { parser.Tree.reduce(4,"command_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_l",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command_l ::= 
            { parser.Tree.reduce(0,"command_l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_l",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // more_cmd ::= more_cmd cmd cmd 
            { parser.Tree.reduce(3,"more_cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cmd",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // more_cmd ::= cmd cmd 
            { parser.Tree.reduce(2,"more_cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cmd",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cmd ::= assign 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cmd ::= if 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assign ::= ID EQ QSTRING S 
            { parser.Tree.reduce(4,"assign",0);
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            parser.table.put(key, value);
            System.out.println(key+" "+value);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= IF SO bool_expr SC SO assign_l_1 SC ELSE SO assign_l_2 SC 
            { parser.Tree.reduce(11,"if",0);
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean res = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		
         RESULT = res;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= IF SO bool_expr SC SO assign_l_1 SC 
            { parser.Tree.reduce(7,"if",0);
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean res = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
         RESULT = res;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assign_l_1 ::= assign_l_1 NT0 assign_1 
            { parser.Tree.reduce(3,"assign_l_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_l_1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assign_l_1 ::= NT1 assign_1 
            { parser.Tree.reduce(2,"assign_l_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_l_1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Boolean RESULT =null;
		 RESULT = (Boolean) parser.stack(-3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Boolean RESULT =null;
		 RESULT = (Boolean) parser.stack(-2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign_1 ::= ID EQ QSTRING S 
            { parser.Tree.reduce(4,"assign_1",0);
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Boolean result = (Boolean) parser.stack(-4);
            if(result.equals(true)){
                System.out.println(key+" "+value);
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assign_l_2 ::= assign_l_2 NT2 assign_2 
            { parser.Tree.reduce(3,"assign_l_2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_l_2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign_l_2 ::= NT3 assign_2 
            { parser.Tree.reduce(2,"assign_l_2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_l_2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT2 ::= 
            { parser.Tree.reduce(0,"NT2",0);
              Boolean RESULT =null;
		 RESULT = (Boolean) parser.stack(-7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT3 ::= 
            { parser.Tree.reduce(0,"NT3",0);
              Boolean RESULT =null;
		 RESULT = (Boolean) parser.stack(-6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign_2 ::= ID EQ QSTRING S 
            { parser.Tree.reduce(4,"assign_2",0);
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Boolean result = (Boolean) parser.stack(-4);
            if(result.equals(false)){
                System.out.println(key+" "+value);
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool_expr ::= bool_expr AND bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x&y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_expr ::= bool_expr OR bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x|y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_expr ::= NOT bool_expr 
            { parser.Tree.reduce(2,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_expr ::= TRUE 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_expr ::= FALSE 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr ::= RO bool_expr RC 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_expr ::= ID EQEQ QSTRING 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 if(parser.table.get(x).equals(y)){
                    RESULT = true;
                 }
                 else{
                    RESULT = false;
                 }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
